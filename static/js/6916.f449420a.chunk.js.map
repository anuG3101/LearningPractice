{"version":3,"file":"static/js/6916.f449420a.chunk.js","mappings":"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","sources":["../node_modules/@siemens/ix/dist/esm/src/components/utils/condition-checks.ts","../node_modules/@siemens/ix/dist/esm/src/components/utils/a11y.ts","../node_modules/@siemens/ix/dist/esm/src/components/toggle/toggle.tsx","../node_modules/@siemens/ix/dist/esm/src/components/toggle/toggle.scss?tag=ix-toggle&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/utils/input/validation.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport const isHttpUrl = (link: string) => {\n  if (!link) {\n    return false;\n  }\n\n  let url: URL;\n\n  try {\n    url = new URL(link);\n  } catch (e) {\n    return false;\n  }\n\n  return url.protocol === 'http:' || url.protocol === 'https:';\n};\n\nexport const isSvgDataUrl = (url: string) => {\n  if (!url) {\n    return false;\n  }\n\n  if (typeof url !== 'string') {\n    return false;\n  }\n\n  return url.startsWith('data:image/svg+xml');\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { isHttpUrl, isSvgDataUrl } from './condition-checks';\n\nexport const a11yBoolean = (value: boolean | undefined) =>\n  value ? 'true' : 'false';\n\nconst kebabCaseToUpperCaseSentence = (kebabCase: string) => {\n  const withoutFilledSuffix = kebabCase.replace('-filled', '');\n  const words = withoutFilledSuffix.split('-');\n  const sentence = words\n    .map((word) => {\n      const trimWord = word.trim();\n      const digitLessWord = trimWord.replace(/\\d+/g, '');\n\n      if (digitLessWord.length === 0) {\n        return trimWord;\n      }\n\n      return digitLessWord;\n    })\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n\n  return sentence;\n};\n\nexport const getFallbackLabelFromIconName = (iconName?: string) => {\n  if (!iconName) {\n    return 'Unknown';\n  }\n\n  if (isHttpUrl(iconName)) {\n    return 'Unknown';\n  }\n\n  if (isSvgDataUrl(iconName)) {\n    return 'Unknown';\n  }\n\n  const label = kebabCaseToUpperCaseSentence(iconName);\n\n  if (label.length === 0) {\n    return 'Unknown';\n  }\n\n  return label;\n};\n\nexport const a11yHostAttributes = (\n  hostElement: HTMLElement,\n  ignoreAttributes: A11yAttributeName[] = []\n): Record<A11yAttributeName, string> => {\n  const attributeObject: Record<string, string> = {};\n  a11yAttributes.forEach((attr) => {\n    if (hostElement.hasAttribute(attr)) {\n      const value = hostElement.getAttribute(attr);\n      if (value !== null && !ignoreAttributes.includes(attr)) {\n        attributeObject[attr] = hostElement.getAttribute(attr) ?? '';\n        hostElement.removeAttribute(attr);\n      }\n    }\n  });\n\n  return attributeObject;\n};\n\nexport type A11yAttributeName =\n  | 'role'\n  | 'aria-activedescendant'\n  | 'aria-atomic'\n  | 'aria-autocomplete'\n  | 'aria-braillelabel'\n  | 'aria-brailleroledescription'\n  | 'aria-busy'\n  | 'aria-checked'\n  | 'aria-colcount'\n  | 'aria-colindex'\n  | 'aria-colindextext'\n  | 'aria-colspan'\n  | 'aria-controls'\n  | 'aria-current'\n  | 'aria-describedby'\n  | 'aria-description'\n  | 'aria-details'\n  | 'aria-disabled'\n  | 'aria-errormessage'\n  | 'aria-expanded'\n  | 'aria-flowto'\n  | 'aria-haspopup'\n  | 'aria-hidden'\n  | 'aria-invalid'\n  | 'aria-keyshortcuts'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-level'\n  | 'aria-live'\n  | 'aria-multiline'\n  | 'aria-multiselectable'\n  | 'aria-orientation'\n  | 'aria-owns'\n  | 'aria-placeholder'\n  | 'aria-posinset'\n  | 'aria-pressed'\n  | 'aria-readonly'\n  | 'aria-relevant'\n  | 'aria-required'\n  | 'aria-roledescription'\n  | 'aria-rowcount'\n  | 'aria-rowindex'\n  | 'aria-rowindextext'\n  | 'aria-rowspan'\n  | 'aria-selected'\n  | 'aria-setsize'\n  | 'aria-sort'\n  | 'aria-valuemax'\n  | 'aria-valuemin'\n  | 'aria-valuenow'\n  | 'aria-valuetext';\n\nconst a11yAttributes: A11yAttributeName[] = [\n  'role',\n  'aria-activedescendant',\n  'aria-atomic',\n  'aria-autocomplete',\n  'aria-braillelabel',\n  'aria-brailleroledescription',\n  'aria-busy',\n  'aria-checked',\n  'aria-colcount',\n  'aria-colindex',\n  'aria-colindextext',\n  'aria-colspan',\n  'aria-controls',\n  'aria-current',\n  'aria-describedby',\n  'aria-description',\n  'aria-details',\n  'aria-disabled',\n  'aria-errormessage',\n  'aria-expanded',\n  'aria-flowto',\n  'aria-haspopup',\n  'aria-hidden',\n  'aria-invalid',\n  'aria-keyshortcuts',\n  'aria-label',\n  'aria-labelledby',\n  'aria-level',\n  'aria-live',\n  'aria-multiline',\n  'aria-multiselectable',\n  'aria-orientation',\n  'aria-owns',\n  'aria-placeholder',\n  'aria-posinset',\n  'aria-pressed',\n  'aria-readonly',\n  'aria-relevant',\n  'aria-required',\n  'aria-roledescription',\n  'aria-rowcount',\n  'aria-rowindex',\n  'aria-rowindextext',\n  'aria-rowspan',\n  'aria-selected',\n  'aria-setsize',\n  'aria-sort',\n  'aria-valuemax',\n  'aria-valuemin',\n  'aria-valuenow',\n  'aria-valuetext',\n];\n\ntype PartialRecord<K extends A11yAttributeName, T> = {\n  [P in K]?: T;\n};\nexport type A11yAttributes = PartialRecord<A11yAttributeName, string>;\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  AttachInternals,\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  Watch,\n} from '@stencil/core';\nimport { a11yBoolean } from '../utils/a11y';\nimport { IxFormComponent, HookValidationLifecycle } from '../utils/input';\n\n/**\n * @form-ready\n */\n@Component({\n  tag: 'ix-toggle',\n  styleUrl: 'toggle.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class Toggle implements IxFormComponent<string> {\n  @AttachInternals() formInternals!: ElementInternals;\n\n  @Element() hostElement!: HTMLIxToggleElement;\n\n  /**\n   * Name of the checkbox component\n   */\n  @Prop({ reflect: true }) name?: string;\n\n  /**\n   * Value of the checkbox component\n   */\n  @Prop({ reflect: true }) value: string = 'on';\n\n  /**\n   * Whether the slide-toggle element is checked or not.\n   */\n  @Prop({ mutable: true, reflect: true }) checked = false;\n\n  /**\n   * Whether the slide-toggle element is disabled or not.\n   */\n  @Prop() disabled = false;\n\n  /**\n   * If true the control is in indeterminate state\n   */\n  @Prop({ mutable: true, reflect: true }) indeterminate = false;\n\n  /**\n   * Text for on state\n   */\n  @Prop() textOn = 'On';\n\n  /**\n   * Text for off state\n   */\n  @Prop() textOff = 'Off';\n\n  /**\n   * Text for indeterminate state\n   */\n  @Prop() textIndeterminate = 'Mixed';\n\n  /**\n   * Hide `on` and `off` text\n   */\n  @Prop() hideText = false;\n\n  /**\n   * Required state of the checkbox component.\n   *\n   * If true, checkbox needs to be checked to be valid\n   */\n  @Prop({ reflect: true }) required = false;\n\n  /**\n   * An event will be dispatched each time the slide-toggle changes its value.\n   */\n  @Event() checkedChange!: EventEmitter<boolean>;\n\n  /** @internal */\n  @Event() valueChange!: EventEmitter<string>;\n\n  /**\n   * An event will be dispatched each time the toggle is blurred.\n   */\n  @Event() ixBlur!: EventEmitter<void>;\n\n  private touched = false;\n\n  onCheckedChange(newChecked: boolean) {\n    if (this.disabled) {\n      return;\n    }\n\n    const wasIndeterminate = this.indeterminate;\n    const oldChecked = this.checked;\n\n    if (this.indeterminate) {\n      this.indeterminate = false;\n    }\n\n    this.checked = newChecked;\n\n    const { defaultPrevented } = this.checkedChange.emit(this.checked);\n\n    if (defaultPrevented) {\n      this.indeterminate = wasIndeterminate;\n      this.checked = oldChecked;\n    }\n  }\n\n  componentWillLoad() {\n    this.updateFormInternalValue();\n  }\n\n  updateFormInternalValue(): void {\n    if (this.checked) {\n      this.formInternals.setFormValue(this.value);\n    } else {\n      this.formInternals.setFormValue(null);\n    }\n  }\n\n  @Watch('checked')\n  watchCheckedChange() {\n    this.touched = true;\n    this.updateFormInternalValue();\n  }\n\n  /** @internal */\n  @Method()\n  hasValidValue(): Promise<boolean> {\n    return Promise.resolve(this.checked);\n  }\n\n  /** @internal */\n  @Method()\n  getAssociatedFormElement(): Promise<HTMLFormElement | null> {\n    return Promise.resolve(this.formInternals.form);\n  }\n\n  /** @internal */\n  @Method()\n  isTouched(): Promise<boolean> {\n    return Promise.resolve(this.touched);\n  }\n\n  @HookValidationLifecycle()\n  updateClassMappings() {\n    /** This function is intentionally empty */\n  }\n\n  render() {\n    let toggleText = this.textOff;\n\n    if (this.checked) {\n      toggleText = this.textOn;\n    }\n\n    if (this.indeterminate) {\n      toggleText = this.textIndeterminate;\n    }\n    return (\n      <Host\n        class={{\n          disabled: this.disabled,\n        }}\n        onBlur={() => this.ixBlur.emit()}\n        onFocus={() => (this.touched = true)}\n      >\n        <label class=\"wrapper\">\n          <button\n            role=\"switch\"\n            aria-checked={a11yBoolean(this.checked)}\n            class={{\n              switch: true,\n              checked: this.checked,\n              indeterminate: this.indeterminate,\n            }}\n            onClick={() => this.onCheckedChange(!this.checked)}\n          >\n            <div class=\"slider\"></div>\n          </button>\n          <input\n            type=\"checkbox\"\n            disabled={this.disabled}\n            indeterminate={this.indeterminate}\n            checked={this.checked}\n            tabindex={0}\n            aria-hidden={a11yBoolean(true)}\n            aria-checked={a11yBoolean(this.checked)}\n            onChange={(event) =>\n              this.onCheckedChange((event.target as HTMLInputElement).checked)\n            }\n          />\n          {!this.hideText && (\n            <ix-typography class=\"label\">{toggleText}</ix-typography>\n          )}\n        </label>\n      </Host>\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n@import 'mixins/hover';\n@import 'mixins/shadow-dom/component';\n\n:host {\n  @include ix-component;\n  display: inline-flex;\n  flex-direction: row;\n  position: relative;\n  height: 1.5rem;\n  margin-block-start: 0.25rem;\n  margin-block-end: 0.25rem;\n\n  input[type='checkbox'] {\n    display: none;\n  }\n\n  .wrapper {\n    display: flex;\n    align-items: flex-start;\n    width: 100%;\n    height: 100%;\n  }\n\n  .label {\n    display: inline-block;\n    white-space: normal;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    margin-block-start: 0.125rem;\n    margin-inline-start: 0.5625rem;\n  }\n\n  .switch {\n    all: unset;\n    position: relative;\n    display: inline-block;\n    width: 3rem;\n    min-width: 3rem;\n    max-width: 3rem;\n    height: 1.5rem;\n  }\n\n  .slider {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: var(--theme-switch-off--background);\n    transition: var(--theme-default-time);\n    border-radius: 1.5rem;\n    border: 0.0625rem solid transparent;\n  }\n\n  .slider:before {\n    position: absolute;\n    content: '';\n    height: 1.125rem;\n    width: 1.125rem;\n    left: 0.125rem;\n    bottom: 0.125rem;\n    background-color: var(--theme-switch-thumb-off--background);\n    transition: var(--theme-default-time);\n    border-radius: 50%;\n  }\n\n  .switch.checked > .slider::before {\n    background-color: var(--theme-switch-thumb-on--background);\n    transform: translateX(1.5rem);\n  }\n\n  .switch > .slider {\n    border-color: var(--theme-switch-off--border-color);\n  }\n\n  .switch:hover > .slider {\n    background-color: var(--theme-switch-off--background--hover);\n    border-color: var(--theme-switch-off--border-color--hover);\n  }\n\n  .switch:hover > .slider:before {\n    background-color: var(--theme-switch-thumb-off--background--hover);\n  }\n\n  .switch:active > .slider {\n    background-color: var(--theme-switch-off--background--active);\n    border-color: var(--theme-switch-off--border-color--active);\n  }\n\n  .switch:active > .slider:before {\n    background-color: var(--theme-switch-thumb-off--background--active);\n  }\n\n  .switch.checked > .slider {\n    background-color: var(--theme-switch-on--background);\n    border-color: var(--theme-switch-on--border-color);\n  }\n\n  .switch.checked:hover > .slider {\n    background-color: var(--theme-switch-on--background--hover);\n    border-color: var(--theme-switch-on--border-color--hover);\n  }\n\n  .switch.checked:hover > .slider:before {\n    background-color: var(--theme-switch-thumb-on--background--hover);\n  }\n\n  .switch.checked:active > .slider {\n    background-color: var(--theme-switch-on--background--active);\n    border-color: var(--theme-switch-on--border-color--active);\n  }\n\n  .switch.checked:active > .slider:before {\n    background-color: var(--theme-switch-thumb-on--background--active);\n  }\n\n  .switch.indeterminate > .slider::before {\n    transform: translateX(0.75rem);\n  }\n}\n\n:host(:not(.disabled)) {\n  .wrapper {\n    cursor: pointer;\n  }\n\n  .switch:focus-visible > .slider {\n    outline: 0.0625rem solid var(--theme-color-focus-bdr);\n    outline-offset: 0.0625rem;\n  }\n}\n\n:host(.disabled) {\n  pointer-events: none;\n\n  .switch {\n    opacity: 0.5;\n  }\n\n  .switch > .slider {\n    background-color: var(--theme-switch-off--background--disabled);\n  }\n\n  .switch > .slider:before {\n    background-color: var(--theme-switch-thumb-off--background--disabled);\n  }\n\n  .switch.checked > .slider {\n    background-color: var(--theme-switch-on--background--disabled);\n  }\n\n  .switch.checked > .slider:before {\n    background-color: var(--theme-switch-thumb-on--background--disabled);\n  }\n\n  .label {\n    color: var(--theme-color-weak-text);\n  }\n}\n\n@mixin toggle-variant($selector) {\n  :host(#{$selector}:not(.disabled)) {\n    .slider {\n      @content;\n    }\n  }\n}\n\n@mixin define-toggle-vars($state, $type) {\n  --theme-switch-#{$state}--background: var(\n    --theme-switch-#{$state}--background--#{$type}\n  );\n  --theme-switch-#{$state}--background--hover: var(\n    --theme-switch-#{$state}--background--#{$type}--hover\n  );\n  --theme-switch-#{$state}--background--active: var(\n    --theme-switch-#{$state}--background--#{$type}--active\n  );\n\n  --theme-switch-thumb-#{$state}--background: var(\n    --theme-switch-thumb-#{$state}--background--#{$type}\n  );\n  --theme-switch-thumb-#{$state}--background--hover: var(\n    --theme-switch-thumb-#{$state}--background--#{$type}--hover\n  );\n  --theme-switch-thumb-#{$state}--background--active: var(\n    --theme-switch-thumb-#{$state}--background--#{$type}--active\n  );\n\n  --theme-switch-#{$state}--border-color: var(\n    --theme-switch-#{$state}--border-color--#{$type}\n  );\n  --theme-switch-#{$state}--border-color--hover: var(\n    --theme-switch-#{$state}--border-color--#{$type}--hover\n  );\n  --theme-switch-#{$state}--border-color--active: var(\n    --theme-switch-#{$state}--border-color--#{$type}--active\n  );\n}\n\n@include toggle-variant($selector: '.ix-info') {\n  @include define-toggle-vars('off', 'info');\n  @include define-toggle-vars('on', 'info');\n  @include define-toggle-vars('mixed', 'info');\n}\n\n@include toggle-variant($selector: '.ix-warning') {\n  @include define-toggle-vars('off', 'warning');\n  @include define-toggle-vars('on', 'warning');\n  @include define-toggle-vars('mixed', 'warning');\n}\n\n@include toggle-variant($selector: '.ix-invalid--required') {\n  @include define-toggle-vars('off', 'invalid');\n  @include define-toggle-vars('on', 'invalid');\n  @include define-toggle-vars('mixed', 'invalid');\n}\n\n@include toggle-variant($selector: '.ix-invalid') {\n  @include define-toggle-vars('off', 'invalid');\n  @include define-toggle-vars('on', 'invalid');\n  @include define-toggle-vars('mixed', 'invalid');\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getElement } from '@stencil/core';\nimport { HTMLIxFormComponentElement, IxFormComponent } from '.';\nimport { IxComponent } from '../internal';\n\nexport type ClassMutationObserver = {\n  destroy: () => void;\n};\n\nexport async function isTouched<T>(host: IxFormComponent<T>) {\n  if (typeof host.isTouched === 'function') {\n    return host.isTouched();\n  }\n}\n\nexport async function shouldSuppressInternalValidation<T>(\n  host: IxFormComponent<T>\n) {\n  if (\n    host.getAssociatedFormElement &&\n    typeof host.getAssociatedFormElement === 'function'\n  ) {\n    const form = await host.getAssociatedFormElement();\n\n    if (!form) {\n      return false;\n    }\n\n    return form.noValidate;\n  }\n\n  return false;\n}\n\nexport function createClassMutationObserver(\n  element: HTMLElement,\n  callback: () => void,\n  options?: {\n    includeChildren?: boolean;\n  }\n): ClassMutationObserver {\n  const observer = new MutationObserver(callback);\n  observer.observe(element, {\n    subtree: options?.includeChildren,\n    childList: options?.includeChildren,\n    attributes: true,\n    attributeFilter: ['class'],\n  });\n\n  return {\n    destroy() {\n      observer.disconnect();\n    },\n  };\n}\n\nexport type ValidationResultProperty =\n  | 'isInvalid'\n  | 'isInvalidByRequired'\n  | 'isValid'\n  | 'isInfo'\n  | 'isWarning';\nexport type ValidationResults = Record<ValidationResultProperty, boolean>;\n\nfunction containsClass(\n  hostElement: HTMLIxFormComponentElement<unknown>,\n  className: string,\n  includeChildren: boolean\n) {\n  return (\n    hostElement.classList.contains(`${className}`) ||\n    (includeChildren ? !!hostElement.querySelector(`.${className}`) : false)\n  );\n}\n\nexport function checkFieldClasses(\n  hostElement: HTMLIxFormComponentElement<unknown>,\n  includeChildren = false\n): ValidationResults {\n  return {\n    isInvalid: containsClass(hostElement, 'ix-invalid', includeChildren),\n    isInvalidByRequired: containsClass(\n      hostElement,\n      'ix-invalid--required',\n      includeChildren\n    ),\n    isValid: containsClass(hostElement, 'ix-valid', includeChildren),\n    isInfo: containsClass(hostElement, 'ix-info', includeChildren),\n    isWarning: containsClass(hostElement, 'ix-warning', includeChildren),\n  };\n}\n\nexport function HookValidationLifecycle(options?: {\n  includeChildren?: boolean;\n}) {\n  return (proto: IxComponent, methodName: string) => {\n    let checkIfRequiredFunction: (() => Promise<void>) | null;\n    let classMutationObserver: ClassMutationObserver | null;\n    const { componentWillLoad, disconnectedCallback, connectedCallback } =\n      proto;\n\n    proto.connectedCallback = function () {\n      const host = getElement(\n        this\n      ) as unknown as HTMLIxFormComponentElement<unknown>;\n\n      checkIfRequiredFunction = async () => {\n        const skipValidation = await shouldSuppressInternalValidation(host);\n        if (skipValidation) {\n          return;\n        }\n\n        if (host.hasValidValue && typeof host.hasValidValue === 'function') {\n          const hasValue = await host.hasValidValue();\n          const touched = await isTouched(host);\n\n          if (host.required) {\n            host.classList.toggle('ix-invalid--required', !hasValue && touched);\n          } else {\n            host.classList.remove('ix-invalid--required');\n          }\n        }\n\n        if (\n          host.getValidityState &&\n          typeof host.getValidityState === 'function'\n        ) {\n          const validityState = await host.getValidityState();\n\n          host.classList.toggle(\n            `ix-invalid--validity-patternMismatch`,\n            validityState.patternMismatch\n          );\n        }\n      };\n\n      host.addEventListener('checkedChange', checkIfRequiredFunction);\n      host.addEventListener('valueChange', checkIfRequiredFunction);\n      host.addEventListener('ixBlur', checkIfRequiredFunction);\n      setTimeout(checkIfRequiredFunction);\n      return connectedCallback?.call(this);\n    };\n\n    proto.componentWillLoad = function () {\n      const host = getElement(\n        this\n      ) as unknown as HTMLIxFormComponentElement<unknown>;\n      classMutationObserver = createClassMutationObserver(\n        host,\n        () => {\n          const result = checkFieldClasses(host, options?.includeChildren);\n          proto[methodName].call(this, result);\n        },\n        options\n      );\n      const result = checkFieldClasses(host, options?.includeChildren);\n      proto[methodName].call(this, result);\n      return componentWillLoad?.call(this);\n    };\n\n    proto.disconnectedCallback = function () {\n      const host = getElement(this);\n\n      if (host && classMutationObserver) {\n        classMutationObserver.destroy();\n        classMutationObserver = null;\n      }\n\n      if (host && checkIfRequiredFunction) {\n        host.removeEventListener('checkedChange', checkIfRequiredFunction);\n        host.removeEventListener('valueChange', checkIfRequiredFunction);\n        host.removeEventListener('ixBlur', checkIfRequiredFunction);\n        checkIfRequiredFunction = null;\n      }\n\n      return disconnectedCallback?.call(this);\n    };\n  };\n}\n"],"names":["a11yBoolean","value","getFallbackLabelFromIconName","iconName","link","url","URL","e","protocol","isHttpUrl","startsWith","label","replace","split","map","word","trimWord","trim","digitLessWord","length","charAt","toUpperCase","slice","join","a11yHostAttributes","hostElement","ignoreAttributes","arguments","undefined","attributeObject","a11yAttributes","forEach","attr","hasAttribute","getAttribute","includes","_a","removeAttribute","Toggle","constructor","hostRef","checked","disabled","indeterminate","textOn","textOff","textIndeterminate","hideText","required","touched","onCheckedChange","newChecked","this","wasIndeterminate","oldChecked","defaultPrevented","checkedChange","emit","componentWillLoad","updateFormInternalValue","formInternals","setFormValue","watchCheckedChange","hasValidValue","Promise","resolve","getAssociatedFormElement","form","isTouched","updateClassMappings","render","toggleText","h","Host","key","class","onBlur","ixBlur","onFocus","role","switch","onClick","type","tabindex","onChange","event","target","__decorate","HookValidationLifecycle","prototype","async","shouldSuppressInternalValidation","host","noValidate","createClassMutationObserver","element","callback","options","observer","MutationObserver","observe","subtree","includeChildren","childList","attributes","attributeFilter","destroy","disconnect","containsClass","className","classList","contains","concat","querySelector","checkFieldClasses","isInvalid","isInvalidByRequired","isValid","isInfo","isWarning","proto","methodName","checkIfRequiredFunction","classMutationObserver","disconnectedCallback","connectedCallback","getElement","hasValue","toggle","remove","getValidityState","validityState","patternMismatch","addEventListener","setTimeout","call","result","removeEventListener"],"sourceRoot":""}