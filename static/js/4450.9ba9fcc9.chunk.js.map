{"version":3,"file":"static/js/4450.9ba9fcc9.chunk.js","mappings":"4JAAA,MCkBMA,EAGD,CACH,CAAEC,KAAM,KAAMC,MAVA,sCAWd,CAAED,KAAM,KAAMC,MAVA,sCAWd,CAAED,KAAM,KAAMC,MAVA,uCAqBHC,EAAO,MALpBC,WAAAA,CAAAC,I,eAaU,KAAyBC,0BAC/B,GACM,KAAYC,aAId,EAwEP,CAtECC,mBAAAA,GACEC,KAAKF,aAAeP,EAAqBU,KAAKR,IAC5C,MAAMS,EAAaC,OAAOC,WAAWX,EAAMA,OAErCY,EAAWA,KACfL,KAAKM,iBAKP,OAHAN,KAAKH,0BAA0BU,KAAKF,GACpCH,EAAWM,iBAAiB,SAAUH,GAGjCI,OAAAC,OAAAD,OAAAC,OAAA,GAAAjB,GACH,CAAAS,kBAIJF,KAAKM,e,CAGPK,oBAAAA,GACEX,KAAKF,aAAac,SAAQ,CAACC,EAAIC,KAC7BD,EAAGX,WAAWa,oBACZ,SACAf,KAAKH,0BAA0BiB,M,CAK7BE,gBAAAA,CAAiBC,GACvB,IAAKjB,KAAKkB,UACR,MAAO,GAET,MAAMC,EAAYnB,KAAKF,aAAasB,WAAWP,GAAOA,EAAGrB,OAASyB,IAC5DI,EAAerB,KAAKkB,UAAUlB,KAAKF,aAAaqB,EAAY,GAAG3B,MACrE,OAAK6B,GACIrB,KAAKgB,iBAAiBhB,KAAKF,aAAaqB,EAAY,GAAG3B,K,CAK1Dc,aAAAA,GACN,IAAKN,KAAKkB,UACR,OAEF,IAAII,EAAStB,KAAKF,aAAayB,MAAMV,GAAOA,EAAGX,WAAWsB,UAErDF,IACHA,EAAStB,KAAKF,aAAaE,KAAKF,aAAa2B,OAAS,IAGxD,MAAMC,EAAW1B,KAAKkB,UAAUI,EAAO9B,MAGrCQ,KAAK2B,gBADHD,GAGqB1B,KAAKgB,iBAAiBM,EAAO9B,K,CAIxDoC,MAAAA,GACE,MAAMC,EAAgC,CAAC,EAIvC,OAHI7B,KAAK2B,iBAAmD,IAAhC3B,KAAK2B,gBAAgBF,SAC/CI,EAAM,uBCzGN,SAA0BC,GAC9B,IAAIC,EAAiB,GAUrB,OARAD,EAAclB,SAASoB,IACrBD,GAAkB,IAClBA,EAAiBC,EAAIC,QAAO,CAACC,EAAIC,IACxB,GAAPC,OAAUF,EAAE,KAAAE,OAAID,IACfJ,GACHA,GAAkB,SAGbA,CACT,CD6FqCM,CAAgBrC,KAAK2B,mBAGpDW,EAAAA,EAAAA,GAACC,EAAAA,EAAK,CAAAC,IAAA,2CAAAX,MAAOA,IACXS,EAAAA,EAAAA,GAAa,QAAAE,IAAA,6C,WDrHF,+F","sources":["../node_modules/@siemens/ix/dist/esm/src/components/css-grid/css-grid.scss?tag=ix-css-grid&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/css-grid/css-grid.tsx","../node_modules/@siemens/ix/dist/esm/src/components/css-grid/builder.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n@import 'common-variables';\n\n:host {\n  display: grid;\n  position: relative;\n  row-gap: $large-space;\n  column-gap: $large-space;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Component, h, Host, Prop, State } from '@stencil/core';\nimport { templateBuilder } from './builder';\n\nconst smQuery = 'only screen and (max-width: 576px)';\nconst mdQuery = 'only screen and (max-width: 768px)';\nconst lgQuery = 'only screen and (max-width: 992px)';\n\nexport type CssGridTemplateType = 'sm' | 'md' | 'lg';\n\nconst mediaQueryCollection: Array<{\n  name: CssGridTemplateType;\n  query: string;\n}> = [\n  { name: 'sm', query: smQuery },\n  { name: 'md', query: mdQuery },\n  { name: 'lg', query: lgQuery },\n];\n\n/**\n * @internal\n */\n@Component({\n  tag: 'ix-css-grid',\n  styleUrl: 'css-grid.scss',\n  shadow: true,\n})\nexport class CssGrid {\n  /**\n   * Define css grid template\n   */\n  @Prop() templates?: Partial<Record<CssGridTemplateType, string[][]>>;\n\n  @State() currentTemplate?: string[][];\n\n  private disposeMediaQueryListener: ((event: MediaQueryListEvent) => void)[] =\n    [];\n  private mediaQueries: {\n    mediaQuery: MediaQueryList;\n    name: CssGridTemplateType;\n    query: string;\n  }[] = [];\n\n  componentWillRender() {\n    this.mediaQueries = mediaQueryCollection.map((query) => {\n      const mediaQuery = window.matchMedia(query.query);\n\n      const callback = () => {\n        this.applyTemplate();\n      };\n      this.disposeMediaQueryListener.push(callback);\n      mediaQuery.addEventListener('change', callback);\n\n      return {\n        ...query,\n        mediaQuery,\n      };\n    });\n\n    this.applyTemplate();\n  }\n\n  disconnectedCallback() {\n    this.mediaQueries.forEach((mq, index) => {\n      mq.mediaQuery.removeEventListener(\n        'change',\n        this.disposeMediaQueryListener[index]\n      );\n    });\n  }\n\n  private findNextTemplate(type: CssGridTemplateType): string[][] {\n    if (!this.templates) {\n      return [];\n    }\n    const typeIndex = this.mediaQueries.findIndex((mq) => mq.name === type);\n    const nextTemplate = this.templates[this.mediaQueries[typeIndex + 1].name];\n    if (!nextTemplate) {\n      return this.findNextTemplate(this.mediaQueries[typeIndex + 1].name);\n    }\n    return nextTemplate;\n  }\n\n  private applyTemplate() {\n    if (!this.templates) {\n      return;\n    }\n    let active = this.mediaQueries.find((mq) => mq.mediaQuery.matches);\n\n    if (!active) {\n      active = this.mediaQueries[this.mediaQueries.length - 1];\n    }\n\n    const template = this.templates[active.name];\n\n    if (template) {\n      this.currentTemplate = template;\n    } else {\n      this.currentTemplate = this.findNextTemplate(active.name);\n    }\n  }\n\n  render() {\n    const style: Record<string, string> = {};\n    if (this.currentTemplate && this.currentTemplate.length !== 0) {\n      style['grid-template-areas'] = templateBuilder(this.currentTemplate);\n    }\n    return (\n      <Host style={style}>\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport function templateBuilder(inputTemplate: string[][]) {\n  let templateString = '';\n\n  inputTemplate.forEach((row) => {\n    templateString += '\"';\n    templateString = row.reduce((pV, cV) => {\n      return `${pV} ${cV}`;\n    }, templateString);\n    templateString += '\"\\n';\n  });\n\n  return templateString;\n}\n"],"names":["mediaQueryCollection","name","query","CssGrid","constructor","hostRef","disposeMediaQueryListener","mediaQueries","componentWillRender","this","map","mediaQuery","window","matchMedia","callback","applyTemplate","push","addEventListener","Object","assign","disconnectedCallback","forEach","mq","index","removeEventListener","findNextTemplate","type","templates","typeIndex","findIndex","nextTemplate","active","find","matches","length","template","currentTemplate","render","style","inputTemplate","templateString","row","reduce","pV","cV","concat","templateBuilder","h","Host","key"],"sourceRoot":""}