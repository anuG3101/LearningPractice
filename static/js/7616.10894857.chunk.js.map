{"version":3,"file":"static/js/7616.10894857.chunk.js","mappings":"4JAgBgB,SAAAA,EAAUC,GAYzB,IAZ0B,YACzBC,EAAW,YACXC,EAAW,SACXC,EAAQ,UACRC,EAAS,WACTC,GAODL,EACC,OAAOC,GAAeC,GAAeC,GAAYC,GAAaC,CAChE,CAEM,SAAUC,EAAgBC,GAoB/B,IApBgC,UAC/BC,EAAS,YACTP,EAAW,UACXQ,EAAS,YACTP,EAAW,OACXQ,EAAM,SACNP,EAAQ,QACRQ,EAAO,UACPP,EAAS,WACTC,GAWDE,EACC,OAAIC,QAA6BI,IAAhBX,GAEbY,EAAAA,EAAAA,GAAA,iBAAeC,UAAU,QAAQC,MAAM,gBACrCF,EAAAA,EAAAA,GAAS,WAAAE,MAAM,oBAAoBC,KAAMC,EAAAA,EAAWC,KAAK,OAExDjB,GAKHQ,QAA6BG,IAAhBV,GAEbW,EAAAA,EAAAA,GAAA,iBAAeC,UAAU,MAAMC,MAAM,gBACnCF,EAAAA,EAAAA,GACE,WAAAE,MAAM,oBACNC,KAAMG,EAAAA,EACND,KAAK,OAENhB,GAKHQ,QAAuBE,IAAbT,GAEVU,EAAAA,EAAAA,GAAA,iBAAeC,UAAU,MAAMC,MAAM,gBACnCF,EAAAA,EAAAA,GAAS,WAAAE,MAAM,iBAAiBC,KAAMI,EAAAA,EAAUF,KAAK,OACpDf,GAKHQ,QAAyBC,IAAdR,GAEXS,EAAAA,EAAAA,GAAA,iBAAeC,UAAU,MAAMC,MAAM,gBACnCF,EAAAA,EAAAA,GAAS,WAAAE,MAAM,kBAAkBC,KAAMK,EAAAA,EAAaH,KAAK,OACxDd,GAMLC,IACEQ,EAAAA,EAAAA,GAAA,iBAAeE,MAAM,cAAcD,UAAU,QAC1CT,EAIT,C,kDC7FO,MCGMiB,EAAeC,GAC1BA,EAAQ,OAAS,QAsBNC,EAAgCC,IAC3C,IAAKA,EACH,MAAO,UAGT,GD/BwBC,KACxB,IAAKA,EACH,OAAO,EAGT,IAAIC,EAEJ,IACEA,EAAM,IAAIC,IAAIF,E,CACd,MAAOG,GACP,OAAO,C,CAGT,MAAwB,UAAjBF,EAAIG,UAAyC,WAAjBH,EAAIG,UCkBnCC,CAAUN,GACZ,MAAO,UAGT,IDnB2BE,ECmBVF,IDdE,kBAARE,GAIJA,EAAIK,WAAW,sBCWpB,MAAO,UDpBkBL,MCuB3B,MAAMM,EAAqCR,EAhCLS,QAAQ,UAAW,IACvBC,MAAM,KAErCC,KAAKC,IACJ,MAAMC,EAAWD,EAAKE,OAChBC,EAAgBF,EAASJ,QAAQ,OAAQ,IAE/C,OAA6B,IAAzBM,EAAcC,OACTH,EAGFE,KAERJ,KAAKC,GAASA,EAAKK,OAAO,GAAGC,cAAgBN,EAAKO,MAAM,KACxDC,KAAK,KAoBR,OAAqB,IAAjBZ,EAAMQ,OACD,UAGFR,GAGIa,EAAqB,SAChCC,GAEqC,IADrCC,EAAAC,UAAAR,OAAA,QAAA7B,IAAAqC,UAAA,GAAAA,UAAA,GAAwC,GAExC,MAAMC,EAA0C,CAAC,EAWjD,OAVAC,EAAeC,SAASC,I,MACtB,GAAIN,EAAYO,aAAaD,GAAO,CAEpB,OADAN,EAAYQ,aAAaF,IAChBL,EAAiBQ,SAASH,KAC/CH,EAAgBG,GAAsC,QAA9BI,EAAAV,EAAYQ,aAAaF,UAAK,IAAAI,EAAAA,EAAI,GAC1DV,EAAYW,gBAAgBL,G,KAK3BH,CACT,EAuDMC,EAAsC,CAC1C,OACA,wBACA,cACA,oBACA,oBACA,8BACA,YACA,eACA,gBACA,gBACA,oBACA,eACA,gBACA,eACA,mBACA,mBACA,eACA,gBACA,oBACA,gBACA,cACA,gBACA,cACA,eACA,oBACA,aACA,kBACA,aACA,YACA,iBACA,uBACA,mBACA,YACA,mBACA,gBACA,eACA,gBACA,gBACA,gBACA,uBACA,gBACA,gBACA,oBACA,eACA,gBACA,eACA,YACA,gBACA,gBACA,gBACA,iB,iBClKI,SAAUQ,EACdC,GAEA,IAAIC,EAEAC,EADAC,EAAiB,IAAIC,SAAYC,GAASJ,EAAUI,IAGxD,MAAMC,EAAkBC,SACVvD,IAARuD,IAGJL,EAAWI,EAA8BJ,QAAUK,EAC7B,OAAtBP,QAAsB,IAAtBA,GAAAA,EAAyBO,GAClB,OAAPN,QAAO,IAAPA,GAAAA,EAAUM,KAUZ,OAPAD,EAAeJ,QAAUA,EAEzBI,EAAeE,eAAiBC,gBACxBN,EACCD,GAGFI,CACT,C,mJCxCA,MCyBaI,EAAc,MAL3BC,WAAAA,CAAAC,I,eAyB2B,KAAShE,WAAY,EAE7B,KAAAiE,gBAAkB,IAAIC,kBAAiB,IACtDC,KAAKC,0BAIC,KAAczB,eAAmB,CAAC,EACzB,KAAQ0B,UAAGlB,EAAAA,EAAAA,IAiJ7B,CA/ICmB,iBAAAA,GACEH,KAAKI,0BACLJ,KAAKK,4B,CAGPC,oBAAAA,GACMN,KAAKF,iBACPE,KAAKF,gBAAgBS,aAEnBP,KAAKQ,sBACPR,KAAKQ,qBAAqBC,UAExBT,KAAKU,yBACPV,KAAKU,wBAAwBD,S,CAIjCE,mBAAAA,GACEX,KAAKC,uB,CAGPW,iBAAAA,GACEZ,KAAKxB,gBAAiBL,EAAAA,EAAAA,GAAmB6B,KAAK5B,Y,CAIxCgC,uBAAAA,GACgB,qBAAXS,SAIPb,KAAKF,iBACPE,KAAKF,gBAAgBS,aAGnBP,KAAKc,SACPd,KAAKF,gBAAgBiB,QAAQF,OAAOG,SAAU,CAC5CC,WAAW,EACXC,SAAS,I,CAMP,gCAAMb,GACZ,GAAsB,qBAAXQ,SAIPb,KAAKU,yBACPV,KAAKU,wBAAwBD,UAG3BT,KAAKmB,YAAY,CACnB,MAAMC,QAAcpB,KAAKmB,WAAW1B,iBAEpCO,KAAKU,yBAA0BW,EAAAA,EAAAA,GAA4BD,GAAO,IAChEpB,KAAKsB,qBAAqBF,I,EAKxBG,4BAAAA,CACNC,GAEIxB,KAAKQ,sBACPR,KAAKQ,qBAAqBC,UAG5BT,KAAKQ,sBAAuBa,EAAAA,EAAAA,GAA4BG,GAAY,IAClExB,KAAKsB,qBAAqBE,I,CAItBF,oBAAAA,CAAqBG,GAC3BzB,KAAKnE,UACH4F,EAAeC,UAAUC,SAAS,eAClCF,EAAeC,UAAUC,SAAS,a,CAG9B,2BAAM1B,GACZ,GAAID,KAAKc,QAAS,CAChB,MAAMU,EAAaR,SAASY,eAC1B5B,KAAKc,SAEHU,IACiC,mBAAxBA,EAAWK,WACpB7B,KAAK6B,SAAWL,EAAWK,UAG7B7B,KAAKuB,6BAA6BC,GAClCxB,KAAKsB,qBAAqBE,G,CAI9B,GAAIxB,KAAKmB,WAAY,CACnB,MAAMC,QAAcpB,KAAKmB,WAAW1B,iBACpCO,KAAK6B,SACHT,EACAS,Q,EAIE,kBAAMC,GACZ,GAAI9B,KAAKc,QAAS,CAChB,MAAMiB,EAASf,SAASY,eAAe5B,KAAKc,SAC5C,GAAIiB,EAAQ,CACV,IAAIX,EAA4B,KAE9BA,GCjERY,EDgEkCD,IC5DhC,6BAA8BC,GACU,oBAAjCA,EAAIC,0BACX,0BAA2BD,GACU,oBAA9BA,EAAIE,4BD0DSH,EAAOG,wBAEbH,EAEiB,oBAAhBX,EAAMe,OACff,EAAMe,O,ECvEV,IACJH,ED2EMhC,KAAKmB,mBACAnB,KAAKmB,WAAW1B,kBAAkB0C,O,CAI7CC,MAAAA,GACE,OACElG,EAAAA,EAAAA,GAACmG,EAAAA,EAAI,CAAAC,IAAA,2CAACC,QAASA,IAAMvC,KAAK8B,iBACxB5F,EAAAA,EAAAA,GAAA,QAAAsG,OAAAC,OAAA,CAAAH,IAAA,2CACExB,QAASd,KAAKc,SACVd,KAAKxB,eACT,CAAAgB,IAAKQ,KAAKE,YAEVhE,EAAAA,EAAAA,GAAA,iBAAAoG,IAAA,2CACEnG,UAAW6D,KAAKnE,UAAY,QAAU,OACtC6G,OAAO,UAEPxG,EAAAA,EAAAA,GAAa,QAAAoG,IAAA,6CACZtC,KAAK6B,WAAY3F,EAAAA,EAAAA,GAAA,QAAAoG,IAAA,mD,6JDhMR,wFGAtB,MCmBaK,EAAY,MALzB/C,WAAAA,CAAAC,I,eAyCU,KAAShE,WAAY,EAKrB,KAAOG,SAAY,EAKnB,KAAMD,QAAY,EAKlB,KAASD,WAAY,EAKrB,KAAiB8G,mBAAY,EAK7B,KAAQf,UAAY,EAeX,KAAOgB,SAAG7D,EAAAA,EAAAA,IAuD5B,CArDCoD,MAAAA,GACE,MAAMU,EAAc,CAClBxH,YAAa0E,KAAK1E,YAClBO,UAAWmE,KAAKnE,UAChBG,QAASgE,KAAKhE,QACdP,UAAWuE,KAAKvE,UAChBK,UAAWkE,KAAKlE,UAChBP,YAAayE,KAAKzE,YAClBQ,OAAQiE,KAAKjE,OACbP,SAAUwE,KAAKxE,SACfE,WAAYsE,KAAKtE,YAEnB,OACEQ,EAAAA,EAAAA,GAACmG,EAAAA,EAAI,CAAAC,IAAA,4CACFtC,KAAK1C,QACJpB,EAAAA,EAAAA,GAAK,OAAAoG,IAAA,2CAAAlG,MAAM,cACTF,EAAAA,EAAAA,GAAA,kBAAAoG,IAAA,2CACET,SAAU7B,KAAK6B,SACff,QAASd,KAAK+C,aACd5B,WAAYnB,KAAKmB,WACjBtF,UAAWmE,KAAKnE,WAEfmE,KAAK1C,SAIZpB,EAAAA,EAAAA,GAAA,OAAAoG,IAAA,2CACElG,MAAO,CACL,gBAAgB,GAElBoD,IAAKQ,KAAK6C,UAEV3G,EAAAA,EAAAA,GAAA,QAAAoG,IAAA,+CAEFpG,EAAAA,EAAAA,GAAK,OAAAoG,IAAA,2CAAAlG,MAAO,iBACR4D,KAAK4C,oBAAqBjH,EAAAA,EAAAA,GAAiBmH,IAC7C5G,EAAAA,EAAAA,GAAK,OAAAoG,IAAA,2CAAAlG,MAAM,iBACTF,EAAAA,EAAAA,GAAA,QAAAoG,IAAA,2CAAMjG,KAAK,oBAIa,IAA3B2D,KAAK4C,oBAA8BxH,EAAAA,EAAAA,GAAW0H,KAC7C5G,EAAAA,EAAAA,GACE,cAAAoG,IAAA,2CAAAU,IAAKhD,KAAK6C,QAAQpD,iBAClBwD,UAAW,IACXC,UAAU,WAETvH,EAAAA,EAAAA,GAAiBmH,I,iDDhJN,45B,wEEsBjBpD,eAAeyD,EACpBC,GAEA,GACEA,EAAKnB,0BACoC,oBAAlCmB,EAAKnB,yBACZ,CACA,MAAMoB,QAAaD,EAAKnB,2BAExB,QAAKoB,GAIEA,EAAKC,U,CAGd,OAAO,CACT,C,SAEgBjC,EACdkC,EACAC,EACAC,GAIA,MAAMC,EAAW,IAAI3D,iBAAiByD,GAQtC,OAPAE,EAAS3C,QAAQwC,EAAS,CACxBrC,QAAgB,OAAPuC,QAAA,IAAAA,OAAA,EAAAA,EAASE,gBAClB1C,UAAkB,OAAPwC,QAAA,IAAAA,OAAA,EAAAA,EAASE,gBACpBC,YAAY,EACZC,gBAAiB,CAAC,WAGb,CACLpD,OAAAA,GACEiD,EAASnD,Y,EAGf,CAUA,SAASuD,EACP1F,EACA2F,EACAJ,GAEA,OACEvF,EAAYsD,UAAUC,SAAS,GAADqC,OAAID,OACjCJ,KAAoBvF,EAAY6F,cAAc,IAADD,OAAKD,GAEvD,C,SAEgBG,EACd9F,GACuB,IAAvBuF,EAAerF,UAAAR,OAAA,QAAA7B,IAAAqC,UAAA,IAAAA,UAAA,GAEf,MAAO,CACLzC,UAAWiI,EAAc1F,EAAa,aAAcuF,GACpDQ,oBAAqBL,EACnB1F,EACA,uBACAuF,GAEF3H,QAAS8H,EAAc1F,EAAa,WAAYuF,GAChD5H,OAAQ+H,EAAc1F,EAAa,UAAWuF,GAC9C7H,UAAWgI,EAAc1F,EAAa,aAAcuF,GAExD,CAEM,SAAUS,EAAwBX,GAGtC,MAAO,CAACY,EAAoBC,KAC1B,IAAIC,EACAC,EACJ,MAAM,kBAAE5D,EAAiB,qBAAEN,EAAoB,kBAAEH,GAC/CkE,EAEFA,EAAMlE,kBAAoB,WACxB,MAAMiD,GAAOqB,EAAAA,EAAAA,GACXzE,MAqCF,OAlCAuE,EAA0B7E,UAExB,UAD6ByD,EAAiCC,GAC9D,CAIA,GAAIA,EAAKsB,eAA+C,oBAAvBtB,EAAKsB,cAA8B,CAClE,MAAMC,QAAiBvB,EAAKsB,gBACtBE,QAzGTlF,eAA4B0D,GACjC,GAA8B,oBAAnBA,EAAKyB,UACd,OAAOzB,EAAKyB,WAEhB,CAqGgCA,CAAUzB,GAE5BA,EAAKvB,SACPuB,EAAK1B,UAAUoD,OAAO,wBAAyBH,GAAYC,GAE3DxB,EAAK1B,UAAUqD,OAAO,uB,CAI1B,GACE3B,EAAK4B,kBAC4B,oBAA1B5B,EAAK4B,iBACZ,CACA,MAAMC,QAAsB7B,EAAK4B,mBAEjC5B,EAAK1B,UAAUoD,OAAO,uCAEpBG,EAAcC,gB,IAKpB9B,EAAK+B,iBAAiB,gBAAiBZ,GACvCnB,EAAK+B,iBAAiB,cAAeZ,GACrCnB,EAAK+B,iBAAiB,SAAUZ,GAChCa,WAAWb,GACJ,OAAApE,QAAA,IAAAA,OAAA,EAAAA,EAAmBkF,KAAKrF,KACjC,EAEAqE,EAAMzD,kBAAoB,WACxB,MAAMwC,GAAOqB,EAAAA,EAAAA,GACXzE,MAEFwE,EAAwBnD,EACtB+B,GACA,KACE,MAAMkC,EAASpB,EAAkBd,EAAM,OAAAK,QAAA,IAAAA,OAAA,EAAAA,EAASE,iBAChDU,EAAMC,GAAYe,KAAKrF,KAAMsF,KAE/B7B,GAEF,MAAM6B,EAASpB,EAAkBd,EAAM,OAAAK,QAAA,IAAAA,OAAA,EAAAA,EAASE,iBAEhD,OADAU,EAAMC,GAAYe,KAAKrF,KAAMsF,GACtB,OAAA1E,QAAA,IAAAA,OAAA,EAAAA,EAAmByE,KAAKrF,KACjC,EAEAqE,EAAM/D,qBAAuB,WAC3B,MAAM8C,GAAOqB,EAAAA,EAAAA,GAAWzE,MAcxB,OAZIoD,GAAQoB,IACVA,EAAsB/D,UACtB+D,EAAwB,MAGtBpB,GAAQmB,IACVnB,EAAKmC,oBAAoB,gBAAiBhB,GAC1CnB,EAAKmC,oBAAoB,cAAehB,GACxCnB,EAAKmC,oBAAoB,SAAUhB,GACnCA,EAA0B,MAGrB,OAAAjE,QAAA,IAAAA,OAAA,EAAAA,EAAsB+E,KAAKrF,KACpC,EAEJ,C","sources":["../node_modules/@siemens/ix/dist/esm/src/components/field-wrapper/helper-text-util.tsx","../node_modules/@siemens/ix/dist/esm/src/components/utils/condition-checks.ts","../node_modules/@siemens/ix/dist/esm/src/components/utils/a11y.ts","../node_modules/@siemens/ix/dist/esm/src/components/utils/make-ref.ts","../node_modules/@siemens/ix/dist/esm/src/components/field-label/field-label.scss?tag=ix-field-label&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/field-label/field-label.tsx","../node_modules/@siemens/ix/dist/esm/src/components/utils/input/index.ts","../node_modules/@siemens/ix/dist/esm/src/components/field-wrapper/field-wrapper.scss?tag=ix-field-wrapper&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/field-wrapper/field-wrapper.tsx","../node_modules/@siemens/ix/dist/esm/src/components/utils/input/validation.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { h } from '@stencil/core';\nimport {\n  iconError,\n  iconInfo,\n  iconSuccess,\n  iconWarning,\n} from '@siemens/ix-icons/icons';\n\nexport function hasAnyText({\n  invalidText,\n  warningText,\n  infoText,\n  validText,\n  helperText,\n}: {\n  invalidText?: string;\n  warningText?: string;\n  infoText?: string;\n  validText?: string;\n  helperText?: string;\n}) {\n  return invalidText || warningText || infoText || validText || helperText;\n}\n\nexport function renderHelperText({\n  isInvalid,\n  invalidText,\n  isWarning,\n  warningText,\n  isInfo,\n  infoText,\n  isValid,\n  validText,\n  helperText,\n}: {\n  isInvalid: boolean;\n  invalidText?: string;\n  isWarning: boolean;\n  warningText?: string;\n  isInfo: boolean;\n  infoText?: string;\n  isValid: boolean;\n  validText?: string;\n  helperText?: string;\n}) {\n  if (isInvalid && invalidText !== undefined) {\n    return (\n      <ix-typography textColor=\"alarm\" class=\"bottom-text\">\n        <ix-icon class=\"text-icon invalid\" name={iconError} size=\"16\"></ix-icon>\n\n        {invalidText}\n      </ix-typography>\n    );\n  }\n\n  if (isWarning && warningText !== undefined) {\n    return (\n      <ix-typography textColor=\"std\" class=\"bottom-text\">\n        <ix-icon\n          class=\"text-icon warning\"\n          name={iconWarning}\n          size=\"16\"\n        ></ix-icon>\n        {warningText}\n      </ix-typography>\n    );\n  }\n\n  if (isInfo && infoText !== undefined) {\n    return (\n      <ix-typography textColor=\"std\" class=\"bottom-text\">\n        <ix-icon class=\"text-icon info\" name={iconInfo} size=\"16\"></ix-icon>\n        {infoText}\n      </ix-typography>\n    );\n  }\n\n  if (isValid && validText !== undefined) {\n    return (\n      <ix-typography textColor=\"std\" class=\"bottom-text\">\n        <ix-icon class=\"text-icon valid\" name={iconSuccess} size=\"16\"></ix-icon>\n        {validText}\n      </ix-typography>\n    );\n  }\n\n  return (\n    helperText && (\n      <ix-typography class=\"bottom-text\" textColor=\"soft\">\n        {helperText}\n      </ix-typography>\n    )\n  );\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport const isHttpUrl = (link: string) => {\n  if (!link) {\n    return false;\n  }\n\n  let url: URL;\n\n  try {\n    url = new URL(link);\n  } catch (e) {\n    return false;\n  }\n\n  return url.protocol === 'http:' || url.protocol === 'https:';\n};\n\nexport const isSvgDataUrl = (url: string) => {\n  if (!url) {\n    return false;\n  }\n\n  if (typeof url !== 'string') {\n    return false;\n  }\n\n  return url.startsWith('data:image/svg+xml');\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { isHttpUrl, isSvgDataUrl } from './condition-checks';\n\nexport const a11yBoolean = (value: boolean | undefined) =>\n  value ? 'true' : 'false';\n\nconst kebabCaseToUpperCaseSentence = (kebabCase: string) => {\n  const withoutFilledSuffix = kebabCase.replace('-filled', '');\n  const words = withoutFilledSuffix.split('-');\n  const sentence = words\n    .map((word) => {\n      const trimWord = word.trim();\n      const digitLessWord = trimWord.replace(/\\d+/g, '');\n\n      if (digitLessWord.length === 0) {\n        return trimWord;\n      }\n\n      return digitLessWord;\n    })\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n\n  return sentence;\n};\n\nexport const getFallbackLabelFromIconName = (iconName?: string) => {\n  if (!iconName) {\n    return 'Unknown';\n  }\n\n  if (isHttpUrl(iconName)) {\n    return 'Unknown';\n  }\n\n  if (isSvgDataUrl(iconName)) {\n    return 'Unknown';\n  }\n\n  const label = kebabCaseToUpperCaseSentence(iconName);\n\n  if (label.length === 0) {\n    return 'Unknown';\n  }\n\n  return label;\n};\n\nexport const a11yHostAttributes = (\n  hostElement: HTMLElement,\n  ignoreAttributes: A11yAttributeName[] = []\n): Record<A11yAttributeName, string> => {\n  const attributeObject: Record<string, string> = {};\n  a11yAttributes.forEach((attr) => {\n    if (hostElement.hasAttribute(attr)) {\n      const value = hostElement.getAttribute(attr);\n      if (value !== null && !ignoreAttributes.includes(attr)) {\n        attributeObject[attr] = hostElement.getAttribute(attr) ?? '';\n        hostElement.removeAttribute(attr);\n      }\n    }\n  });\n\n  return attributeObject;\n};\n\nexport type A11yAttributeName =\n  | 'role'\n  | 'aria-activedescendant'\n  | 'aria-atomic'\n  | 'aria-autocomplete'\n  | 'aria-braillelabel'\n  | 'aria-brailleroledescription'\n  | 'aria-busy'\n  | 'aria-checked'\n  | 'aria-colcount'\n  | 'aria-colindex'\n  | 'aria-colindextext'\n  | 'aria-colspan'\n  | 'aria-controls'\n  | 'aria-current'\n  | 'aria-describedby'\n  | 'aria-description'\n  | 'aria-details'\n  | 'aria-disabled'\n  | 'aria-errormessage'\n  | 'aria-expanded'\n  | 'aria-flowto'\n  | 'aria-haspopup'\n  | 'aria-hidden'\n  | 'aria-invalid'\n  | 'aria-keyshortcuts'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-level'\n  | 'aria-live'\n  | 'aria-multiline'\n  | 'aria-multiselectable'\n  | 'aria-orientation'\n  | 'aria-owns'\n  | 'aria-placeholder'\n  | 'aria-posinset'\n  | 'aria-pressed'\n  | 'aria-readonly'\n  | 'aria-relevant'\n  | 'aria-required'\n  | 'aria-roledescription'\n  | 'aria-rowcount'\n  | 'aria-rowindex'\n  | 'aria-rowindextext'\n  | 'aria-rowspan'\n  | 'aria-selected'\n  | 'aria-setsize'\n  | 'aria-sort'\n  | 'aria-valuemax'\n  | 'aria-valuemin'\n  | 'aria-valuenow'\n  | 'aria-valuetext';\n\nconst a11yAttributes: A11yAttributeName[] = [\n  'role',\n  'aria-activedescendant',\n  'aria-atomic',\n  'aria-autocomplete',\n  'aria-braillelabel',\n  'aria-brailleroledescription',\n  'aria-busy',\n  'aria-checked',\n  'aria-colcount',\n  'aria-colindex',\n  'aria-colindextext',\n  'aria-colspan',\n  'aria-controls',\n  'aria-current',\n  'aria-describedby',\n  'aria-description',\n  'aria-details',\n  'aria-disabled',\n  'aria-errormessage',\n  'aria-expanded',\n  'aria-flowto',\n  'aria-haspopup',\n  'aria-hidden',\n  'aria-invalid',\n  'aria-keyshortcuts',\n  'aria-label',\n  'aria-labelledby',\n  'aria-level',\n  'aria-live',\n  'aria-multiline',\n  'aria-multiselectable',\n  'aria-orientation',\n  'aria-owns',\n  'aria-placeholder',\n  'aria-posinset',\n  'aria-pressed',\n  'aria-readonly',\n  'aria-relevant',\n  'aria-required',\n  'aria-roledescription',\n  'aria-rowcount',\n  'aria-rowindex',\n  'aria-rowindextext',\n  'aria-rowspan',\n  'aria-selected',\n  'aria-setsize',\n  'aria-sort',\n  'aria-valuemax',\n  'aria-valuemin',\n  'aria-valuenow',\n  'aria-valuetext',\n];\n\ntype PartialRecord<K extends A11yAttributeName, T> = {\n  [P in K]?: T;\n};\nexport type A11yAttributes = PartialRecord<A11yAttributeName, string>;\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport type MakeRef<T> = {\n  (ref: T | undefined | null): void;\n  current: T | null;\n  waitForCurrent(): Promise<T>;\n};\n\ntype Resolve<T> = (value: T) => void;\n\nexport function makeRef<T>(\n  currentChangedCallback?: (element: T) => void\n): MakeRef<T> {\n  let resolve: Resolve<T> | undefined = undefined;\n  let currentPromise = new Promise<T>((res) => (resolve = res));\n  let current: T | undefined = undefined;\n\n  const setRefFunction = (ref: T | undefined) => {\n    if (ref === undefined) {\n      return;\n    }\n    current = (setRefFunction as MakeRef<T>).current = ref;\n    currentChangedCallback?.(ref);\n    resolve?.(ref);\n  };\n\n  setRefFunction.current = current as T | null;\n\n  setRefFunction.waitForCurrent = async () => {\n    await currentPromise;\n    return current;\n  };\n\n  return setRefFunction as MakeRef<T>;\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n:host {\n  display: inline-block;\n  position: relative;\n\n  margin-top: 0.5rem;\n  margin-bottom: 0.25rem;\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Component, Element, h, Host, Prop, Watch } from '@stencil/core';\nimport { A11yAttributes, a11yHostAttributes } from '../utils/a11y';\nimport {\n  ClassMutationObserver,\n  createClassMutationObserver,\n  HTMLIxFormComponentElement,\n  isIxInputFieldComponent,\n} from '../utils/input';\nimport { IxComponent } from '../utils/internal';\nimport { MakeRef, makeRef } from '../utils/make-ref';\n\n@Component({\n  tag: 'ix-field-label',\n  styleUrl: 'field-label.scss',\n  shadow: true,\n})\nexport class FormFieldLabel implements IxComponent {\n  @Element() hostElement!: HTMLIxFieldLabelElement;\n\n  /**\n   * A value is required or must be checked for the form to be submittable\n   */\n  @Prop({ reflect: true, mutable: true }) required?: boolean;\n\n  /**\n   * The id of the form element that the label is associated with\n   */\n  @Prop({ reflect: true }) htmlFor?: string;\n\n  /** @internal */\n  @Prop() controlRef?:\n    | MakeRef<HTMLElement>\n    | MakeRef<HTMLInputElement>\n    | MakeRef<HTMLTextAreaElement>;\n\n  /** @internal */\n  @Prop({ mutable: true }) isInvalid: boolean = false;\n\n  private readonly htmlForObserver = new MutationObserver(() =>\n    this.checkForInternalState()\n  );\n  private htmlForClassObserver?: ClassMutationObserver;\n  private controlRefClassObserver?: ClassMutationObserver;\n  private a11yAttributes: A11yAttributes = {};\n  private readonly labelRef = makeRef<HTMLLabelElement>();\n\n  connectedCallback() {\n    this.registerHtmlForObserver();\n    this.registerControlRefObserver();\n  }\n\n  disconnectedCallback(): void {\n    if (this.htmlForObserver) {\n      this.htmlForObserver.disconnect();\n    }\n    if (this.htmlForClassObserver) {\n      this.htmlForClassObserver.destroy();\n    }\n    if (this.controlRefClassObserver) {\n      this.controlRefClassObserver.destroy();\n    }\n  }\n\n  componentWillRender() {\n    this.checkForInternalState();\n  }\n\n  componentWillLoad(): void | Promise<void> {\n    this.a11yAttributes = a11yHostAttributes(this.hostElement);\n  }\n\n  @Watch('htmlFor')\n  private registerHtmlForObserver() {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    if (this.htmlForObserver) {\n      this.htmlForObserver.disconnect();\n    }\n\n    if (this.htmlFor) {\n      this.htmlForObserver.observe(window.document, {\n        childList: true,\n        subtree: true,\n      });\n    }\n  }\n\n  @Watch('controlRef')\n  private async registerControlRefObserver() {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    if (this.controlRefClassObserver) {\n      this.controlRefClassObserver.destroy();\n    }\n\n    if (this.controlRef) {\n      const input = await this.controlRef.waitForCurrent();\n\n      this.controlRefClassObserver = createClassMutationObserver(input, () =>\n        this.checkForInvalidState(input)\n      );\n    }\n  }\n\n  private registerHtmlForClassObserver(\n    forElement: HTMLIxFormComponentElement<unknown>\n  ) {\n    if (this.htmlForClassObserver) {\n      this.htmlForClassObserver.destroy();\n    }\n\n    this.htmlForClassObserver = createClassMutationObserver(forElement, () =>\n      this.checkForInvalidState(forElement)\n    );\n  }\n\n  private checkForInvalidState(elementToCheck: HTMLElement) {\n    this.isInvalid =\n      elementToCheck.classList.contains('is-invalid') ||\n      elementToCheck.classList.contains('ix-invalid');\n  }\n\n  private async checkForInternalState() {\n    if (this.htmlFor) {\n      const forElement = document.getElementById(\n        this.htmlFor\n      ) as HTMLIxFormComponentElement<unknown>;\n      if (forElement) {\n        if (typeof forElement.required === 'boolean') {\n          this.required = forElement.required;\n        }\n\n        this.registerHtmlForClassObserver(forElement);\n        this.checkForInvalidState(forElement);\n      }\n    }\n\n    if (this.controlRef) {\n      const input = await this.controlRef.waitForCurrent();\n      this.required = (\n        input as HTMLInputElement | HTMLTextAreaElement\n      ).required;\n    }\n  }\n\n  private async focusOnClick() {\n    if (this.htmlFor) {\n      const target = document.getElementById(this.htmlFor);\n      if (target) {\n        let input: HTMLElement | null = null;\n        if (isIxInputFieldComponent(target)) {\n          input = await target.getNativeInputElement();\n        } else {\n          input = target;\n        }\n        if (typeof input.focus === 'function') {\n          input.focus();\n        }\n      }\n    }\n\n    if (this.controlRef) {\n      (await this.controlRef.waitForCurrent()).focus();\n    }\n  }\n\n  render() {\n    return (\n      <Host onClick={() => this.focusOnClick()}>\n        <label\n          htmlFor={this.htmlFor}\n          {...this.a11yAttributes}\n          ref={this.labelRef}\n        >\n          <ix-typography\n            textColor={this.isInvalid ? 'alarm' : 'soft'}\n            format=\"label\"\n          >\n            <slot></slot>\n            {this.required && <span>*</span>}\n          </ix-typography>\n        </label>\n      </Host>\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { EventEmitter } from '@stencil/core';\nimport { IxComponent } from '../internal';\n\nexport * from './validation';\n\nexport interface FieldWrapperInterface {\n  /**\n   * Label for the field component\n   */\n  label?: string;\n  /**\n   * Show text below the field component which show additional information\n   */\n  helperText?: string;\n  /**\n   * Info text for the field component\n   */\n  infoText?: string;\n  /**\n   * Warning text for the field component\n   */\n  warningText?: string;\n  /**\n   * Error text for the field component\n   */\n  invalidText?: string;\n  /**\n   * Valid text for the field component\n   */\n  validText?: string;\n  /**\n   * Show helper, info, warning, error and valid text as tooltip\n   */\n  showTextAsTooltip?: boolean;\n}\n\nexport type HTMLIxFormComponentElement<T> = HTMLElement & IxFormComponent<T>;\nexport type HTMLIxInputFieldComponentElement<T> =\n  HTMLIxFormComponentElement<T> & IxInputFieldComponent<T>;\n\nexport interface IxFormValidationState {\n  // Annotate as @State()\n  isInvalid: boolean;\n  // Annotate as @State()\n  isValid: boolean;\n  // Annotate as @State()\n  isInfo: boolean;\n  // Annotate as @State()\n  isWarning: boolean;\n}\n\nexport interface IxFormComponent<T = string> extends IxComponent {\n  // Private internal\n  formInternals: ElementInternals;\n\n  // Annotate as @Prop({ reflect: true })\n  required?: boolean;\n  // Annotate as @Prop({ reflect: true })\n  name?: string;\n  // Annotate as @Prop()\n  value?: T;\n  // Annotate as @Prop()\n  disabled: boolean;\n\n  valueChange: EventEmitter<T>;\n  ixBlur: EventEmitter<void>;\n\n  updateFormInternalValue(value: T): void | Promise<void>;\n  hasValidValue(): Promise<boolean>;\n  getValidityState?(): Promise<ValidityState>;\n  getAssociatedFormElement(): Promise<HTMLFormElement | null>;\n  isTouched?(): Promise<boolean>;\n}\n\nexport interface IxInputFieldComponent<T = string>\n  extends IxFormComponent<T>,\n    IxFormValidationState,\n    FieldWrapperInterface {\n  // Annotate as @Prop()\n  placeholder?: string;\n  // Annotate as @Prop()\n  readonly: boolean;\n\n  // Annotate as @Method()\n  getNativeInputElement(): Promise<HTMLInputElement | HTMLTextAreaElement>;\n\n  // Annotate as @Method()\n  focusInput(): Promise<void>;\n}\n\nexport function isIxInputFieldComponent<T>(\n  obj: HTMLElement | IxFormComponent<T>\n): obj is HTMLIxInputFieldComponentElement<T> {\n  return (\n    obj &&\n    'getAssociatedFormElement' in obj &&\n    typeof obj.getAssociatedFormElement === 'function' &&\n    'getNativeInputElement' in obj &&\n    typeof obj.getNativeInputElement === 'function'\n  );\n}\n","@import \"./field-wrapper.mixins.scss\";\n\n:host {\n  display: flex;\n  position: relative;\n  flex-direction: column;\n\n  .slot-wrapper {\n    display: flex;\n    position: relative;\n    align-items: center;\n    justify-content: flex-start;\n    gap: 0.25rem;\n  }\n\n  .field-bottom,\n  .field-top {\n    display: flex;\n    flex-direction: row;\n    position: relative;\n    justify-content: space-between;\n    gap: 1rem;\n    width: min-content;\n    min-width: 100%;\n  }\n\n  .field-bottom .bottom-right {\n    margin-left: auto;\n    margin-right: 0px;\n  }\n\n  @include helper-text;\n\n  .bottom-text {\n    margin-top: 0.25rem;\n    margin-bottom: 0.25rem;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { Component, Element, Host, Prop, h } from '@stencil/core';\nimport { FieldWrapperInterface } from '../utils/input';\nimport { MakeRef, makeRef } from '../utils/make-ref';\nimport { hasAnyText, renderHelperText } from './helper-text-util';\n\n/** @internal */\n@Component({\n  tag: 'ix-field-wrapper',\n  styleUrl: 'field-wrapper.scss',\n  shadow: true,\n})\nexport class FieldWrapper implements FieldWrapperInterface {\n  @Element() hostElement!: HTMLIxFieldWrapperElement;\n\n  /**\n   * Show text below the field component\n   */\n  @Prop() helperText?: string;\n\n  /**\n   * Label for the field component\n   */\n  @Prop() label?: string;\n\n  /**\n   * Error text for the field component\n   */\n  @Prop() invalidText?: string;\n\n  /**\n   * Valid text for the field component\n   */\n  @Prop() validText?: string;\n\n  /**\n   * Info text for the field component\n   */\n  @Prop() infoText?: string;\n\n  /**\n   * Warning text for the field component\n   */\n  @Prop() warningText?: string;\n\n  /**\n   * Is the field component invalid\n   */\n  @Prop() isInvalid: boolean = false;\n\n  /**\n   * Is the field component valid\n   */\n  @Prop() isValid: boolean = false;\n\n  /**\n   * Is the field component info\n   */\n  @Prop() isInfo: boolean = false;\n\n  /**\n   * Is the field component warning\n   */\n  @Prop() isWarning: boolean = false;\n\n  /**\n   * Show helper, error, info, warning text as tooltip\n   */\n  @Prop() showTextAsTooltip: boolean = false;\n\n  /**\n   * Show label as required\n   */\n  @Prop() required: boolean = false;\n\n  /**\n   * The id of the form element that the label is associated with\n   */\n  @Prop() htmlForLabel?: string;\n\n  /**\n   * The control element that the label is associated with\n   */\n  @Prop() controlRef?:\n    | MakeRef<HTMLElement>\n    | MakeRef<HTMLInputElement>\n    | MakeRef<HTMLTextAreaElement>;\n\n  private readonly slotRef = makeRef<HTMLDivElement>();\n\n  render() {\n    const textOptions = {\n      invalidText: this.invalidText,\n      isInvalid: this.isInvalid,\n      isValid: this.isValid,\n      validText: this.validText,\n      isWarning: this.isWarning,\n      warningText: this.warningText,\n      isInfo: this.isInfo,\n      infoText: this.infoText,\n      helperText: this.helperText,\n    };\n    return (\n      <Host>\n        {this.label && (\n          <div class=\"field-top\">\n            <ix-field-label\n              required={this.required}\n              htmlFor={this.htmlForLabel}\n              controlRef={this.controlRef}\n              isInvalid={this.isInvalid}\n            >\n              {this.label}\n            </ix-field-label>\n          </div>\n        )}\n        <div\n          class={{\n            'slot-wrapper': true,\n          }}\n          ref={this.slotRef}\n        >\n          <slot></slot>\n        </div>\n        <div class={'field-bottom'}>\n          {!this.showTextAsTooltip && renderHelperText(textOptions)}\n          <div class=\"bottom-right\">\n            <slot name=\"bottom-right\"></slot>\n          </div>\n        </div>\n\n        {this.showTextAsTooltip === true && hasAnyText(textOptions) && (\n          <ix-tooltip\n            for={this.slotRef.waitForCurrent()}\n            showDelay={500}\n            placement=\"bottom\"\n          >\n            {renderHelperText(textOptions)}\n          </ix-tooltip>\n        )}\n      </Host>\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getElement } from '@stencil/core';\nimport { HTMLIxFormComponentElement, IxFormComponent } from '.';\nimport { IxComponent } from '../internal';\n\nexport type ClassMutationObserver = {\n  destroy: () => void;\n};\n\nexport async function isTouched<T>(host: IxFormComponent<T>) {\n  if (typeof host.isTouched === 'function') {\n    return host.isTouched();\n  }\n}\n\nexport async function shouldSuppressInternalValidation<T>(\n  host: IxFormComponent<T>\n) {\n  if (\n    host.getAssociatedFormElement &&\n    typeof host.getAssociatedFormElement === 'function'\n  ) {\n    const form = await host.getAssociatedFormElement();\n\n    if (!form) {\n      return false;\n    }\n\n    return form.noValidate;\n  }\n\n  return false;\n}\n\nexport function createClassMutationObserver(\n  element: HTMLElement,\n  callback: () => void,\n  options?: {\n    includeChildren?: boolean;\n  }\n): ClassMutationObserver {\n  const observer = new MutationObserver(callback);\n  observer.observe(element, {\n    subtree: options?.includeChildren,\n    childList: options?.includeChildren,\n    attributes: true,\n    attributeFilter: ['class'],\n  });\n\n  return {\n    destroy() {\n      observer.disconnect();\n    },\n  };\n}\n\nexport type ValidationResultProperty =\n  | 'isInvalid'\n  | 'isInvalidByRequired'\n  | 'isValid'\n  | 'isInfo'\n  | 'isWarning';\nexport type ValidationResults = Record<ValidationResultProperty, boolean>;\n\nfunction containsClass(\n  hostElement: HTMLIxFormComponentElement<unknown>,\n  className: string,\n  includeChildren: boolean\n) {\n  return (\n    hostElement.classList.contains(`${className}`) ||\n    (includeChildren ? !!hostElement.querySelector(`.${className}`) : false)\n  );\n}\n\nexport function checkFieldClasses(\n  hostElement: HTMLIxFormComponentElement<unknown>,\n  includeChildren = false\n): ValidationResults {\n  return {\n    isInvalid: containsClass(hostElement, 'ix-invalid', includeChildren),\n    isInvalidByRequired: containsClass(\n      hostElement,\n      'ix-invalid--required',\n      includeChildren\n    ),\n    isValid: containsClass(hostElement, 'ix-valid', includeChildren),\n    isInfo: containsClass(hostElement, 'ix-info', includeChildren),\n    isWarning: containsClass(hostElement, 'ix-warning', includeChildren),\n  };\n}\n\nexport function HookValidationLifecycle(options?: {\n  includeChildren?: boolean;\n}) {\n  return (proto: IxComponent, methodName: string) => {\n    let checkIfRequiredFunction: (() => Promise<void>) | null;\n    let classMutationObserver: ClassMutationObserver | null;\n    const { componentWillLoad, disconnectedCallback, connectedCallback } =\n      proto;\n\n    proto.connectedCallback = function () {\n      const host = getElement(\n        this\n      ) as unknown as HTMLIxFormComponentElement<unknown>;\n\n      checkIfRequiredFunction = async () => {\n        const skipValidation = await shouldSuppressInternalValidation(host);\n        if (skipValidation) {\n          return;\n        }\n\n        if (host.hasValidValue && typeof host.hasValidValue === 'function') {\n          const hasValue = await host.hasValidValue();\n          const touched = await isTouched(host);\n\n          if (host.required) {\n            host.classList.toggle('ix-invalid--required', !hasValue && touched);\n          } else {\n            host.classList.remove('ix-invalid--required');\n          }\n        }\n\n        if (\n          host.getValidityState &&\n          typeof host.getValidityState === 'function'\n        ) {\n          const validityState = await host.getValidityState();\n\n          host.classList.toggle(\n            `ix-invalid--validity-patternMismatch`,\n            validityState.patternMismatch\n          );\n        }\n      };\n\n      host.addEventListener('checkedChange', checkIfRequiredFunction);\n      host.addEventListener('valueChange', checkIfRequiredFunction);\n      host.addEventListener('ixBlur', checkIfRequiredFunction);\n      setTimeout(checkIfRequiredFunction);\n      return connectedCallback?.call(this);\n    };\n\n    proto.componentWillLoad = function () {\n      const host = getElement(\n        this\n      ) as unknown as HTMLIxFormComponentElement<unknown>;\n      classMutationObserver = createClassMutationObserver(\n        host,\n        () => {\n          const result = checkFieldClasses(host, options?.includeChildren);\n          proto[methodName].call(this, result);\n        },\n        options\n      );\n      const result = checkFieldClasses(host, options?.includeChildren);\n      proto[methodName].call(this, result);\n      return componentWillLoad?.call(this);\n    };\n\n    proto.disconnectedCallback = function () {\n      const host = getElement(this);\n\n      if (host && classMutationObserver) {\n        classMutationObserver.destroy();\n        classMutationObserver = null;\n      }\n\n      if (host && checkIfRequiredFunction) {\n        host.removeEventListener('checkedChange', checkIfRequiredFunction);\n        host.removeEventListener('valueChange', checkIfRequiredFunction);\n        host.removeEventListener('ixBlur', checkIfRequiredFunction);\n        checkIfRequiredFunction = null;\n      }\n\n      return disconnectedCallback?.call(this);\n    };\n  };\n}\n"],"names":["hasAnyText","_ref","invalidText","warningText","infoText","validText","helperText","renderHelperText","_ref2","isInvalid","isWarning","isInfo","isValid","undefined","h","textColor","class","name","iconError","size","iconWarning","iconInfo","iconSuccess","a11yBoolean","value","getFallbackLabelFromIconName","iconName","link","url","URL","e","protocol","isHttpUrl","startsWith","label","replace","split","map","word","trimWord","trim","digitLessWord","length","charAt","toUpperCase","slice","join","a11yHostAttributes","hostElement","ignoreAttributes","arguments","attributeObject","a11yAttributes","forEach","attr","hasAttribute","getAttribute","includes","_a","removeAttribute","makeRef","currentChangedCallback","resolve","current","currentPromise","Promise","res","setRefFunction","ref","waitForCurrent","async","FormFieldLabel","constructor","hostRef","htmlForObserver","MutationObserver","this","checkForInternalState","labelRef","connectedCallback","registerHtmlForObserver","registerControlRefObserver","disconnectedCallback","disconnect","htmlForClassObserver","destroy","controlRefClassObserver","componentWillRender","componentWillLoad","window","htmlFor","observe","document","childList","subtree","controlRef","input","createClassMutationObserver","checkForInvalidState","registerHtmlForClassObserver","forElement","elementToCheck","classList","contains","getElementById","required","focusOnClick","target","obj","getAssociatedFormElement","getNativeInputElement","focus","render","Host","key","onClick","Object","assign","format","FieldWrapper","showTextAsTooltip","slotRef","textOptions","htmlForLabel","for","showDelay","placement","shouldSuppressInternalValidation","host","form","noValidate","element","callback","options","observer","includeChildren","attributes","attributeFilter","containsClass","className","concat","querySelector","checkFieldClasses","isInvalidByRequired","HookValidationLifecycle","proto","methodName","checkIfRequiredFunction","classMutationObserver","getElement","hasValidValue","hasValue","touched","isTouched","toggle","remove","getValidityState","validityState","patternMismatch","addEventListener","setTimeout","call","result","removeEventListener"],"sourceRoot":""}