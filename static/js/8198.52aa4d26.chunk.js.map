{"version":3,"file":"static/js/8198.52aa4d26.chunk.js","mappings":"4GAgBM,SAAUA,EACdC,GAEA,IAAIC,EAEAC,EADAC,EAAiB,IAAIC,SAAYC,GAASJ,EAAUI,IAGxD,MAAMC,EAAkBC,SACVC,IAARD,IAGJL,EAAWI,EAA8BJ,QAAUK,EAC7B,OAAtBP,QAAsB,IAAtBA,GAAAA,EAAyBO,GAClB,OAAPN,QAAO,IAAPA,GAAAA,EAAUM,KAUZ,OAPAD,EAAeJ,QAAUA,EAEzBI,EAAeG,eAAiBC,gBACxBP,EACCD,GAGFI,CACT,C,gGCxCA,MC0BaK,EAAI,MALjBC,WAAAA,CAAAC,I,0DAW2B,KAAOC,QAQjB,UAMP,KAAMC,QAAG,EAKT,KAAQC,UAAG,EAsBX,KAAOC,SAAG,EAQV,KAAWC,aAAqB,EAOvB,KAAmBC,qBAAGpB,EAAAA,EAAAA,IAsGxC,CApGSqB,cAAAA,GACN,OACEC,EAAAA,EAAAA,GAAA,OAAKC,MAAM,2BACTD,EAAAA,EAAAA,GACE,kBAAAE,KAAK,SACLT,QAAQ,YACRU,KAAMC,EAAAA,EACNH,MAAM,eACNI,MAAI,EACJC,KAAK,KACLC,MAAwB,WAAjBC,KAAKf,QAAuB,CAAEgB,MAAOD,KAAKE,WAAc,CAAC,EAChEC,OAAK,EACLC,QAAUC,IACRL,KAAKM,UAAUC,KAAKF,GACpBA,EAAMG,qB,CAORC,UAAAA,G,MACN,IAAKT,KAAKX,cAAgBW,KAAKU,YAAYC,aAAa,gBACtD,OAAO,KAGT,MAAMC,EACwB,kBAArBZ,KAAKX,aAA4BW,KAAKX,YAAYwB,OACrDb,KAAKX,YACuB,QAA5ByB,EAAAd,KAAKU,YAAYK,mBAAW,IAAAD,OAAA,EAAAA,EAAED,OAEpC,OACErB,EAAAA,EAAAA,GAAA,cAAYwB,IAAKhB,KAAKV,oBAAoBV,kBACvCgC,E,CAKPK,MAAAA,GACE,MAAMC,GAA6B,IAAhBlB,KAAKd,OAExB,IAAIiC,EAAc,CAAC,EASnB,MAPqB,WAAjBnB,KAAKf,UACPkC,EAAc,CACZlB,MAAOD,KAAKE,UACZ,CAACF,KAAKZ,QAAU,cAAgB,mBAAoBY,KAAKoB,cAK3D5B,EAAAA,EAAAA,GAAC6B,EAAAA,EAAI,CAAAC,IAAA,2CACHC,SAAS,KACT9B,MAAO,CACL+B,SAAUN,GAEZnB,MACmB,WAAjBC,KAAKf,QACD,CACE,yBAA0Be,KAAKE,WAEjC,CAAC,IAGPV,EAAAA,EAAAA,GACE,OAAA8B,IAAA,2CAAA5C,IAAKsB,KAAKV,oBACVS,MAAY0B,OAAAC,OAAA,GAAAP,GACZ1B,MAAO,CACLkC,WAAW,EACXvC,QAASY,KAAKZ,QACdoC,SAAUN,EACVU,MAAwB,UAAjB5B,KAAKf,QACZ4C,SAA2B,aAAjB7B,KAAKf,QACf6C,KAAuB,SAAjB9B,KAAKf,QACX8C,QAA0B,YAAjB/B,KAAKf,QACd+C,QAA0B,YAAjBhC,KAAKf,QACdgD,QAA0B,YAAjBjC,KAAKf,QACdiD,QAA0B,YAAjBlC,KAAKf,QACdkD,OAAyB,WAAjBnC,KAAKf,QACbE,SAAUa,KAAKb,SACfQ,OAAQK,KAAKL,QAGfH,EAAAA,EAAAA,GAAA,WAAA8B,IAAA,2CACE7B,MAAO,CACL,aAAa,EACb2C,QAASpC,KAAKL,MAEhB0C,KAAMrC,KAAKL,KACXG,KAAM,QAERN,EAAAA,EAAAA,GAAM,QAAA8B,IAAA,2CAAA7B,MAAM,mBACVD,EAAAA,EAAAA,GAAA,QAAA8B,IAAA,+CAEc,IAAfJ,GAAwBlB,KAAKb,SAAWa,KAAKT,iBAAmB,MAElES,KAAKS,a,iDD1LE,k4X","sources":["../node_modules/@siemens/ix/dist/esm/src/components/utils/make-ref.ts","../node_modules/@siemens/ix/dist/esm/src/components/chip/chip.scss?tag=ix-chip&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/chip/chip.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport type MakeRef<T> = {\n  (ref: T | undefined | null): void;\n  current: T | null;\n  waitForCurrent(): Promise<T>;\n};\n\ntype Resolve<T> = (value: T) => void;\n\nexport function makeRef<T>(\n  currentChangedCallback?: (element: T) => void\n): MakeRef<T> {\n  let resolve: Resolve<T> | undefined = undefined;\n  let currentPromise = new Promise<T>((res) => (resolve = res));\n  let current: T | undefined = undefined;\n\n  const setRefFunction = (ref: T | undefined) => {\n    if (ref === undefined) {\n      return;\n    }\n    current = (setRefFunction as MakeRef<T>).current = ref;\n    currentChangedCallback?.(ref);\n    resolve?.(ref);\n  };\n\n  setRefFunction.current = current as T | null;\n\n  setRefFunction.waitForCurrent = async () => {\n    await currentPromise;\n    return current;\n  };\n\n  return setRefFunction as MakeRef<T>;\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n@import 'mixins/shadow-dom/component';\n@import 'common-variables';\n@import 'mixins/text-truncation';\n@import './chip-mixin';\n\n:host {\n  @include ix-component;\n  display: inline-block;\n  position: relative;\n  height: 2rem;\n  max-height: 2rem;\n  margin-left: $tiny-space;\n}\n\n:host(.inactive) {\n  pointer-events: none;\n}\n\n@include chip-container;\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { iconCloseSmall } from '@siemens/ix-icons/icons';\nimport {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n} from '@stencil/core';\nimport { makeRef } from '../utils/make-ref';\n\n@Component({\n  tag: 'ix-chip',\n  styleUrl: 'chip.scss',\n  shadow: true,\n})\nexport class Chip {\n  @Element() hostElement!: HTMLIxChipElement;\n\n  /**\n   * Chip variant\n   */\n  @Prop({ reflect: true }) variant:\n    | 'primary'\n    | 'alarm'\n    | 'critical'\n    | 'warning'\n    | 'info'\n    | 'neutral'\n    | 'success'\n    | 'custom' = 'primary';\n\n  /**\n   * Determines if the chip is interactive. If false no user input (e.g. mouse states, keyboard navigation)\n   * will be possible and also the close button will not be present.\n   */\n  @Prop() active = true;\n\n  /**\n   * Show close icon\n   */\n  @Prop() closable = false;\n\n  /**\n   * Show icon\n   */\n  @Prop() icon?: string;\n\n  /**\n   * Custom background color.\n   * Only has an effect on chips with `variant='custom'`\n   */\n  @Prop() background: string | undefined;\n\n  /**\n   * Custom font and icon color.\n   * Only has an effect on chips with `variant='custom'`\n   */\n  @Prop() chipColor: string | undefined;\n\n  /**\n   * Show chip with outline style\n   */\n  @Prop() outline = false;\n\n  /**\n   * Display a tooltip. By default, no tooltip will be displayed.\n   * Add the attribute to display the text content of the component as a tooltip or use a string to display a custom text.\n   *\n   * @since 3.0.0\n   */\n  @Prop() tooltipText: string | boolean = false;\n\n  /**\n   * Fire event if close button is clicked\n   */\n  @Event() closeChip!: EventEmitter;\n\n  private readonly containerElementRef = makeRef<HTMLElement>();\n\n  private getCloseButton() {\n    return (\n      <div class=\"close-button-container\">\n        <ix-icon-button\n          type=\"button\"\n          variant=\"secondary\"\n          icon={iconCloseSmall}\n          class=\"close-button\"\n          oval\n          size=\"16\"\n          style={this.variant === 'custom' ? { color: this.chipColor } : {}}\n          ghost\n          onClick={(event) => {\n            this.closeChip.emit(event);\n            event.stopPropagation();\n          }}\n        ></ix-icon-button>\n      </div>\n    );\n  }\n\n  private getTooltip() {\n    if (!this.tooltipText && !this.hostElement.hasAttribute('tooltip-text')) {\n      return null;\n    }\n\n    const text =\n      typeof this.tooltipText === 'string' && this.tooltipText.trim()\n        ? this.tooltipText\n        : this.hostElement.textContent?.trim();\n\n    return (\n      <ix-tooltip for={this.containerElementRef.waitForCurrent()}>\n        {text}\n      </ix-tooltip>\n    );\n  }\n\n  render() {\n    const isInactive = this.active === false;\n\n    let customStyle = {};\n\n    if (this.variant === 'custom') {\n      customStyle = {\n        color: this.chipColor,\n        [this.outline ? 'borderColor' : 'backgroundColor']: this.background,\n      };\n    }\n\n    return (\n      <Host\n        tabIndex=\"-1\"\n        class={{\n          inactive: isInactive,\n        }}\n        style={\n          this.variant === 'custom'\n            ? {\n                '--ix-icon-button-color': this.chipColor,\n              }\n            : {}\n        }\n      >\n        <div\n          ref={this.containerElementRef}\n          style={{ ...customStyle }}\n          class={{\n            container: true,\n            outline: this.outline,\n            inactive: isInactive,\n            alarm: this.variant === 'alarm',\n            critical: this.variant === 'critical',\n            info: this.variant === 'info',\n            neutral: this.variant === 'neutral',\n            primary: this.variant === 'primary',\n            success: this.variant === 'success',\n            warning: this.variant === 'warning',\n            custom: this.variant === 'custom',\n            closable: this.closable,\n            icon: !!this.icon,\n          }}\n        >\n          <ix-icon\n            class={{\n              'with-icon': true,\n              hidden: !this.icon,\n            }}\n            name={this.icon}\n            size={'24'}\n          />\n          <span class=\"slot-container\">\n            <slot></slot>\n          </span>\n          {isInactive === false && this.closable ? this.getCloseButton() : null}\n        </div>\n        {this.getTooltip()}\n      </Host>\n    );\n  }\n}\n"],"names":["makeRef","currentChangedCallback","resolve","current","currentPromise","Promise","res","setRefFunction","ref","undefined","waitForCurrent","async","Chip","constructor","hostRef","variant","active","closable","outline","tooltipText","containerElementRef","getCloseButton","h","class","type","icon","iconCloseSmall","oval","size","style","this","color","chipColor","ghost","onClick","event","closeChip","emit","stopPropagation","getTooltip","hostElement","hasAttribute","text","trim","_a","textContent","for","render","isInactive","customStyle","background","Host","key","tabIndex","inactive","Object","assign","container","alarm","critical","info","neutral","primary","success","warning","custom","hidden","name"],"sourceRoot":""}