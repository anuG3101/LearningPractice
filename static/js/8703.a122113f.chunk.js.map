{"version":3,"file":"static/js/8703.a122113f.chunk.js","mappings":"6KAAA,MCuBaA,EAAc,MAL3BC,WAAAA,CAAAC,I,eAQU,KAAWC,YAAG,kBAId,KAAcC,eAAG,kBAIjB,KAAQC,SAAiC,eAEhC,KAAqBC,sBAAG,mBA+F1C,CA7FC,iBAAIC,GACF,OAAO,IAAIC,SAAsBC,IAC/B,MAAMC,EAAWC,aAAY,KAC3B,MAAMC,EAAmBC,SAASC,eAAeC,KAAKZ,aAClDS,IACFI,cAAcN,GACdD,EAAQG,S,CAMhBK,gBAAAA,GACE,IAAKJ,SAASC,eAAeC,KAAKZ,aAAc,CAC9C,MAAMe,EAAiBL,SAASM,cAAc,OAC9CD,EAAeE,GAAKL,KAAKZ,YACzBe,EAAeG,UAAUC,IAAIP,KAAKX,gBAClCc,EAAeG,UAAUC,IAAI,GAADC,OACvBR,KAAKT,uBAAqBiB,OAAGR,KAAKV,WAEvCQ,SAASW,KAAKC,YAAYP,E,EAK9BQ,gBAAAA,CAAiBC,EAAqBC,GACpC,MAAMV,EAAiBL,SAASC,eAAeC,KAAKZ,aAC/Ce,GAILA,EAAeG,UAAUQ,OAAO,GAADN,OAC1BR,KAAKT,uBAAqBiB,OAAGK,IAElCV,EAAeG,UAAUC,IAAI,GAADC,OAAIR,KAAKT,uBAAqBiB,OAAGI,KAN3DG,QAAQC,KAAK,4D,CAcjB,eAAMC,CAAUC,G,UACd,MAAMC,EAAQrB,SAASM,cAAc,YAC/BgB,EAAU,IAAIC,EAAAA,EAEpB,SAASC,EAAYC,GACnBJ,EAAML,SACNM,EAAQI,KAAKD,E,CAyBf,OAtBAJ,EAAMM,WAAaP,EAAOQ,MAC1BP,EAAMQ,KAAsB,QAAfC,EAAAV,EAAOS,YAAQ,IAAAC,EAAAA,EAAA,OAC5BT,EAAMU,UAAgC,QAApBC,EAAAZ,EAAOW,iBAAa,IAAAC,GAAAA,EACtCX,EAAMY,eAA0C,QAAzBC,EAAAd,EAAOa,sBAAkB,IAAAC,EAAAA,EAAA,IAChDb,EAAMc,KAAOf,EAAOe,KACpBd,EAAMe,UAAYhB,EAAOgB,UACzBf,EAAMgB,iBACJ,cACCC,IACC,MAAM,OAAEC,GAAWD,EACnBd,EAAYe,MAIc,kBAAnBnB,EAAOoB,QAChBnB,EAAMoB,UAAYrB,EAAOoB,QAEzBnB,EAAMT,YAAYQ,EAAOoB,gBAGpBtC,KAAKR,eAAekB,YAAYS,GAEhC,CACLC,UACAoB,MAAQjB,IACND,EAAYC,I,CAKlBkB,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAAAC,IAAA,2CACHC,MAAO,CACL,gCAAmD,iBAAlB7C,KAAKV,SACtC,6BAAgD,cAAlBU,KAAKV,YAGrCoD,EAAAA,EAAAA,GAAa,QAAAE,IAAA,6C,uED/HK,88B","sources":["../node_modules/@siemens/ix/dist/esm/src/components/toast/styles/toast-container.scss?tag=ix-toast-container&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/toast/toast-container.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n@import 'common-variables';\n@import 'mixins/shadow-dom/component';\n\n:host {\n  @include ix-component;\n}\n\n#toast-container {\n  > :not(:last-child) {\n    margin-block-end: $default-space;\n  }\n}\n\n.toast-container {\n  display: block;\n  position: fixed;\n}\n\n.toast-container--top-right {\n  right: 1rem;\n  top: 2rem;\n}\n\n.toast-container--bottom-right {\n  right: 1rem;\n  bottom: 2rem;\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Component, h, Host, Method, Prop, Watch } from '@stencil/core';\nimport { TypedEvent } from '../utils/typed-event';\nimport { ToastConfig } from './toast-utils';\n\nexport type ShowToastResult = {\n  onClose: TypedEvent<any | undefined>;\n  close: (result?: any) => void;\n};\n\n@Component({\n  tag: 'ix-toast-container',\n  styleUrl: './styles/toast-container.scss',\n  shadow: true,\n})\nexport class ToastContainer {\n  /**\n   */\n  @Prop() containerId = 'toast-container';\n\n  /**\n   */\n  @Prop() containerClass = 'toast-container';\n\n  /**\n   */\n  @Prop() position: 'bottom-right' | 'top-right' = 'bottom-right';\n\n  private readonly PREFIX_POSITION_CLASS = 'toast-container--';\n\n  get hostContainer() {\n    return new Promise<HTMLElement>((resolve) => {\n      const interval = setInterval(() => {\n        const containerElement = document.getElementById(this.containerId);\n        if (containerElement) {\n          clearInterval(interval);\n          resolve(containerElement);\n        }\n      });\n    });\n  }\n\n  componentDidLoad() {\n    if (!document.getElementById(this.containerId)) {\n      const toastContainer = document.createElement('div');\n      toastContainer.id = this.containerId;\n      toastContainer.classList.add(this.containerClass);\n      toastContainer.classList.add(\n        `${this.PREFIX_POSITION_CLASS}${this.position}`\n      );\n      document.body.appendChild(toastContainer);\n    }\n  }\n\n  @Watch('position')\n  onPositionChange(newPosition: string, oldPosition: string) {\n    const toastContainer = document.getElementById(this.containerId);\n    if (!toastContainer) {\n      console.warn('No toast container found, cannot configure toast position');\n      return;\n    }\n    toastContainer.classList.remove(\n      `${this.PREFIX_POSITION_CLASS}${oldPosition}`\n    );\n    toastContainer.classList.add(`${this.PREFIX_POSITION_CLASS}${newPosition}`);\n  }\n\n  /**\n   * Display a toast message\n   * @param config\n   */\n  @Method()\n  async showToast(config: ToastConfig): Promise<ShowToastResult> {\n    const toast = document.createElement('ix-toast');\n    const onClose = new TypedEvent<any | undefined>();\n\n    function removeToast(result?: any) {\n      toast.remove();\n      onClose.emit(result);\n    }\n\n    toast.toastTitle = config.title;\n    toast.type = config.type ?? 'info';\n    toast.autoClose = config.autoClose ?? true;\n    toast.autoCloseDelay = config.autoCloseDelay ?? 5000;\n    toast.icon = config.icon;\n    toast.iconColor = config.iconColor;\n    toast.addEventListener(\n      'closeToast',\n      (event: CustomEvent<any | undefined>) => {\n        const { detail } = event;\n        removeToast(detail);\n      }\n    );\n\n    if (typeof config.message === 'string') {\n      toast.innerText = config.message;\n    } else {\n      toast.appendChild(config.message);\n    }\n\n    (await this.hostContainer).appendChild(toast);\n\n    return {\n      onClose,\n      close: (result?: any) => {\n        removeToast(result);\n      },\n    };\n  }\n\n  render() {\n    return (\n      <Host\n        class={{\n          'toast-container--bottom-right': this.position === 'bottom-right',\n          'toast-container--top-right': this.position === 'top-right',\n        }}\n      >\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"names":["ToastContainer","constructor","hostRef","containerId","containerClass","position","PREFIX_POSITION_CLASS","hostContainer","Promise","resolve","interval","setInterval","containerElement","document","getElementById","this","clearInterval","componentDidLoad","toastContainer","createElement","id","classList","add","concat","body","appendChild","onPositionChange","newPosition","oldPosition","remove","console","warn","showToast","config","toast","onClose","TypedEvent","removeToast","result","emit","toastTitle","title","type","_a","autoClose","_b","autoCloseDelay","_c","icon","iconColor","addEventListener","event","detail","message","innerText","close","render","h","Host","key","class"],"sourceRoot":""}