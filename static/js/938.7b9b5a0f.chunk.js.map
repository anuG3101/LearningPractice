{"version":3,"file":"static/js/938.7b9b5a0f.chunk.js","mappings":"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","sources":["../node_modules/@siemens/ix/dist/esm/src/components/custom-field/custom-field.tsx","../node_modules/@siemens/ix/dist/esm/src/components/custom-field/custom-field.scss?tag=ix-custom-field&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/utils/input/validation.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Component, Host, Prop, State, h, Element } from '@stencil/core';\nimport {\n  FieldWrapperInterface,\n  HookValidationLifecycle,\n  IxFormValidationState,\n  ValidationResults,\n} from '../utils/input';\nimport { IxComponent } from '../utils/internal';\n\n@Component({\n  tag: 'ix-custom-field',\n  styleUrl: 'custom-field.scss',\n  shadow: true,\n})\nexport class CustomField\n  implements FieldWrapperInterface, IxFormValidationState, IxComponent\n{\n  @Element() hostElement!: HTMLIxCustomFieldElement;\n  /**\n   * A value is required or must be checked for the form to be submittable\n   */\n  @Prop() required: boolean = false;\n\n  /**\n   * Label for the field component\n   */\n  @Prop() label?: string;\n\n  /**\n   * Show text below the field component which show additional information\n   */\n  @Prop() helperText?: string;\n\n  /**\n   * Info text for the field component\n   */\n  @Prop() infoText?: string;\n\n  /**\n   * Warning text for the field component\n   */\n  @Prop() warningText?: string;\n\n  /**\n   * Error text for the field component\n   */\n  @Prop() invalidText?: string;\n\n  /**\n   * Valid text for the field component\n   */\n  @Prop() validText?: string;\n\n  /**\n   * Show helper, info, warning, error and valid text as tooltip\n   */\n  @Prop() showTextAsTooltip?: boolean;\n\n  @State() isInvalid = false;\n  @State() isValid = false;\n  @State() isInfo = false;\n  @State() isWarning = false;\n\n  @HookValidationLifecycle({\n    includeChildren: true,\n  })\n  updateValidationState({\n    isInvalid,\n    isValid,\n    isInfo,\n    isWarning,\n  }: ValidationResults) {\n    this.isInvalid = isInvalid;\n    this.isValid = isValid;\n    this.isInfo = isInfo;\n    this.isWarning = isWarning;\n  }\n\n  render() {\n    return (\n      <Host>\n        <ix-field-wrapper\n          label={this.label}\n          helperText={this.helperText}\n          infoText={this.infoText}\n          warningText={this.warningText}\n          invalidText={this.invalidText}\n          validText={this.validText}\n          showTextAsTooltip={this.showTextAsTooltip}\n          isInvalid={this.isInvalid}\n          isValid={this.isValid}\n          isInfo={this.isInfo}\n          isWarning={this.isWarning}\n          required={this.required}\n        >\n          <slot></slot>\n        </ix-field-wrapper>\n      </Host>\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n:host {\n  display: block;\n  width: fit-content;\n  height: fit-content;\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getElement } from '@stencil/core';\nimport { HTMLIxFormComponentElement, IxFormComponent } from '.';\nimport { IxComponent } from '../internal';\n\nexport type ClassMutationObserver = {\n  destroy: () => void;\n};\n\nexport async function isTouched<T>(host: IxFormComponent<T>) {\n  if (typeof host.isTouched === 'function') {\n    return host.isTouched();\n  }\n}\n\nexport async function shouldSuppressInternalValidation<T>(\n  host: IxFormComponent<T>\n) {\n  if (\n    host.getAssociatedFormElement &&\n    typeof host.getAssociatedFormElement === 'function'\n  ) {\n    const form = await host.getAssociatedFormElement();\n\n    if (!form) {\n      return false;\n    }\n\n    return form.noValidate;\n  }\n\n  return false;\n}\n\nexport function createClassMutationObserver(\n  element: HTMLElement,\n  callback: () => void,\n  options?: {\n    includeChildren?: boolean;\n  }\n): ClassMutationObserver {\n  const observer = new MutationObserver(callback);\n  observer.observe(element, {\n    subtree: options?.includeChildren,\n    childList: options?.includeChildren,\n    attributes: true,\n    attributeFilter: ['class'],\n  });\n\n  return {\n    destroy() {\n      observer.disconnect();\n    },\n  };\n}\n\nexport type ValidationResultProperty =\n  | 'isInvalid'\n  | 'isInvalidByRequired'\n  | 'isValid'\n  | 'isInfo'\n  | 'isWarning';\nexport type ValidationResults = Record<ValidationResultProperty, boolean>;\n\nfunction containsClass(\n  hostElement: HTMLIxFormComponentElement<unknown>,\n  className: string,\n  includeChildren: boolean\n) {\n  return (\n    hostElement.classList.contains(`${className}`) ||\n    (includeChildren ? !!hostElement.querySelector(`.${className}`) : false)\n  );\n}\n\nexport function checkFieldClasses(\n  hostElement: HTMLIxFormComponentElement<unknown>,\n  includeChildren = false\n): ValidationResults {\n  return {\n    isInvalid: containsClass(hostElement, 'ix-invalid', includeChildren),\n    isInvalidByRequired: containsClass(\n      hostElement,\n      'ix-invalid--required',\n      includeChildren\n    ),\n    isValid: containsClass(hostElement, 'ix-valid', includeChildren),\n    isInfo: containsClass(hostElement, 'ix-info', includeChildren),\n    isWarning: containsClass(hostElement, 'ix-warning', includeChildren),\n  };\n}\n\nexport function HookValidationLifecycle(options?: {\n  includeChildren?: boolean;\n}) {\n  return (proto: IxComponent, methodName: string) => {\n    let checkIfRequiredFunction: (() => Promise<void>) | null;\n    let classMutationObserver: ClassMutationObserver | null;\n    const { componentWillLoad, disconnectedCallback, connectedCallback } =\n      proto;\n\n    proto.connectedCallback = function () {\n      const host = getElement(\n        this\n      ) as unknown as HTMLIxFormComponentElement<unknown>;\n\n      checkIfRequiredFunction = async () => {\n        const skipValidation = await shouldSuppressInternalValidation(host);\n        if (skipValidation) {\n          return;\n        }\n\n        if (host.hasValidValue && typeof host.hasValidValue === 'function') {\n          const hasValue = await host.hasValidValue();\n          const touched = await isTouched(host);\n\n          if (host.required) {\n            host.classList.toggle('ix-invalid--required', !hasValue && touched);\n          } else {\n            host.classList.remove('ix-invalid--required');\n          }\n        }\n\n        if (\n          host.getValidityState &&\n          typeof host.getValidityState === 'function'\n        ) {\n          const validityState = await host.getValidityState();\n\n          host.classList.toggle(\n            `ix-invalid--validity-patternMismatch`,\n            validityState.patternMismatch\n          );\n        }\n      };\n\n      host.addEventListener('checkedChange', checkIfRequiredFunction);\n      host.addEventListener('valueChange', checkIfRequiredFunction);\n      host.addEventListener('ixBlur', checkIfRequiredFunction);\n      setTimeout(checkIfRequiredFunction);\n      return connectedCallback?.call(this);\n    };\n\n    proto.componentWillLoad = function () {\n      const host = getElement(\n        this\n      ) as unknown as HTMLIxFormComponentElement<unknown>;\n      classMutationObserver = createClassMutationObserver(\n        host,\n        () => {\n          const result = checkFieldClasses(host, options?.includeChildren);\n          proto[methodName].call(this, result);\n        },\n        options\n      );\n      const result = checkFieldClasses(host, options?.includeChildren);\n      proto[methodName].call(this, result);\n      return componentWillLoad?.call(this);\n    };\n\n    proto.disconnectedCallback = function () {\n      const host = getElement(this);\n\n      if (host && classMutationObserver) {\n        classMutationObserver.destroy();\n        classMutationObserver = null;\n      }\n\n      if (host && checkIfRequiredFunction) {\n        host.removeEventListener('checkedChange', checkIfRequiredFunction);\n        host.removeEventListener('valueChange', checkIfRequiredFunction);\n        host.removeEventListener('ixBlur', checkIfRequiredFunction);\n        checkIfRequiredFunction = null;\n      }\n\n      return disconnectedCallback?.call(this);\n    };\n  };\n}\n"],"names":["CustomField","constructor","hostRef","required","isInvalid","isValid","isInfo","isWarning","updateValidationState","_ref","this","render","h","Host","key","label","helperText","infoText","warningText","invalidText","validText","showTextAsTooltip","__decorate","HookValidationLifecycle","includeChildren","prototype","async","shouldSuppressInternalValidation","host","getAssociatedFormElement","form","noValidate","createClassMutationObserver","element","callback","options","observer","MutationObserver","observe","subtree","childList","attributes","attributeFilter","destroy","disconnect","containsClass","hostElement","className","classList","contains","concat","querySelector","checkFieldClasses","arguments","length","undefined","isInvalidByRequired","proto","methodName","checkIfRequiredFunction","classMutationObserver","componentWillLoad","disconnectedCallback","connectedCallback","getElement","hasValidValue","hasValue","touched","isTouched","toggle","remove","getValidityState","validityState","patternMismatch","addEventListener","setTimeout","call","result","removeEventListener"],"sourceRoot":""}