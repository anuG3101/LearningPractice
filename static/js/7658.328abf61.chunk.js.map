{"version":3,"file":"static/js/7658.328abf61.chunk.js","mappings":"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","sources":["../node_modules/@siemens/ix/dist/esm/src/components/utils/mutation-observer.ts","../node_modules/@siemens/ix/dist/esm/src/components/input/input.fc.tsx","../node_modules/@siemens/ix/dist/esm/src/components/input/input.util.ts","../node_modules/@siemens/ix/dist/esm/src/components/input/input.animation.ts","../node_modules/@siemens/ix/dist/esm/src/components/utils/condition-checks.ts","../node_modules/@siemens/ix/dist/esm/src/components/utils/a11y.ts","../node_modules/@siemens/ix/dist/esm/src/components/utils/make-ref.ts","../node_modules/@siemens/ix/dist/esm/src/components/utils/input/validation.ts","../node_modules/@siemens/ix/dist/esm/src/components/input/textarea.tsx","../node_modules/@siemens/ix/dist/esm/src/components/input/textarea.scss?tag=ix-textarea&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/utils/rwd.util.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport const createMutationObserver = (callback: MutationCallback) =>\n  new MutationObserver(callback);\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { h, FunctionalComponent } from '@stencil/core';\nimport { MakeRef } from '../utils/make-ref';\nimport { A11yAttributes } from '../utils/a11y';\n\nexport function TextareaElement(\n  props: Readonly<{\n    resizeBehavior: 'both' | 'horizontal' | 'vertical' | 'none';\n    textareaHeight?: string;\n    textareaWidth?: string;\n    textareaRows?: number;\n    textareaCols?: number;\n    disabled: boolean;\n    readonly: boolean;\n    maxLength?: number;\n    minLength?: number;\n    isInvalid: boolean;\n    required: boolean;\n    value: string;\n    placeholder?: string;\n    textAreaRef: (el: HTMLTextAreaElement | undefined) => void;\n    valueChange: (value: string) => void;\n    updateFormInternalValue: (value: string) => void;\n    onBlur: () => void;\n    ariaAttributes?: A11yAttributes;\n  }>\n) {\n  return (\n    <textarea\n      readOnly={props.readonly}\n      disabled={props.disabled}\n      maxLength={props.maxLength}\n      minLength={props.minLength}\n      cols={props.textareaCols}\n      rows={props.textareaRows}\n      ref={props.textAreaRef}\n      class={{\n        'is-invalid': props.isInvalid,\n      }}\n      required={props.required}\n      value={props.value}\n      placeholder={props.placeholder}\n      onInput={(inputEvent) => {\n        const target = inputEvent.target as HTMLInputElement;\n        props.updateFormInternalValue(target.value);\n        props.valueChange(target.value);\n      }}\n      onBlur={() => props.onBlur()}\n      style={{\n        resize: props.resizeBehavior,\n        height: props.textareaHeight,\n        width: props.textareaWidth,\n      }}\n      {...props.ariaAttributes}\n    ></textarea>\n  );\n}\n\nexport function InputElement(\n  props: Readonly<{\n    id: string;\n    disabled: boolean;\n    readonly: boolean;\n    maxLength?: string | number;\n    minLength?: string | number;\n    max?: string | number;\n    min?: string | number;\n    step?: string | number;\n    pattern?: string;\n    type: string;\n    isInvalid: boolean;\n    required: boolean;\n    value: string | number;\n    placeholder?: string;\n    inputRef: (el: HTMLInputElement | undefined) => void;\n    onKeyPress: (event: KeyboardEvent) => void;\n    valueChange: (value: string) => void;\n    updateFormInternalValue: (value: string) => void;\n    onBlur: () => void;\n    ariaAttributes?: A11yAttributes;\n  }>\n) {\n  return (\n    <input\n      id={props.id}\n      autoComplete=\"off\"\n      readOnly={props.readonly}\n      disabled={props.disabled}\n      step={props.step}\n      min={props.min}\n      max={props.max}\n      maxLength={props.maxLength ? Number(props.maxLength) : undefined}\n      minLength={props.minLength ? Number(props.minLength) : undefined}\n      ref={props.inputRef}\n      pattern={props.pattern}\n      type={props.type}\n      class={{\n        'is-invalid': props.isInvalid,\n      }}\n      required={props.required}\n      value={props.value}\n      placeholder={props.placeholder}\n      onKeyPress={(event) => props.onKeyPress(event)}\n      onInput={(inputEvent) => {\n        const target = inputEvent.target as HTMLInputElement;\n        props.updateFormInternalValue(target.value);\n        props.valueChange(target.value);\n      }}\n      onBlur={() => props.onBlur()}\n      {...props.ariaAttributes}\n    ></input>\n  );\n}\n\nexport const SlotEnd: FunctionalComponent<{\n  slotEndRef: MakeRef<HTMLDivElement>;\n  onSlotChange?: (e: Event) => void;\n}> = (props, children) => {\n  return (\n    <div class=\"end-container\" ref={props.slotEndRef}>\n      <slot name=\"end\" onSlotchange={props.onSlotChange}></slot>\n      {children}\n    </div>\n  );\n};\n\nexport const SlotStart: FunctionalComponent<{\n  slotStartRef: MakeRef<HTMLDivElement>;\n  onSlotChange?: (e: Event) => void;\n}> = (props) => {\n  return (\n    <div class=\"start-container\" ref={props.slotStartRef}>\n      <slot name=\"start\" onSlotchange={props.onSlotChange}></slot>\n    </div>\n  );\n};\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { A11yAttributes, a11yBoolean } from '../utils/a11y';\nimport {\n  IxFormComponent,\n  IxInputFieldComponent,\n  ValidationResults,\n  shouldSuppressInternalValidation,\n} from '../utils/input';\nimport { createMutationObserver } from '../utils/mutation-observer';\nimport { convertToRemString } from '../utils/rwd.util';\nimport { generateUUID } from '../utils/uuid';\nimport { shakeInput } from './input.animation';\n\nexport function createIdIfNotExists(\n  element: IxFormComponent,\n  idPrefix: string = 'input'\n) {\n  return element.hasAttribute('id')\n    ? element.getAttribute('id')\n    : `${idPrefix}-${generateUUID()}`;\n}\n\nexport function mapValidationResult<T>(\n  ref: IxInputFieldComponent<T>,\n  result: ValidationResults\n) {\n  ref.isInvalid = result.isInvalid || result.isInvalidByRequired;\n  ref.isValid = result.isValid;\n  ref.isInfo = result.isInfo;\n  ref.isWarning = result.isWarning;\n}\n\nexport function checkAllowedKeys<T>(\n  comp: IxInputFieldComponent<T>,\n  event: KeyboardEvent\n) {\n  if (comp.allowedCharactersPattern) {\n    const regex = new RegExp(comp.allowedCharactersPattern);\n    if (!regex.test(event.key)) {\n      event.preventDefault();\n      shakeInput(comp.inputRef.current);\n    }\n  }\n}\n\nexport async function checkInternalValidity<T>(\n  comp: IxFormComponent<T>,\n  input: HTMLInputElement | HTMLTextAreaElement\n) {\n  const validityState = input.validity;\n\n  const eventResult = comp.validityStateChange.emit(validityState);\n\n  if (eventResult.defaultPrevented) {\n    return;\n  }\n\n  if (!comp.value) {\n    return;\n  }\n\n  const skipValidation = await shouldSuppressInternalValidation(comp);\n  if (skipValidation) {\n    return;\n  }\n\n  const { valid } = validityState;\n  comp.hostElement.classList.toggle('ix-invalid--validity-invalid', !valid);\n}\n\nexport function onInputBlur<T>(\n  comp: IxFormComponent<T>,\n  input?: HTMLInputElement | HTMLTextAreaElement | null\n) {\n  comp.ixBlur.emit();\n\n  if (!input) {\n    throw new Error('Input element is not available');\n  }\n\n  input.setAttribute('data-ix-touched', 'true');\n  checkInternalValidity(comp, input);\n}\n\nexport function applyPaddingEnd(\n  inputElement: HTMLElement | null,\n  width: number,\n  options: {\n    slotEnd: boolean;\n    additionalPaddingRight?: string;\n  }\n) {\n  if (!inputElement) {\n    return;\n  }\n\n  const remInPixels = 16;\n  const padding = convertToRemString(width + remInPixels / 2);\n\n  if (options.slotEnd) {\n    inputElement.style.paddingRight = `calc(${padding} + ${\n      options.additionalPaddingRight ?? '0rem'\n    })`;\n  } else {\n    inputElement.style.paddingLeft = padding;\n  }\n}\n\nexport function adjustPaddingForStartAndEnd(\n  startElement: HTMLElement | null,\n  endElement: HTMLElement | null,\n  inputElement: HTMLElement | null\n) {\n  requestAnimationFrame(() => {\n    requestAnimationFrame(() => {\n      if (startElement) {\n        const startBoundingRect = startElement.getBoundingClientRect();\n        if (startBoundingRect) {\n          applyPaddingEnd(inputElement, startBoundingRect.width, {\n            slotEnd: false,\n          });\n        }\n      }\n\n      if (endElement) {\n        const endBoundingRect = endElement.getBoundingClientRect();\n        if (endBoundingRect) {\n          applyPaddingEnd(inputElement, endBoundingRect.width, {\n            slotEnd: true,\n          });\n        }\n      }\n    });\n  });\n}\n\nexport function getAriaAttributesForInput(\n  component: IxInputFieldComponent\n): A11yAttributes {\n  const inputAria: A11yAttributes = {\n    'aria-invalid': `${a11yBoolean(component.isInvalid)}`,\n    'aria-required': `${a11yBoolean(component.required)}`,\n  };\n\n  if (component.isInvalid && component.invalidText) {\n    inputAria['aria-errormessage'] = component.invalidText;\n  }\n  return inputAria;\n}\n\nexport type DisposableChangesAndVisibilityObservers = () => void;\n\nexport const addDisposableChangesAndVisibilityObservers = (\n  element: HTMLElement,\n  callback: () => void\n): DisposableChangesAndVisibilityObservers => {\n  const intersectionObserver = observeElementUntilVisible(element, callback);\n  const mutationObserver = createMutationObserver(callback);\n\n  mutationObserver.observe(element, {\n    subtree: true,\n    attributes: true,\n  });\n\n  return () => {\n    intersectionObserver.disconnect();\n    mutationObserver.disconnect();\n  };\n};\n\nfunction observeElementUntilVisible(\n  hostElement: HTMLElement,\n  updateCallback: () => void\n): IntersectionObserver {\n  const intersectionObserver = new IntersectionObserver((entries) => {\n    entries.forEach((entry) => {\n      if (entry.isIntersecting) {\n        updateCallback();\n      }\n    });\n  });\n\n  intersectionObserver.observe(hostElement);\n  return intersectionObserver;\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport anime from 'animejs';\n\nexport function shakeInput(input: HTMLInputElement) {\n  const xMax = 5;\n  anime({\n    targets: input,\n    duration: 200,\n    easing: 'easeInOutSine',\n    loop: 2,\n    translateX: [\n      {\n        value: xMax * -1,\n      },\n      {\n        value: xMax,\n      },\n      {\n        value: xMax / -2,\n      },\n      {\n        value: xMax / 2,\n      },\n      {\n        value: 0,\n      },\n    ],\n  });\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport const isHttpUrl = (link: string) => {\n  if (!link) {\n    return false;\n  }\n\n  let url: URL;\n\n  try {\n    url = new URL(link);\n  } catch (e) {\n    return false;\n  }\n\n  return url.protocol === 'http:' || url.protocol === 'https:';\n};\n\nexport const isSvgDataUrl = (url: string) => {\n  if (!url) {\n    return false;\n  }\n\n  if (typeof url !== 'string') {\n    return false;\n  }\n\n  return url.startsWith('data:image/svg+xml');\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { isHttpUrl, isSvgDataUrl } from './condition-checks';\n\nexport const a11yBoolean = (value: boolean | undefined) =>\n  value ? 'true' : 'false';\n\nconst kebabCaseToUpperCaseSentence = (kebabCase: string) => {\n  const withoutFilledSuffix = kebabCase.replace('-filled', '');\n  const words = withoutFilledSuffix.split('-');\n  const sentence = words\n    .map((word) => {\n      const trimWord = word.trim();\n      const digitLessWord = trimWord.replace(/\\d+/g, '');\n\n      if (digitLessWord.length === 0) {\n        return trimWord;\n      }\n\n      return digitLessWord;\n    })\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n\n  return sentence;\n};\n\nexport const getFallbackLabelFromIconName = (iconName?: string) => {\n  if (!iconName) {\n    return 'Unknown';\n  }\n\n  if (isHttpUrl(iconName)) {\n    return 'Unknown';\n  }\n\n  if (isSvgDataUrl(iconName)) {\n    return 'Unknown';\n  }\n\n  const label = kebabCaseToUpperCaseSentence(iconName);\n\n  if (label.length === 0) {\n    return 'Unknown';\n  }\n\n  return label;\n};\n\nexport const a11yHostAttributes = (\n  hostElement: HTMLElement,\n  ignoreAttributes: A11yAttributeName[] = []\n): Record<A11yAttributeName, string> => {\n  const attributeObject: Record<string, string> = {};\n  a11yAttributes.forEach((attr) => {\n    if (hostElement.hasAttribute(attr)) {\n      const value = hostElement.getAttribute(attr);\n      if (value !== null && !ignoreAttributes.includes(attr)) {\n        attributeObject[attr] = hostElement.getAttribute(attr) ?? '';\n        hostElement.removeAttribute(attr);\n      }\n    }\n  });\n\n  return attributeObject;\n};\n\nexport type A11yAttributeName =\n  | 'role'\n  | 'aria-activedescendant'\n  | 'aria-atomic'\n  | 'aria-autocomplete'\n  | 'aria-braillelabel'\n  | 'aria-brailleroledescription'\n  | 'aria-busy'\n  | 'aria-checked'\n  | 'aria-colcount'\n  | 'aria-colindex'\n  | 'aria-colindextext'\n  | 'aria-colspan'\n  | 'aria-controls'\n  | 'aria-current'\n  | 'aria-describedby'\n  | 'aria-description'\n  | 'aria-details'\n  | 'aria-disabled'\n  | 'aria-errormessage'\n  | 'aria-expanded'\n  | 'aria-flowto'\n  | 'aria-haspopup'\n  | 'aria-hidden'\n  | 'aria-invalid'\n  | 'aria-keyshortcuts'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-level'\n  | 'aria-live'\n  | 'aria-multiline'\n  | 'aria-multiselectable'\n  | 'aria-orientation'\n  | 'aria-owns'\n  | 'aria-placeholder'\n  | 'aria-posinset'\n  | 'aria-pressed'\n  | 'aria-readonly'\n  | 'aria-relevant'\n  | 'aria-required'\n  | 'aria-roledescription'\n  | 'aria-rowcount'\n  | 'aria-rowindex'\n  | 'aria-rowindextext'\n  | 'aria-rowspan'\n  | 'aria-selected'\n  | 'aria-setsize'\n  | 'aria-sort'\n  | 'aria-valuemax'\n  | 'aria-valuemin'\n  | 'aria-valuenow'\n  | 'aria-valuetext';\n\nconst a11yAttributes: A11yAttributeName[] = [\n  'role',\n  'aria-activedescendant',\n  'aria-atomic',\n  'aria-autocomplete',\n  'aria-braillelabel',\n  'aria-brailleroledescription',\n  'aria-busy',\n  'aria-checked',\n  'aria-colcount',\n  'aria-colindex',\n  'aria-colindextext',\n  'aria-colspan',\n  'aria-controls',\n  'aria-current',\n  'aria-describedby',\n  'aria-description',\n  'aria-details',\n  'aria-disabled',\n  'aria-errormessage',\n  'aria-expanded',\n  'aria-flowto',\n  'aria-haspopup',\n  'aria-hidden',\n  'aria-invalid',\n  'aria-keyshortcuts',\n  'aria-label',\n  'aria-labelledby',\n  'aria-level',\n  'aria-live',\n  'aria-multiline',\n  'aria-multiselectable',\n  'aria-orientation',\n  'aria-owns',\n  'aria-placeholder',\n  'aria-posinset',\n  'aria-pressed',\n  'aria-readonly',\n  'aria-relevant',\n  'aria-required',\n  'aria-roledescription',\n  'aria-rowcount',\n  'aria-rowindex',\n  'aria-rowindextext',\n  'aria-rowspan',\n  'aria-selected',\n  'aria-setsize',\n  'aria-sort',\n  'aria-valuemax',\n  'aria-valuemin',\n  'aria-valuenow',\n  'aria-valuetext',\n];\n\ntype PartialRecord<K extends A11yAttributeName, T> = {\n  [P in K]?: T;\n};\nexport type A11yAttributes = PartialRecord<A11yAttributeName, string>;\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport type MakeRef<T> = {\n  (ref: T | undefined | null): void;\n  current: T | null;\n  waitForCurrent(): Promise<T>;\n};\n\ntype Resolve<T> = (value: T) => void;\n\nexport function makeRef<T>(\n  currentChangedCallback?: (element: T) => void\n): MakeRef<T> {\n  let resolve: Resolve<T> | undefined = undefined;\n  let currentPromise = new Promise<T>((res) => (resolve = res));\n  let current: T | undefined = undefined;\n\n  const setRefFunction = (ref: T | undefined) => {\n    if (ref === undefined) {\n      return;\n    }\n    current = (setRefFunction as MakeRef<T>).current = ref;\n    currentChangedCallback?.(ref);\n    resolve?.(ref);\n  };\n\n  setRefFunction.current = current as T | null;\n\n  setRefFunction.waitForCurrent = async () => {\n    await currentPromise;\n    return current;\n  };\n\n  return setRefFunction as MakeRef<T>;\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getElement } from '@stencil/core';\nimport { HTMLIxFormComponentElement, IxFormComponent } from '.';\nimport { IxComponent } from '../internal';\n\nexport type ClassMutationObserver = {\n  destroy: () => void;\n};\n\nexport async function isTouched<T>(host: IxFormComponent<T>) {\n  if (typeof host.isTouched === 'function') {\n    return host.isTouched();\n  }\n}\n\nexport async function shouldSuppressInternalValidation<T>(\n  host: IxFormComponent<T>\n) {\n  if (\n    host.getAssociatedFormElement &&\n    typeof host.getAssociatedFormElement === 'function'\n  ) {\n    const form = await host.getAssociatedFormElement();\n\n    if (!form) {\n      return false;\n    }\n\n    return form.noValidate;\n  }\n\n  return false;\n}\n\nexport function createClassMutationObserver(\n  element: HTMLElement,\n  callback: () => void,\n  options?: {\n    includeChildren?: boolean;\n  }\n): ClassMutationObserver {\n  const observer = new MutationObserver(callback);\n  observer.observe(element, {\n    subtree: options?.includeChildren,\n    childList: options?.includeChildren,\n    attributes: true,\n    attributeFilter: ['class'],\n  });\n\n  return {\n    destroy() {\n      observer.disconnect();\n    },\n  };\n}\n\nexport type ValidationResultProperty =\n  | 'isInvalid'\n  | 'isInvalidByRequired'\n  | 'isValid'\n  | 'isInfo'\n  | 'isWarning';\nexport type ValidationResults = Record<ValidationResultProperty, boolean>;\n\nfunction containsClass(\n  hostElement: HTMLIxFormComponentElement<unknown>,\n  className: string,\n  includeChildren: boolean\n) {\n  return (\n    hostElement.classList.contains(`${className}`) ||\n    (includeChildren ? !!hostElement.querySelector(`.${className}`) : false)\n  );\n}\n\nexport function checkFieldClasses(\n  hostElement: HTMLIxFormComponentElement<unknown>,\n  includeChildren = false\n): ValidationResults {\n  return {\n    isInvalid: containsClass(hostElement, 'ix-invalid', includeChildren),\n    isInvalidByRequired: containsClass(\n      hostElement,\n      'ix-invalid--required',\n      includeChildren\n    ),\n    isValid: containsClass(hostElement, 'ix-valid', includeChildren),\n    isInfo: containsClass(hostElement, 'ix-info', includeChildren),\n    isWarning: containsClass(hostElement, 'ix-warning', includeChildren),\n  };\n}\n\nexport function HookValidationLifecycle(options?: {\n  includeChildren?: boolean;\n}) {\n  return (proto: IxComponent, methodName: string) => {\n    let checkIfRequiredFunction: (() => Promise<void>) | null;\n    let classMutationObserver: ClassMutationObserver | null;\n    const { componentWillLoad, disconnectedCallback, connectedCallback } =\n      proto;\n\n    proto.connectedCallback = function () {\n      const host = getElement(\n        this\n      ) as unknown as HTMLIxFormComponentElement<unknown>;\n\n      checkIfRequiredFunction = async () => {\n        const skipValidation = await shouldSuppressInternalValidation(host);\n        if (skipValidation) {\n          return;\n        }\n\n        if (host.hasValidValue && typeof host.hasValidValue === 'function') {\n          const hasValue = await host.hasValidValue();\n          const touched = await isTouched(host);\n\n          if (host.required) {\n            host.classList.toggle('ix-invalid--required', !hasValue && touched);\n          } else {\n            host.classList.remove('ix-invalid--required');\n          }\n        }\n\n        if (\n          host.getValidityState &&\n          typeof host.getValidityState === 'function'\n        ) {\n          const validityState = await host.getValidityState();\n\n          host.classList.toggle(\n            `ix-invalid--validity-patternMismatch`,\n            validityState.patternMismatch\n          );\n        }\n      };\n\n      host.addEventListener('checkedChange', checkIfRequiredFunction);\n      host.addEventListener('valueChange', checkIfRequiredFunction);\n      host.addEventListener('ixBlur', checkIfRequiredFunction);\n      setTimeout(checkIfRequiredFunction);\n      return connectedCallback?.call(this);\n    };\n\n    proto.componentWillLoad = function () {\n      const host = getElement(\n        this\n      ) as unknown as HTMLIxFormComponentElement<unknown>;\n      classMutationObserver = createClassMutationObserver(\n        host,\n        () => {\n          const result = checkFieldClasses(host, options?.includeChildren);\n          proto[methodName].call(this, result);\n        },\n        options\n      );\n      const result = checkFieldClasses(host, options?.includeChildren);\n      proto[methodName].call(this, result);\n      return componentWillLoad?.call(this);\n    };\n\n    proto.disconnectedCallback = function () {\n      const host = getElement(this);\n\n      if (host && classMutationObserver) {\n        classMutationObserver.destroy();\n        classMutationObserver = null;\n      }\n\n      if (host && checkIfRequiredFunction) {\n        host.removeEventListener('checkedChange', checkIfRequiredFunction);\n        host.removeEventListener('valueChange', checkIfRequiredFunction);\n        host.removeEventListener('ixBlur', checkIfRequiredFunction);\n        checkIfRequiredFunction = null;\n      }\n\n      return disconnectedCallback?.call(this);\n    };\n  };\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  AttachInternals,\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  Host,\n  Method,\n  Prop,\n  State,\n  h,\n} from '@stencil/core';\nimport {\n  HookValidationLifecycle,\n  IxInputFieldComponent,\n  ValidationResults,\n} from '../utils/input';\nimport { makeRef } from '../utils/make-ref';\nimport { TextareaElement } from './input.fc';\nimport { mapValidationResult, onInputBlur } from './input.util';\n\nexport type TextareaResizeBehavior =\n  | 'both'\n  | 'horizontal'\n  | 'vertical'\n  | 'none';\n\n/**\n * @form-ready\n */\n@Component({\n  tag: 'ix-textarea',\n  styleUrl: 'textarea.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class Textarea implements IxInputFieldComponent<string> {\n  @Element() hostElement!: HTMLIxTextareaElement;\n  @AttachInternals() formInternals!: ElementInternals;\n\n  /**\n   * The name of the textarea field.\n   */\n  @Prop({ reflect: true }) name?: string;\n\n  /**\n   * The placeholder text for the textarea field.\n   */\n  @Prop({ reflect: true }) placeholder?: string;\n\n  /**\n   * The value of the textarea field.\n   */\n  @Prop({ reflect: true, mutable: true }) value: string = '';\n\n  /**\n   * Determines if the textarea field is required.\n   */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /**\n   * Determines if the textarea field is disabled.\n   */\n  @Prop() disabled: boolean = false;\n\n  /**\n   * Determines if the textarea field is readonly.\n   */\n  @Prop() readonly: boolean = false;\n\n  /**\n   * The helper text for the textarea field.\n   */\n  @Prop() helperText?: string;\n\n  /**\n   * The info text for the textarea field.\n   */\n  @Prop() infoText?: string;\n\n  /**\n   * Determines if the text should be displayed as a tooltip.\n   */\n  @Prop() showTextAsTooltip?: boolean;\n\n  /**\n   * The valid text for the textarea field.\n   */\n  @Prop() validText?: string;\n\n  /**\n   * The warning text for the textarea field.\n   */\n  @Prop() warningText?: string;\n\n  /**\n   * The label for the textarea field.\n   */\n  @Prop({ reflect: true }) label?: string;\n\n  /**\n   * The error text for the textarea field.\n   */\n  @Prop() invalidText?: string;\n\n  /**\n   * The height of the textarea field (e.g. \"52px\").\n   */\n  @Prop() textareaHeight?: string;\n\n  /**\n   * The width of the textarea field (e.g. \"200px\").\n   */\n  @Prop() textareaWidth?: string;\n\n  /**\n   * The height of the textarea specified by number of rows.\n   */\n  @Prop() textareaRows?: number;\n\n  /**\n   * The width of the textarea specified by number of characters.\n   */\n  @Prop() textareaCols?: number;\n\n  /**\n   * Determines the resize behavior of the textarea field.\n   * Resizing can be enabled in one direction, both directions or completely disabled.\n   */\n  @Prop() resizeBehavior: TextareaResizeBehavior = 'both';\n\n  /**\n   * The maximum length of the textarea field.\n   */\n  @Prop() maxLength?: number;\n\n  /**\n   * The minimum length of the textarea field.\n   */\n  @Prop() minLength?: number;\n\n  /**\n   * Event emitted when the value of the textarea field changes.\n   */\n  @Event() valueChange!: EventEmitter<string>;\n\n  /**\n   * Event emitted when the validity state of the textarea field changes.\n   */\n  @Event() validityStateChange!: EventEmitter<ValidityState>;\n\n  /**\n   * Event emitted when the textarea field loses focus.\n   */\n  @Event() ixBlur!: EventEmitter<void>;\n\n  @State() isInvalid = false;\n  @State() isValid = false;\n  @State() isInfo = false;\n  @State() isWarning = false;\n  @State() isInvalidByRequired = false;\n\n  private readonly textAreaRef = makeRef<HTMLTextAreaElement>();\n  private touched = false;\n\n  @HookValidationLifecycle()\n  updateClassMappings(result: ValidationResults) {\n    mapValidationResult(this, result);\n  }\n\n  componentWillLoad() {\n    this.updateFormInternalValue(this.value);\n  }\n\n  updateFormInternalValue(value: string) {\n    this.formInternals.setFormValue(value);\n    this.value = value;\n  }\n\n  /** @internal */\n  @Method()\n  async getAssociatedFormElement(): Promise<HTMLFormElement | null> {\n    return this.formInternals.form;\n  }\n\n  /** @internal */\n  @Method()\n  hasValidValue(): Promise<boolean> {\n    return Promise.resolve(!!this.value);\n  }\n\n  /**\n   * Get the native textarea element.\n   */\n  @Method()\n  getNativeInputElement(): Promise<HTMLTextAreaElement> {\n    return this.textAreaRef.waitForCurrent();\n  }\n\n  /**\n   * Focuses the input field\n   */\n  @Method()\n  async focusInput(): Promise<void> {\n    return (await this.getNativeInputElement()).focus();\n  }\n\n  /**\n   * Check if the textarea field has been touched.\n   * @internal\n   * */\n  @Method()\n  isTouched(): Promise<boolean> {\n    return Promise.resolve(this.touched);\n  }\n\n  render() {\n    return (\n      <Host\n        class={{\n          disabled: this.disabled,\n          readonly: this.readonly,\n        }}\n      >\n        <ix-field-wrapper\n          required={this.required}\n          label={this.label}\n          helperText={this.helperText}\n          invalidText={this.invalidText}\n          infoText={this.infoText}\n          warningText={this.warningText}\n          validText={this.validText}\n          showTextAsTooltip={this.showTextAsTooltip}\n          isInvalid={this.isInvalid}\n          isValid={this.isValid}\n          isInfo={this.isInfo}\n          isWarning={this.isWarning}\n          controlRef={this.textAreaRef}\n        >\n          {!!this.maxLength && this.maxLength > 0 && (\n            <ix-typography\n              class=\"bottom-text\"\n              slot=\"bottom-right\"\n              textColor=\"soft\"\n            >\n              {(this.value || '').length}/{this.maxLength}\n            </ix-typography>\n          )}\n          <div class=\"input-wrapper\">\n            <TextareaElement\n              minLength={this.minLength}\n              maxLength={this.maxLength}\n              textareaCols={this.textareaCols}\n              textareaRows={this.textareaRows}\n              textareaHeight={this.textareaHeight}\n              textareaWidth={this.textareaWidth}\n              resizeBehavior={this.resizeBehavior}\n              readonly={this.readonly}\n              disabled={this.disabled}\n              isInvalid={this.isInvalid}\n              required={this.required}\n              value={this.value}\n              placeholder={this.placeholder}\n              textAreaRef={this.textAreaRef}\n              valueChange={(value) => this.valueChange.emit(value)}\n              updateFormInternalValue={(value) =>\n                this.updateFormInternalValue(value)\n              }\n              onBlur={() => {\n                onInputBlur(this, this.textAreaRef.current);\n                this.touched = true;\n              }}\n            ></TextareaElement>\n          </div>\n        </ix-field-wrapper>\n      </Host>\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n@import './input.mixins.scss';\n\n@include input-field;\n\n@include host-valid;\n\n@include host-info {\n  textarea {\n    border-color: var(--theme-input--border-color--info);\n  }\n\n  textarea:hover {\n    border-color: var(--theme-input--border-color--info--hover) !important;\n  }\n\n  textarea:active {\n    border-color: var(--theme-input--border-color--info--active) !important;\n  }\n}\n\n@include host-warning {\n  textarea {\n    border-color: var(--theme-input--border-color--warning--active) !important;\n  }\n\n  textarea:hover {\n    border-color: var(--theme-input--border-color--warning--active) !important;\n  }\n\n  textarea:active {\n    border-color: var(--theme-input--border-color--warning--active) !important;\n  }\n}\n\n@include host-invalid {\n  textarea {\n    background-color: var(--theme-input--background--invalid);\n    border-color: var(--theme-input--border-color--invalid) !important;\n  }\n\n  textarea:hover {\n    border-color: var(--theme-input--border-color--invalid--hover) !important;\n  }\n\n  textarea:active {\n    border-color: var(--theme-input--border-color--invalid--active) !important;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport const convertToRemString = (value: number) => {\n  const valueRem = value / 16;\n  return `${valueRem}rem`;\n};\n\nexport const convertToAbbreviationString = (num: number) => {\n  if (isNaN(num) || num === null || num === undefined) {\n    return '';\n  }\n\n  let unit = '';\n\n  // Metric Units\n  const units = [\n    { unit: 'q', value: Math.pow(10, 15) },\n    { unit: 't', value: Math.pow(10, 12) },\n    { unit: 'B', value: Math.pow(10, 9) },\n    { unit: 'M', value: Math.pow(10, 6) },\n    { unit: 'K', value: Math.pow(10, 3) },\n  ];\n\n  units.some((pow) => {\n    let formattedNum = Math.abs(num);\n    if (formattedNum >= pow.value) {\n      formattedNum /= pow.value;\n      num = Math.round(formattedNum * 10) / 10;\n      unit = pow.unit;\n      return true;\n    }\n\n    return false;\n  });\n\n  return num + unit;\n};\n"],"names":["createMutationObserver","callback","MutationObserver","TextareaElement","props","h","Object","assign","readOnly","readonly","disabled","maxLength","minLength","cols","textareaCols","rows","textareaRows","ref","textAreaRef","class","isInvalid","required","value","placeholder","onInput","inputEvent","target","updateFormInternalValue","valueChange","onBlur","style","resize","resizeBehavior","height","textareaHeight","width","textareaWidth","ariaAttributes","InputElement","id","autoComplete","step","min","max","Number","undefined","inputRef","pattern","type","onKeyPress","event","SlotEnd","children","slotEndRef","name","onSlotchange","onSlotChange","SlotStart","slotStartRef","mapValidationResult","result","isInvalidByRequired","isValid","isInfo","isWarning","checkAllowedKeys","comp","allowedCharactersPattern","RegExp","test","key","preventDefault","input","current","anime","targets","duration","easing","loop","translateX","xMax","async","checkInternalValidity","validityState","validity","validityStateChange","emit","defaultPrevented","shouldSuppressInternalValidation","valid","hostElement","classList","toggle","onInputBlur","ixBlur","Error","setAttribute","applyPaddingEnd","inputElement","options","padding","convertToRemString","remInPixels","slotEnd","paddingRight","concat","_a","additionalPaddingRight","paddingLeft","adjustPaddingForStartAndEnd","startElement","endElement","requestAnimationFrame","startBoundingRect","getBoundingClientRect","endBoundingRect","getAriaAttributesForInput","component","inputAria","a11yBoolean","invalidText","addDisposableChangesAndVisibilityObservers","element","intersectionObserver","updateCallback","IntersectionObserver","entries","forEach","entry","isIntersecting","observe","observeElementUntilVisible","mutationObserver","subtree","attributes","disconnect","getFallbackLabelFromIconName","iconName","link","url","URL","e","protocol","isHttpUrl","startsWith","label","replace","split","map","word","trimWord","trim","digitLessWord","length","charAt","toUpperCase","slice","join","a11yHostAttributes","ignoreAttributes","arguments","attributeObject","a11yAttributes","attr","hasAttribute","getAttribute","includes","removeAttribute","makeRef","currentChangedCallback","resolve","currentPromise","Promise","res","setRefFunction","waitForCurrent","host","getAssociatedFormElement","form","noValidate","createClassMutationObserver","observer","includeChildren","childList","attributeFilter","destroy","containsClass","className","contains","querySelector","checkFieldClasses","HookValidationLifecycle","proto","methodName","checkIfRequiredFunction","classMutationObserver","componentWillLoad","disconnectedCallback","connectedCallback","getElement","this","hasValidValue","hasValue","touched","isTouched","remove","getValidityState","patternMismatch","addEventListener","setTimeout","call","removeEventListener","Textarea","constructor","hostRef","updateClassMappings","formInternals","setFormValue","getNativeInputElement","focusInput","focus","render","Host","helperText","infoText","warningText","validText","showTextAsTooltip","controlRef","slot","textColor","__decorate","prototype"],"sourceRoot":""}