{"version":3,"file":"static/js/110.d5097cc7.chunk.js","mappings":"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","sources":["../node_modules/@siemens/ix/dist/esm/src/components/helper-text/helper-text.scss?tag=ix-helper-text&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/helper-text/helper-text.tsx","../node_modules/@siemens/ix/dist/esm/src/components/field-wrapper/helper-text-util.tsx","../node_modules/@siemens/ix/dist/esm/src/components/utils/input/validation.ts"],"sourcesContent":["@import \"./../field-wrapper/field-wrapper.mixins.scss\";\n\n:host {\n  display: block;\n\n  @include helper-text;\n}\n","import { Component, Host, Prop, State, h, Element } from '@stencil/core';\nimport {\n  ClassMutationObserver,\n  HTMLIxFormComponentElement,\n  ValidationResults,\n  checkFieldClasses,\n  createClassMutationObserver,\n} from '../utils/input';\nimport { renderHelperText } from '../field-wrapper/helper-text-util';\nimport { IxComponent } from '../utils/internal';\n\n@Component({\n  tag: 'ix-helper-text',\n  styleUrl: 'helper-text.scss',\n  shadow: true,\n})\nexport class HelperText implements IxComponent {\n  @Element() hostElement!: HTMLIxHelperTextElement;\n  /**\n   * The id of the form element that the label is associated with\n   */\n  @Prop() htmlFor?: string;\n\n  /**\n   * Show text below the field component\n   */\n  @Prop() helperText?: string;\n\n  /**\n   * Error text for the field component\n   */\n  @Prop() invalidText?: string;\n\n  /**\n   * Valid text for the field component\n   */\n  @Prop() validText?: string;\n\n  /**\n   * Info text for the field component\n   */\n  @Prop() infoText?: string;\n\n  /**\n   * Warning text for the field component\n   */\n  @Prop() warningText?: string;\n\n  @State() validationResults: ValidationResults = {\n    isInfo: false,\n    isInvalid: false,\n    isValid: false,\n    isWarning: false,\n    isInvalidByRequired: false,\n  };\n\n  private readonly observer = new MutationObserver(() =>\n    this.checkForRequired()\n  );\n  private classObserver?: ClassMutationObserver;\n\n  connectedCallback() {\n    this.observer.observe(window.document, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  disconnectedCallback(): void {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  }\n\n  componentWillRender() {\n    this.checkForRequired();\n  }\n\n  private async checkForRequired() {\n    if (!this.htmlFor) {\n      return;\n    }\n    const forElement = document.getElementById(\n      this.htmlFor\n    ) as HTMLIxFormComponentElement<unknown>;\n    if (!forElement) {\n      return;\n    }\n\n    if (this.classObserver) {\n      this.classObserver.destroy();\n    }\n    this.classObserver = createClassMutationObserver(forElement, () => {\n      this.validationResults = checkFieldClasses(forElement);\n    });\n    this.validationResults = checkFieldClasses(forElement);\n  }\n\n  render() {\n    return (\n      <Host>\n        {renderHelperText({\n          helperText: this.helperText,\n          invalidText: this.invalidText,\n          validText: this.validText,\n          infoText: this.infoText,\n          warningText: this.warningText,\n          ...this.validationResults,\n        })}\n      </Host>\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { h } from '@stencil/core';\nimport {\n  iconError,\n  iconInfo,\n  iconSuccess,\n  iconWarning,\n} from '@siemens/ix-icons/icons';\n\nexport function hasAnyText({\n  invalidText,\n  warningText,\n  infoText,\n  validText,\n  helperText,\n}: {\n  invalidText?: string;\n  warningText?: string;\n  infoText?: string;\n  validText?: string;\n  helperText?: string;\n}) {\n  return invalidText || warningText || infoText || validText || helperText;\n}\n\nexport function renderHelperText({\n  isInvalid,\n  invalidText,\n  isWarning,\n  warningText,\n  isInfo,\n  infoText,\n  isValid,\n  validText,\n  helperText,\n}: {\n  isInvalid: boolean;\n  invalidText?: string;\n  isWarning: boolean;\n  warningText?: string;\n  isInfo: boolean;\n  infoText?: string;\n  isValid: boolean;\n  validText?: string;\n  helperText?: string;\n}) {\n  if (isInvalid && invalidText !== undefined) {\n    return (\n      <ix-typography textColor=\"alarm\" class=\"bottom-text\">\n        <ix-icon class=\"text-icon invalid\" name={iconError} size=\"16\"></ix-icon>\n\n        {invalidText}\n      </ix-typography>\n    );\n  }\n\n  if (isWarning && warningText !== undefined) {\n    return (\n      <ix-typography textColor=\"std\" class=\"bottom-text\">\n        <ix-icon\n          class=\"text-icon warning\"\n          name={iconWarning}\n          size=\"16\"\n        ></ix-icon>\n        {warningText}\n      </ix-typography>\n    );\n  }\n\n  if (isInfo && infoText !== undefined) {\n    return (\n      <ix-typography textColor=\"std\" class=\"bottom-text\">\n        <ix-icon class=\"text-icon info\" name={iconInfo} size=\"16\"></ix-icon>\n        {infoText}\n      </ix-typography>\n    );\n  }\n\n  if (isValid && validText !== undefined) {\n    return (\n      <ix-typography textColor=\"std\" class=\"bottom-text\">\n        <ix-icon class=\"text-icon valid\" name={iconSuccess} size=\"16\"></ix-icon>\n        {validText}\n      </ix-typography>\n    );\n  }\n\n  return (\n    helperText && (\n      <ix-typography class=\"bottom-text\" textColor=\"soft\">\n        {helperText}\n      </ix-typography>\n    )\n  );\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getElement } from '@stencil/core';\nimport { HTMLIxFormComponentElement, IxFormComponent } from '.';\nimport { IxComponent } from '../internal';\n\nexport type ClassMutationObserver = {\n  destroy: () => void;\n};\n\nexport async function isTouched<T>(host: IxFormComponent<T>) {\n  if (typeof host.isTouched === 'function') {\n    return host.isTouched();\n  }\n}\n\nexport async function shouldSuppressInternalValidation<T>(\n  host: IxFormComponent<T>\n) {\n  if (\n    host.getAssociatedFormElement &&\n    typeof host.getAssociatedFormElement === 'function'\n  ) {\n    const form = await host.getAssociatedFormElement();\n\n    if (!form) {\n      return false;\n    }\n\n    return form.noValidate;\n  }\n\n  return false;\n}\n\nexport function createClassMutationObserver(\n  element: HTMLElement,\n  callback: () => void,\n  options?: {\n    includeChildren?: boolean;\n  }\n): ClassMutationObserver {\n  const observer = new MutationObserver(callback);\n  observer.observe(element, {\n    subtree: options?.includeChildren,\n    childList: options?.includeChildren,\n    attributes: true,\n    attributeFilter: ['class'],\n  });\n\n  return {\n    destroy() {\n      observer.disconnect();\n    },\n  };\n}\n\nexport type ValidationResultProperty =\n  | 'isInvalid'\n  | 'isInvalidByRequired'\n  | 'isValid'\n  | 'isInfo'\n  | 'isWarning';\nexport type ValidationResults = Record<ValidationResultProperty, boolean>;\n\nfunction containsClass(\n  hostElement: HTMLIxFormComponentElement<unknown>,\n  className: string,\n  includeChildren: boolean\n) {\n  return (\n    hostElement.classList.contains(`${className}`) ||\n    (includeChildren ? !!hostElement.querySelector(`.${className}`) : false)\n  );\n}\n\nexport function checkFieldClasses(\n  hostElement: HTMLIxFormComponentElement<unknown>,\n  includeChildren = false\n): ValidationResults {\n  return {\n    isInvalid: containsClass(hostElement, 'ix-invalid', includeChildren),\n    isInvalidByRequired: containsClass(\n      hostElement,\n      'ix-invalid--required',\n      includeChildren\n    ),\n    isValid: containsClass(hostElement, 'ix-valid', includeChildren),\n    isInfo: containsClass(hostElement, 'ix-info', includeChildren),\n    isWarning: containsClass(hostElement, 'ix-warning', includeChildren),\n  };\n}\n\nexport function HookValidationLifecycle(options?: {\n  includeChildren?: boolean;\n}) {\n  return (proto: IxComponent, methodName: string) => {\n    let checkIfRequiredFunction: (() => Promise<void>) | null;\n    let classMutationObserver: ClassMutationObserver | null;\n    const { componentWillLoad, disconnectedCallback, connectedCallback } =\n      proto;\n\n    proto.connectedCallback = function () {\n      const host = getElement(\n        this\n      ) as unknown as HTMLIxFormComponentElement<unknown>;\n\n      checkIfRequiredFunction = async () => {\n        const skipValidation = await shouldSuppressInternalValidation(host);\n        if (skipValidation) {\n          return;\n        }\n\n        if (host.hasValidValue && typeof host.hasValidValue === 'function') {\n          const hasValue = await host.hasValidValue();\n          const touched = await isTouched(host);\n\n          if (host.required) {\n            host.classList.toggle('ix-invalid--required', !hasValue && touched);\n          } else {\n            host.classList.remove('ix-invalid--required');\n          }\n        }\n\n        if (\n          host.getValidityState &&\n          typeof host.getValidityState === 'function'\n        ) {\n          const validityState = await host.getValidityState();\n\n          host.classList.toggle(\n            `ix-invalid--validity-patternMismatch`,\n            validityState.patternMismatch\n          );\n        }\n      };\n\n      host.addEventListener('checkedChange', checkIfRequiredFunction);\n      host.addEventListener('valueChange', checkIfRequiredFunction);\n      host.addEventListener('ixBlur', checkIfRequiredFunction);\n      setTimeout(checkIfRequiredFunction);\n      return connectedCallback?.call(this);\n    };\n\n    proto.componentWillLoad = function () {\n      const host = getElement(\n        this\n      ) as unknown as HTMLIxFormComponentElement<unknown>;\n      classMutationObserver = createClassMutationObserver(\n        host,\n        () => {\n          const result = checkFieldClasses(host, options?.includeChildren);\n          proto[methodName].call(this, result);\n        },\n        options\n      );\n      const result = checkFieldClasses(host, options?.includeChildren);\n      proto[methodName].call(this, result);\n      return componentWillLoad?.call(this);\n    };\n\n    proto.disconnectedCallback = function () {\n      const host = getElement(this);\n\n      if (host && classMutationObserver) {\n        classMutationObserver.destroy();\n        classMutationObserver = null;\n      }\n\n      if (host && checkIfRequiredFunction) {\n        host.removeEventListener('checkedChange', checkIfRequiredFunction);\n        host.removeEventListener('valueChange', checkIfRequiredFunction);\n        host.removeEventListener('ixBlur', checkIfRequiredFunction);\n        checkIfRequiredFunction = null;\n      }\n\n      return disconnectedCallback?.call(this);\n    };\n  };\n}\n"],"names":["HelperText","constructor","hostRef","validationResults","isInfo","isInvalid","isValid","isWarning","isInvalidByRequired","observer","MutationObserver","this","checkForRequired","connectedCallback","observe","window","document","childList","subtree","disconnectedCallback","disconnect","componentWillRender","htmlFor","forElement","getElementById","classObserver","destroy","createClassMutationObserver","checkFieldClasses","render","h","Host","key","renderHelperText","Object","assign","helperText","invalidText","validText","infoText","warningText","hasAnyText","_ref","_ref2","undefined","textColor","class","name","iconError","size","iconWarning","iconInfo","iconSuccess","async","shouldSuppressInternalValidation","host","getAssociatedFormElement","form","noValidate","element","callback","options","includeChildren","attributes","attributeFilter","containsClass","hostElement","className","classList","contains","concat","querySelector","arguments","length","HookValidationLifecycle","proto","methodName","checkIfRequiredFunction","classMutationObserver","componentWillLoad","getElement","hasValidValue","hasValue","touched","isTouched","required","toggle","remove","getValidityState","validityState","patternMismatch","addEventListener","setTimeout","call","result","removeEventListener"],"sourceRoot":""}