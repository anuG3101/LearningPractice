{"version":3,"file":"static/js/8717.30f77e4a.chunk.js","mappings":"kKAAA,MCiCaA,EAAK,MALlBC,WAAAA,CAAAC,I,4DASU,KAAIC,KAAc,OAUlB,KAAcC,eAAG,IAKjB,KAASC,WAAG,EAiBX,KAAQC,SAAG,EACX,KAAOC,SAAG,CAmIpB,CA/HSC,OAAAA,GACN,GAAIC,KAAKC,KACP,OACEC,EAAAA,EAAAA,GAAA,yBACc,aACZC,KAAMH,KAAKC,KACXG,MAAOJ,KAAKK,UACZC,KAAK,OAKX,OAAQN,KAAKN,MACX,IAAK,OACH,OACEQ,EAAAA,EAAAA,GACc,sCACZC,KAAMI,EAAAA,EACND,KAAK,KACLF,MAAM,mBAIZ,IAAK,QACH,OACEF,EAAAA,EAAAA,GACc,sCACZC,KAAMK,EAAAA,EACNF,KAAK,KACLF,MAAM,gBAIZ,IAAK,UACH,OACEF,EAAAA,EAAAA,GACc,sCACZC,KAAMM,EAAAA,EACNH,KAAK,KACLF,MAAM,kBAIZ,IAAK,UACH,OACEF,EAAAA,EAAAA,GACc,sCACZC,KAAMO,EAAAA,EACNJ,KAAK,KACLF,MAAM,kBAIZ,QACE,MAAO,G,CAILO,KAAAA,GACFX,KAAKY,aACPZ,KAAKY,YAAYC,UAAUC,IAAI,oBAEjCC,YAAW,KACTf,KAAKgB,WAAWC,SACf,I,CAGLC,MAAAA,GACE,IAAIC,EAA2C,CAAC,EAEhD,MAAMC,EAAmB,CAAC,sBAS1B,OAPAD,EAAmB,CACjBE,kBAAmB,GAAFC,OAAKtB,KAAKL,eAAc,MACzC4B,mBAAoBvB,KAAKF,QAAU,SAAW,WAGhDsB,EAAiBI,KAAK,iCAGpBtB,EAAAA,EAAAA,GAACuB,EAAAA,EAAK,CAAAC,IAAA,2CAAAC,MAAM,sCACVzB,EAAAA,EAAAA,GAAA,OAAAwB,IAAA,2CACEC,MAAM,aACNC,eAAgBA,KACd5B,KAAKF,SAAU,GAEjB+B,eAAgBA,KACd7B,KAAKF,SAAU,IAGhBE,KAAKN,MAAQM,KAAKC,MACjBC,EAAAA,EAAAA,GAAK,OAAAyB,MAAM,cAAc3B,KAAKD,WAC5B,MACJG,EAAAA,EAAAA,GAAK,OAAAwB,IAAA,2CAAAC,MAAM,iBACR3B,KAAK8B,YACJ5B,EAAAA,EAAAA,GAAA,OAAKyB,MAAM,eAAe3B,KAAK8B,YAC7B,MACJ5B,EAAAA,EAAAA,GAAK,OAAAwB,IAAA,2CAAAC,MAAM,kBACTzB,EAAAA,EAAAA,GAAA,QAAAwB,IAAA,gDAGJxB,EAAAA,EAAAA,GAAK,OAAAwB,IAAA,2CAAAC,MAAM,gBACTzB,EAAAA,EAAAA,GACE,kBAAAwB,IAAA,2CAAAzB,KAAM8B,EAAAA,EACNzB,KAAK,KACL0B,OACA,EAAAC,QAASA,IAAMjC,KAAKgB,WAAWC,WAIpCjB,KAAKJ,WACJM,EAAAA,EAAAA,GAAA,OACEyB,MAAOP,EAAiBc,KAAK,KAC7BC,MAAOhB,EACPiB,eAAgBA,KACdpC,KAAKW,SAEP0B,gBAAiBA,KACO,IAAlBrC,KAAKH,UACPG,KAAKW,WAIT,K,iDDrMK,k3E","sources":["../node_modules/@siemens/ix/dist/esm/src/components/toast/toast.scss?tag=ix-toast&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/toast/toast.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n@import 'common-variables';\n@import 'mixins/hover';\n@import 'mixins/text-truncation';\n@import 'mixins/shadow-dom/component';\n@import 'legacy/mixins/fonts';\n\n:host {\n  @include ix-component;\n\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  min-width: 17.5rem;\n  max-width: 17.5rem;\n  min-height: 3.5rem;\n\n  pointer-events: all;\n\n  background-color: var(--theme-toast--background);\n  border: var(--theme-toast--border-thickness) solid\n    var(--theme-toast--border-color);\n  border-radius: var(--theme-toast--border-radius);\n  box-shadow: var(--theme-toast--box-shadow);\n\n  --animate-duration: #{$medium-time};\n\n  .toast-body {\n    display: flex;\n    position: relative;\n    min-height: 3.5rem;\n    width: 100%;\n    flex-grow: 1;\n    padding: 0.75rem;\n\n    .toast-icon {\n      display: flex;\n      align-items: flex-start;\n      margin-right: $default-space;\n    }\n\n    .toast-content {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      min-width: 0;\n      width: 100%;\n\n      .toast-title {\n        @include text-default-title-single;\n        margin: 0.25rem 0px;\n      }\n\n      .toast-message {\n        min-width: 0;\n\n        @include text-default;\n      }\n    }\n\n    .toast-icon + .toast-content {\n      max-width: 10.25rem;\n    }\n  }\n\n  .toast-close {\n    display: flex;\n    position: relative;\n    pointer-events: all;\n    margin-left: auto;\n    margin-right: 0px;\n  }\n\n  .toast-progress-bar {\n    position: absolute;\n    bottom: 0;\n    height: $tiny-space;\n    width: 100%;\n    background-color: var(--theme-toast-timer-value--background);\n    transform-origin: left;\n\n    &--animated {\n      animation: trackProgress linear 1 forwards;\n    }\n  }\n\n  @keyframes trackProgress {\n    0% {\n      transform: scaleX(1);\n    }\n    100% {\n      transform: scaleX(0);\n    }\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n  State,\n} from '@stencil/core';\nimport { ToastType } from './toast-utils';\nimport {\n  iconClose,\n  iconError,\n  iconInfo,\n  iconSuccess,\n  iconWarning,\n} from '@siemens/ix-icons/icons';\n\n@Component({\n  tag: 'ix-toast',\n  styleUrl: 'toast.scss',\n  shadow: true,\n})\nexport class Toast {\n  /**\n   * Toast type\n   */\n  @Prop() type: ToastType = 'info';\n\n  /**\n   * Toast title\n   */\n  @Prop() toastTitle?: string;\n\n  /**\n   * Autoclose title after delay\n   */\n  @Prop() autoCloseDelay = 5000;\n\n  /**\n   * Autoclose behavior\n   */\n  @Prop() autoClose = true;\n\n  /**\n   * Icon of toast\n   */\n  @Prop() icon?: string;\n\n  /**\n   * Icon color of toast\n   */\n  @Prop() iconColor?: string;\n\n  /**\n   * Toast closed\n   */\n  @Event() closeToast!: EventEmitter;\n\n  @State() progress = 0;\n  @State() touched = false;\n\n  @Element() hostElement!: HTMLIxToastElement;\n\n  private getIcon() {\n    if (this.icon) {\n      return (\n        <ix-icon\n          data-testid=\"toast-icon\"\n          name={this.icon}\n          color={this.iconColor}\n          size=\"24\"\n        />\n      );\n    }\n\n    switch (this.type) {\n      case 'info':\n        return (\n          <ix-icon\n            data-testid=\"toast-icon\"\n            name={iconInfo}\n            size=\"24\"\n            color=\"color-std-text\"\n          />\n        );\n\n      case 'error':\n        return (\n          <ix-icon\n            data-testid=\"toast-icon\"\n            name={iconError}\n            size=\"24\"\n            color=\"color-alarm\"\n          />\n        );\n\n      case 'success':\n        return (\n          <ix-icon\n            data-testid=\"toast-icon\"\n            name={iconSuccess}\n            size=\"24\"\n            color=\"color-success\"\n          />\n        );\n\n      case 'warning':\n        return (\n          <ix-icon\n            data-testid=\"toast-icon\"\n            name={iconWarning}\n            size=\"24\"\n            color=\"color-warning\"\n          />\n        );\n\n      default:\n        return '';\n    }\n  }\n\n  private close() {\n    if (this.hostElement) {\n      this.hostElement.classList.add('animate__fadeOut');\n    }\n    setTimeout(() => {\n      this.closeToast.emit();\n    }, 250);\n  }\n\n  render() {\n    let progressBarStyle: Record<string, string> = {};\n\n    const progressBarClass = ['toast-progress-bar'];\n\n    progressBarStyle = {\n      animationDuration: `${this.autoCloseDelay}ms`,\n      animationPlayState: this.touched ? 'paused' : 'running',\n    };\n\n    progressBarClass.push('toast-progress-bar--animated');\n\n    return (\n      <Host class=\"animate__animated animate__fadeIn\">\n        <div\n          class=\"toast-body\"\n          onPointerLeave={() => {\n            this.touched = false;\n          }}\n          onPointerEnter={() => {\n            this.touched = true;\n          }}\n        >\n          {this.type || this.icon ? (\n            <div class=\"toast-icon\">{this.getIcon()}</div>\n          ) : null}\n          <div class=\"toast-content\">\n            {this.toastTitle ? (\n              <div class=\"toast-title\">{this.toastTitle}</div>\n            ) : null}\n            <div class=\"toast-message\">\n              <slot></slot>\n            </div>\n          </div>\n          <div class=\"toast-close\">\n            <ix-icon-button\n              icon={iconClose}\n              size=\"24\"\n              ghost\n              onClick={() => this.closeToast.emit()}\n            />\n          </div>\n        </div>\n        {this.autoClose ? (\n          <div\n            class={progressBarClass.join(' ')}\n            style={progressBarStyle}\n            onAnimationEnd={() => {\n              this.close();\n            }}\n            onTransitionEnd={() => {\n              if (this.progress === 0) {\n                this.close();\n              }\n            }}\n          ></div>\n        ) : null}\n      </Host>\n    );\n  }\n}\n"],"names":["Toast","constructor","hostRef","type","autoCloseDelay","autoClose","progress","touched","getIcon","this","icon","h","name","color","iconColor","size","iconInfo","iconError","iconSuccess","iconWarning","close","hostElement","classList","add","setTimeout","closeToast","emit","render","progressBarStyle","progressBarClass","animationDuration","concat","animationPlayState","push","Host","key","class","onPointerLeave","onPointerEnter","toastTitle","iconClose","ghost","onClick","join","style","onAnimationEnd","onTransitionEnd"],"sourceRoot":""}