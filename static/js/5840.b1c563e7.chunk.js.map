{"version":3,"file":"static/js/5840.b1c563e7.chunk.js","mappings":"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","sources":["../node_modules/@siemens/ix/dist/esm/src/components/time-picker/time-picker.scss?tag=ix-time-picker&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/time-picker/time-picker.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n@import 'common-variables';\n@import 'mixins/shadow-dom/component';\n@import 'mixins/input';\n\n@include form;\n\n:host {\n  @include ix-component;\n  @import 'legacy/components/forms';\n\n  display: block;\n  position: relative;\n  width: 21rem;\n\n  @media (max-width: 576px) {\n    .clock {\n      padding: 1.5rem 0 1rem 0;\n    }\n\n    .header {\n      height: $medium-control-height !important;\n    }\n  }\n\n  @media (min-width: 576px) {\n    .clock {\n      padding: 4.25rem 0 3.75rem 0;\n    }\n\n    .header {\n      height: $large-control-height !important;\n    }\n  }\n\n  .header {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: $large-control-height;\n  }\n\n  .flex {\n    display: flex;\n  }\n\n  .clock {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  input,\n  .time-reference {\n    width: 2.625rem;\n    height: $large-space;\n    text-align: center;\n    margin-top: 0.25rem;\n    margin-bottom: 0.25rem;\n\n    /* Chrome, Safari, Edge, Opera */\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0 0.3125rem;\n    }\n\n    /* Firefox */\n    &[type='number'] {\n      -moz-appearance: textfield;\n    }\n  }\n\n  .ix-form-control[type='number'] {\n    text-align: center;\n  }\n\n  .columns {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-around;\n  }\n\n  .column-seperator {\n    display: flex;\n    align-items: center;\n    margin: 0 $tiny-space;\n  }\n\n  .button {\n    display: flex;\n    justify-content: flex-end;\n\n    &.standalone {\n      padding-top: 0.5rem;\n    }\n  }\n\n  .default-space {\n    margin-left: $default-space;\n  }\n\n  .text-align {\n    text-align: center;\n  }\n\n  .hidden {\n    display: none;\n  }\n\n  .time-reference {\n    margin-top: 0.5rem;\n    margin-bottom: 0.5rem;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\nimport { DateTime } from 'luxon';\nimport { DateTimeCardCorners } from '../date-time-card/date-time-card';\nimport {\n  iconChevronDown,\n  iconChevronDownSmall,\n  iconChevronUp,\n  iconChevronUpSmall,\n} from '@siemens/ix-icons/icons';\n\nexport type TimePickerCorners = DateTimeCardCorners;\n\ninterface TimePickerDescriptor {\n  unit: 'hour' | 'minute' | 'second';\n  placeholder: string;\n  hidden: boolean;\n}\n\ninterface TimeOutputFormat {\n  hour: string;\n  minute: string;\n  second: string;\n}\n\n@Component({\n  tag: 'ix-time-picker',\n  styleUrl: 'time-picker.scss',\n  shadow: true,\n})\nexport class TimePicker {\n  /**\n   * Format of time string\n   * See {@link \"https://moment.github.io/luxon/#/formatting?id=table-of-tokens\"} for all available tokens.\n   */\n  @Prop() format: string = 'TT';\n\n  /**\n   * Corner style\n   */\n  @Prop() corners: TimePickerCorners = 'rounded';\n\n  /**\n   * Controls the visual presentation and styling of the component when it is displayed as a standalone element\n   */\n  @Prop() standaloneAppearance: boolean = true;\n\n  /**\n   * Show hour input\n   */\n  @Prop() showHour = true;\n\n  /**\n   * Show minutes input\n   */\n  @Prop() showMinutes = true;\n\n  /**\n   * Show seconds input\n   */\n  @Prop() showSeconds = true;\n\n  /**\n   * Select time with format string\n   * Format has to match the `format` property.\n   */\n  @Prop() time: string = DateTime.now().toFormat(this.format);\n\n  @Watch('time')\n  watchTimePropHandler(newValue: string) {\n    this._time = DateTime.fromFormat(newValue, this.format);\n    if (!this._time.isValid) {\n      throw new Error('Format is not supported or not correct');\n    }\n  }\n\n  /**\n   * Set time reference\n   */\n  @Prop() timeReference: 'AM' | 'PM' | undefined;\n\n  /**\n   * Text of date select button\n   */\n  @Prop() textSelectTime = 'Done';\n\n  /**\n   * Text for top label\n   */\n  @Prop() textTime: string = 'Time';\n\n  /**\n   * Time event\n   */\n  @Event() timeSelect!: EventEmitter<string>;\n\n  /**\n   * Time change event\n   */\n  @Event() timeChange!: EventEmitter<string>;\n\n  @State() private _time?: DateTime;\n  @State() private _timeRef?: 'AM' | 'PM';\n  @State() private _formattedTime?: TimeOutputFormat;\n\n  componentWillLoad() {\n    this._time = DateTime.fromFormat(this.time, this.format);\n\n    if (!this._time.isValid) {\n      console.error(\n        `Invalid time format. The configured format does not match the format of the passed time. ${this._time.invalidReason}: ${this._time.invalidExplanation}`\n      );\n      return;\n    }\n\n    this._timeRef = this.format.includes('a')\n      ? (DateTime.fromFormat(this.time, this.format).toFormat('a') as\n          | 'AM'\n          | 'PM')\n      : undefined;\n    this.formatTime();\n  }\n\n  @Watch('_time')\n  formatTime() {\n    if (!this._time) {\n      return;\n    }\n\n    const [hour, minute, second] = this._time\n      .toFormat(this.format)\n      .split(' ')[0]\n      .split(':');\n\n    this._formattedTime = {\n      hour: hour,\n      minute: minute,\n      second: second,\n    };\n  }\n\n  @Watch('_time')\n  onInternalTimeChange() {\n    this.timeChange.emit(this._time?.toFormat(this.format));\n    if (this._timeRef) this._timeRef = this._time?.toFormat('a') as 'AM' | 'PM';\n  }\n\n  timeUpdate(unit: 'hour' | 'minute' | 'second', value: number): number {\n    let maxValue = DateTime.now().endOf('day').get(unit);\n\n    if (this._timeRef === 'PM' && unit === 'hour') value += 12;\n    if (this._timeRef === 'AM' && unit === 'hour') maxValue = 12;\n\n    if (value > maxValue) {\n      value = maxValue;\n    } else if (value < 0) {\n      value = 0;\n    }\n\n    this._time = this._time?.set({\n      [unit]: value,\n    });\n    return value;\n  }\n\n  changeTimeReference() {\n    this._timeRef = this._timeRef === 'AM' ? 'PM' : 'AM';\n\n    if (!this._time?.toFormat('a').includes(this._timeRef)) {\n      this._time = this._time?.plus({\n        hour: 12,\n      });\n    }\n  }\n\n  /**\n   * Get the current time based on the wanted format\n   */\n  @Method()\n  async getCurrentTime() {\n    return this._time?.toFormat(this.format);\n  }\n\n  render() {\n    let timepickerInformation: TimePickerDescriptor[] = [\n      {\n        unit: 'hour',\n        placeholder: 'HH',\n        hidden: !this.showHour,\n      },\n      {\n        unit: 'minute',\n        placeholder: 'MM',\n        hidden: !this.showMinutes,\n      },\n      {\n        unit: 'second',\n        placeholder: 'SS',\n        hidden: !this.showSeconds,\n      },\n    ];\n\n    timepickerInformation = timepickerInformation.filter(\n      (item) => !item.hidden\n    );\n\n    return (\n      <Host>\n        <ix-date-time-card\n          standaloneAppearance={this.standaloneAppearance}\n          corners={this.corners}\n        >\n          <div class=\"header\" slot=\"header\">\n            <ix-typography format=\"h5\">{this.textTime || 'Time'}</ix-typography>\n          </div>\n          <div class=\"clock\">\n            {timepickerInformation.map((descriptor, index: number) => (\n              <div class=\"flex\">\n                <div class={{ columns: true, hidden: descriptor.hidden }}>\n                  <ix-icon-button\n                    size=\"16\"\n                    onClick={() =>\n                      (this._time = this._time?.plus({\n                        [descriptor.unit]: 1,\n                      }))\n                    }\n                    ghost\n                    icon={iconChevronUpSmall}\n                    variant=\"primary\"\n                    class=\"arrows\"\n                  ></ix-icon-button>\n\n                  <input\n                    class=\"ix-form-control\"\n                    name={descriptor.unit}\n                    type=\"number\"\n                    placeholder={descriptor.placeholder}\n                    value={\n                      this._formattedTime\n                        ? this._formattedTime[descriptor.unit]\n                        : ''\n                    }\n                    onKeyDown={(e) => {\n                      if (e.key !== 'ArrowUp' && e.key !== 'ArrowDown') return;\n\n                      const value = e.key === 'ArrowUp' ? 1 : -1;\n                      this._time = this._time?.plus({\n                        [descriptor.unit]: value,\n                      });\n                      e.preventDefault();\n                    }}\n                    onChange={(e: any) => {\n                      let inputElement = e.target as HTMLInputElement;\n                      inputElement.value = this.timeUpdate(\n                        descriptor.unit,\n                        +inputElement.value\n                      ).toString();\n                    }}\n                  ></input>\n\n                  <ix-icon-button\n                    size=\"16\"\n                    onClick={() =>\n                      (this._time = this._time?.minus({\n                        [descriptor.unit]: 1,\n                      }))\n                    }\n                    ghost\n                    icon={iconChevronDownSmall}\n                    variant=\"primary\"\n                    class=\"arrows\"\n                  ></ix-icon-button>\n                </div>\n\n                {index !== timepickerInformation.length - 1 && (\n                  <div\n                    class={{\n                      'column-seperator': true,\n                      hidden: descriptor.hidden,\n                    }}\n                  >\n                    :\n                  </div>\n                )}\n              </div>\n            ))}\n\n            <div\n              class={{\n                columns: true,\n                'default-space': true,\n                hidden: this._timeRef === undefined,\n              }}\n            >\n              <ix-icon-button\n                size=\"16\"\n                onClick={() => this.changeTimeReference()}\n                ghost\n                icon={iconChevronUp}\n                variant=\"primary\"\n                class=\"arrows\"\n              ></ix-icon-button>\n              <div class=\"time-reference\">{this._timeRef}</div>\n              <ix-icon-button\n                size=\"16\"\n                onClick={() => this.changeTimeReference()}\n                ghost\n                icon={iconChevronDown}\n                variant=\"primary\"\n                class=\"arrows\"\n              ></ix-icon-button>\n            </div>\n          </div>\n          <div\n            class={{\n              button: true,\n              hidden: !this.standaloneAppearance,\n              standalone: true,\n            }}\n          >\n            <ix-button\n              onClick={() => {\n                this.timeSelect.emit(this._time?.toFormat(this.format));\n              }}\n            >\n              {this.textSelectTime}\n            </ix-button>\n          </div>\n        </ix-date-time-card>\n      </Host>\n    );\n  }\n}\n"],"names":["TimePicker","constructor","hostRef","format","corners","standaloneAppearance","showHour","showMinutes","showSeconds","time","DateTime","now","toFormat","this","textSelectTime","textTime","watchTimePropHandler","newValue","_time","fromFormat","isValid","Error","componentWillLoad","_timeRef","includes","undefined","formatTime","console","error","concat","invalidReason","invalidExplanation","hour","minute","second","split","_formattedTime","onInternalTimeChange","timeChange","emit","_a","_b","timeUpdate","unit","value","maxValue","endOf","get","set","changeTimeReference","plus","getCurrentTime","render","timepickerInformation","placeholder","hidden","filter","item","h","Host","key","class","slot","map","descriptor","index","columns","size","onClick","ghost","icon","iconChevronUpSmall","variant","name","type","onKeyDown","e","preventDefault","onChange","inputElement","target","toString","minus","iconChevronDownSmall","length","iconChevronUp","iconChevronDown","button","standalone","timeSelect"],"sourceRoot":""}