{"version":3,"file":"static/js/8159.81f4af67.chunk.js","mappings":"4GAgBM,SAAUA,EACdC,GAEA,IAAIC,EAEAC,EADAC,EAAiB,IAAIC,SAAYC,GAASJ,EAAUI,IAGxD,MAAMC,EAAkBC,SACVC,IAARD,IAGJL,EAAWI,EAA8BJ,QAAUK,EAC7B,OAAtBP,QAAsB,IAAtBA,GAAAA,EAAyBO,GAClB,OAAPN,QAAO,IAAPA,GAAAA,EAAUM,KAUZ,OAPAD,EAAeJ,QAAUA,EAEzBI,EAAeG,eAAiBC,gBACxBP,EACCD,GAGFI,CACT,C,uFCxCA,MCkBaK,EAAI,MALjBC,WAAAA,CAAAC,I,eAW2B,KAAOC,QAQjB,UAKP,KAAOC,SAAG,EAoBV,KAASC,WAAG,EAOZ,KAAWC,aAAqB,EAE/B,KAAQC,UAAG,EAEH,KAAmBC,qBAAGpB,EAAAA,EAAAA,IAwFxC,CAtFCqB,iBAAAA,GACEC,KAAKC,yB,CAGCA,uBAAAA,GACN,MAAMC,EAAcF,KAAKG,YAAYC,SAASC,OAAS,EACjDC,IAAmBN,KAAKG,YAAYI,YAE1CP,KAAKH,UAAYK,IAAgBI,C,CAG3BE,UAAAA,G,MACN,IAAKR,KAAKJ,cAAgBI,KAAKG,YAAYM,aAAa,gBACtD,OAAO,KAGT,MAAMC,EACwB,kBAArBV,KAAKJ,aAA4BI,KAAKJ,YAAYe,OACrDX,KAAKJ,YACuB,QAA5BgB,EAAAZ,KAAKG,YAAYI,mBAAW,IAAAK,OAAA,EAAAA,EAAED,OAEpC,OACEE,EAAAA,EAAAA,GAAA,cAAYC,IAAKd,KAAKF,oBAAoBV,kBACvCsB,E,CAKPK,MAAAA,GACE,IAAIC,EAAc,CAAC,EAQnB,MANqB,WAAjBhB,KAAKP,UACPuB,EAAc,CACZC,MAAOjB,KAAKkB,UACZ,CAAClB,KAAKN,QAAU,cAAgB,mBAAoBM,KAAKmB,cAI3DN,EAAAA,EAAAA,GAACO,EAAAA,EACC,CAAAC,IAAA,2CAAAC,MACmB,WAAjBtB,KAAKP,QACD,CACE,yBAA0BO,KAAKkB,WAEjC,CAAC,EAEPK,MAAO,CACL,aAAcvB,KAAKL,aAGrBkB,EAAAA,EAAAA,GACE,OAAAQ,IAAA,2CAAAnC,IAAKc,KAAKF,oBACVwB,MAAYE,OAAAC,OAAA,GAAAT,GACZO,MAAO,CACLG,WAAW,EACXhC,QAASM,KAAKN,QACdiC,UAAU,EACVC,MAAwB,UAAjB5B,KAAKP,QACZoC,SAA2B,aAAjB7B,KAAKP,QACfqC,KAAuB,SAAjB9B,KAAKP,QACXsC,QAA0B,YAAjB/B,KAAKP,QACduC,QAA0B,YAAjBhC,KAAKP,QACdwC,QAA0B,YAAjBjC,KAAKP,QACdyC,QAA0B,YAAjBlC,KAAKP,QACd0C,OAAyB,WAAjBnC,KAAKP,QACb2C,UAAU,EACVC,OAAQrC,KAAKqC,KACb,YAAarC,KAAKH,YAGpBgB,EAAAA,EAAAA,GAAA,WAAAQ,IAAA,2CACEE,MAAO,CACL,aAAa,EACbe,YAAsBnD,IAAda,KAAKqC,MAAoC,KAAdrC,KAAKqC,MAE1CE,KAAMvC,KAAKqC,KACXG,KAAM,QAER3B,EAAAA,EAAAA,GAAM,QAAAQ,IAAA,2CAAAE,MAAM,mBACVV,EAAAA,EAAAA,GAAM,QAAAQ,IAAA,2CAAAoB,aAAcA,IAAMzC,KAAKC,8BAGlCD,KAAKQ,a,iDDxJE,qvK","sources":["../node_modules/@siemens/ix/dist/esm/src/components/utils/make-ref.ts","../node_modules/@siemens/ix/dist/esm/src/components/pill/pill.scss?tag=ix-pill&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/pill/pill.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport type MakeRef<T> = {\n  (ref: T | undefined | null): void;\n  current: T | null;\n  waitForCurrent(): Promise<T>;\n};\n\ntype Resolve<T> = (value: T) => void;\n\nexport function makeRef<T>(\n  currentChangedCallback?: (element: T) => void\n): MakeRef<T> {\n  let resolve: Resolve<T> | undefined = undefined;\n  let currentPromise = new Promise<T>((res) => (resolve = res));\n  let current: T | undefined = undefined;\n\n  const setRefFunction = (ref: T | undefined) => {\n    if (ref === undefined) {\n      return;\n    }\n    current = (setRefFunction as MakeRef<T>).current = ref;\n    currentChangedCallback?.(ref);\n    resolve?.(ref);\n  };\n\n  setRefFunction.current = current as T | null;\n\n  setRefFunction.waitForCurrent = async () => {\n    await currentPromise;\n    return current;\n  };\n\n  return setRefFunction as MakeRef<T>;\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n@import 'mixins/shadow-dom/component';\n\n@import './../chip/chip-mixin';\n@import 'common-variables';\n@import 'mixins/text-truncation';\n\n:host {\n  @include ix-component;\n  display: inline-block;\n  position: relative;\n  height: 1.25rem;\n  max-height: 1.25rem;\n  margin-left: 0.25rem;\n}\n\n@include chip-container(false);\n\n:host {\n  .container {\n    height: 100%;\n    justify-content: center;\n\n    .with-icon {\n      margin-right: 0;\n    }\n\n    &.outline {\n      &.icon {\n        padding-left: 0.4375rem;\n        padding-right: 0.4375rem;\n      }\n    }\n\n    &:not(.outline) {\n      &.icon {\n        padding-left: 0.5rem;\n        padding-right: 0.5rem;\n      }\n    }\n  }\n\n  .with-gap {\n    gap: 0.25rem;\n  }\n}\n\n:host(.align-left) {\n  .container {\n    justify-content: flex-start;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Component, Element, h, Host, Prop, State } from '@stencil/core';\nimport { IxComponent } from '../utils/internal';\nimport { makeRef } from '../utils/make-ref';\n\n@Component({\n  tag: 'ix-pill',\n  styleUrl: 'pill.scss',\n  shadow: true,\n})\nexport class Pill implements IxComponent {\n  @Element() hostElement!: HTMLIxPillElement;\n\n  /**\n   * Pill variant\n   */\n  @Prop({ reflect: true }) variant:\n    | 'primary'\n    | 'alarm'\n    | 'critical'\n    | 'warning'\n    | 'info'\n    | 'neutral'\n    | 'success'\n    | 'custom' = 'primary';\n\n  /**\n   * Show pill as outline\n   */\n  @Prop() outline = false;\n\n  /**\n   * Show icon\n   */\n  @Prop() icon?: string;\n\n  /**\n   * Custom color for pill. Only working for `variant='custom'`\n   */\n  @Prop() background: string | undefined;\n\n  /**\n   * Custom font color for pill. Only working for `variant='custom'`\n   */\n  @Prop() pillColor: string | undefined;\n\n  /**\n   * Align pill content left\n   */\n  @Prop() alignLeft = false;\n\n  /**\n   * Display a tooltip. By default, no tooltip will be displayed.\n   * Add the attribute to display the text content of the component as a tooltip or use a string to display a custom text.\n   * @since 3.0.0\n   */\n  @Prop() tooltipText: string | boolean = false;\n\n  @State() iconOnly = false;\n\n  private readonly containerElementRef = makeRef<HTMLElement>();\n\n  componentWillLoad() {\n    this.checkIfContentAvailable();\n  }\n\n  private checkIfContentAvailable() {\n    const hasChildren = this.hostElement.children.length > 0;\n    const hasTextContent = !!this.hostElement.textContent;\n\n    this.iconOnly = !hasChildren && !hasTextContent;\n  }\n\n  private getTooltip() {\n    if (!this.tooltipText && !this.hostElement.hasAttribute('tooltip-text')) {\n      return null;\n    }\n\n    const text =\n      typeof this.tooltipText === 'string' && this.tooltipText.trim()\n        ? this.tooltipText\n        : this.hostElement.textContent?.trim();\n\n    return (\n      <ix-tooltip for={this.containerElementRef.waitForCurrent()}>\n        {text}\n      </ix-tooltip>\n    );\n  }\n\n  render() {\n    let customStyle = {};\n\n    if (this.variant === 'custom') {\n      customStyle = {\n        color: this.pillColor,\n        [this.outline ? 'borderColor' : 'backgroundColor']: this.background,\n      };\n    }\n    return (\n      <Host\n        style={\n          this.variant === 'custom'\n            ? {\n                '--ix-icon-button-color': this.pillColor,\n              }\n            : {}\n        }\n        class={{\n          'align-left': this.alignLeft,\n        }}\n      >\n        <div\n          ref={this.containerElementRef}\n          style={{ ...customStyle }}\n          class={{\n            container: true,\n            outline: this.outline,\n            inactive: false,\n            alarm: this.variant === 'alarm',\n            critical: this.variant === 'critical',\n            info: this.variant === 'info',\n            neutral: this.variant === 'neutral',\n            primary: this.variant === 'primary',\n            success: this.variant === 'success',\n            warning: this.variant === 'warning',\n            custom: this.variant === 'custom',\n            closable: false,\n            icon: !!this.icon,\n            'with-gap': !this.iconOnly,\n          }}\n        >\n          <ix-icon\n            class={{\n              'with-icon': true,\n              hidden: this.icon === undefined || this.icon === '',\n            }}\n            name={this.icon}\n            size={'16'}\n          />\n          <span class=\"slot-container\">\n            <slot onSlotchange={() => this.checkIfContentAvailable()}></slot>\n          </span>\n        </div>\n        {this.getTooltip()}\n      </Host>\n    );\n  }\n}\n"],"names":["makeRef","currentChangedCallback","resolve","current","currentPromise","Promise","res","setRefFunction","ref","undefined","waitForCurrent","async","Pill","constructor","hostRef","variant","outline","alignLeft","tooltipText","iconOnly","containerElementRef","componentWillLoad","this","checkIfContentAvailable","hasChildren","hostElement","children","length","hasTextContent","textContent","getTooltip","hasAttribute","text","trim","_a","h","for","render","customStyle","color","pillColor","background","Host","key","style","class","Object","assign","container","inactive","alarm","critical","info","neutral","primary","success","warning","custom","closable","icon","hidden","name","size","onSlotchange"],"sourceRoot":""}