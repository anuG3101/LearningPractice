{"version":3,"file":"static/js/107.4e69a2f0.chunk.js","mappings":"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","sources":["../node_modules/@siemens/ix/dist/esm/src/components/checkbox-group/checkbox-group.tsx","../node_modules/@siemens/ix/dist/esm/src/components/checkbox-group/checkbox-group.scss?tag=ix-checkbox-group&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/utils/make-ref.ts","../node_modules/@siemens/ix/dist/esm/src/components/utils/input/validation.ts"],"sourcesContent":["import {\n  Component,\n  Element,\n  Host,\n  Method,\n  Prop,\n  State,\n  h,\n} from '@stencil/core';\nimport {\n  FieldWrapperInterface,\n  HookValidationLifecycle,\n  IxFormValidationState,\n  ValidationResults,\n} from '../utils/input';\nimport { IxComponent } from '../utils/internal';\nimport { makeRef } from '../utils/make-ref';\n\n/**\n * @form-ready\n */\n@Component({\n  tag: 'ix-checkbox-group',\n  styleUrl: 'checkbox-group.scss',\n  shadow: true,\n})\nexport class CheckboxGroup\n  implements FieldWrapperInterface, IxFormValidationState, IxComponent\n{\n  @Element() hostElement!: HTMLIxCheckboxGroupElement;\n  /**\n   * Optional helper text displayed below the checkbox group\n   */\n  @Prop() helperText?: string;\n\n  /**\n   * Label for the checkbox group\n   */\n  @Prop() label?: string;\n\n  /**\n   * Alignment of the checkboxes in the group\n   */\n  @Prop() direction: 'row' | 'column' = 'column';\n\n  /**\n   * Error text for the checkbox group\n   */\n  @Prop() invalidText?: string;\n\n  /**\n   * Info text for the checkbox group\n   */\n  @Prop() infoText?: string;\n  /**\n   * Valid text for the checkbox group\n   */\n  @Prop() validText?: string;\n  /**\n   * Warning text for the checkbox group\n   */\n  @Prop() warningText?: string;\n\n  /**\n   * Show helper, info, warning, error and valid text as tooltip\n   */\n  @Prop() showTextAsTooltip = false;\n\n  /**\n   * @internal\n   */\n  @Prop() required = false;\n\n  @State() isInvalid = false;\n  @State() isInfo = false;\n  @State() isValid = false;\n  @State() isWarning = false;\n\n  private touched = false;\n  private readonly groupRef = makeRef<HTMLIxCheckboxGroupElement>();\n\n  get checkboxElements(): HTMLIxCheckboxElement[] {\n    return Array.from(this.hostElement.querySelectorAll('ix-checkbox'));\n  }\n\n  private readonly observer = new MutationObserver(() => {\n    this.checkForRequiredCheckbox();\n  });\n\n  private checkForRequiredCheckbox() {\n    this.required = this.checkboxElements.some((checkbox) => checkbox.required);\n  }\n\n  connectedCallback(): void {\n    this.observer.observe(this.hostElement, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['checked', 'required'],\n    });\n  }\n\n  componentWillLoad(): void | Promise<void> {\n    this.checkForRequiredCheckbox();\n  }\n\n  disconnectedCallback(): void {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  }\n\n  @HookValidationLifecycle({\n    includeChildren: true,\n  })\n  onClassFieldUpdate({\n    isInvalid,\n    isInvalidByRequired,\n    isInfo,\n    isValid,\n    isWarning,\n  }: ValidationResults) {\n    this.isInvalid = isInvalid || isInvalidByRequired;\n    this.isInfo = isInfo;\n    this.isValid = isValid;\n    this.isWarning = isWarning;\n  }\n\n  /**\n   * @internal\n   */\n  @Method()\n  isTouched(): Promise<boolean> {\n    return Promise.resolve(this.touched);\n  }\n\n  /**\n   * @internal\n   */\n  @Method()\n  hasValidValue(): Promise<boolean> {\n    return Promise.resolve(\n      this.checkboxElements.some((checkbox) => checkbox.checked)\n    );\n  }\n\n  render() {\n    return (\n      <Host ref={this.groupRef} onIxBlur={() => (this.touched = true)}>\n        <ix-field-wrapper\n          label={this.label}\n          helperText={this.helperText}\n          invalidText={this.invalidText}\n          infoText={this.infoText}\n          validText={this.validText}\n          warningText={this.warningText}\n          showTextAsTooltip={this.showTextAsTooltip}\n          isInvalid={this.isInvalid}\n          isInfo={this.isInfo}\n          isValid={this.isValid}\n          isWarning={this.isWarning}\n          controlRef={this.groupRef}\n        >\n          <div\n            class={{\n              'checkbox-container': true,\n              'row-layout': this.direction === 'row',\n            }}\n          >\n            <slot></slot>\n          </div>\n        </ix-field-wrapper>\n      </Host>\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n@import 'mixins/shadow-dom/component';\n\n:host {\n  display: inline-block;\n  position: relative;\n\n  .checkbox-container {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    margin: 0.375rem 0;\n    flex-wrap: wrap;\n\n    &.row-layout {\n      flex-direction: row;\n    }\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport type MakeRef<T> = {\n  (ref: T | undefined | null): void;\n  current: T | null;\n  waitForCurrent(): Promise<T>;\n};\n\ntype Resolve<T> = (value: T) => void;\n\nexport function makeRef<T>(\n  currentChangedCallback?: (element: T) => void\n): MakeRef<T> {\n  let resolve: Resolve<T> | undefined = undefined;\n  let currentPromise = new Promise<T>((res) => (resolve = res));\n  let current: T | undefined = undefined;\n\n  const setRefFunction = (ref: T | undefined) => {\n    if (ref === undefined) {\n      return;\n    }\n    current = (setRefFunction as MakeRef<T>).current = ref;\n    currentChangedCallback?.(ref);\n    resolve?.(ref);\n  };\n\n  setRefFunction.current = current as T | null;\n\n  setRefFunction.waitForCurrent = async () => {\n    await currentPromise;\n    return current;\n  };\n\n  return setRefFunction as MakeRef<T>;\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getElement } from '@stencil/core';\nimport { HTMLIxFormComponentElement, IxFormComponent } from '.';\nimport { IxComponent } from '../internal';\n\nexport type ClassMutationObserver = {\n  destroy: () => void;\n};\n\nexport async function isTouched<T>(host: IxFormComponent<T>) {\n  if (typeof host.isTouched === 'function') {\n    return host.isTouched();\n  }\n}\n\nexport async function shouldSuppressInternalValidation<T>(\n  host: IxFormComponent<T>\n) {\n  if (\n    host.getAssociatedFormElement &&\n    typeof host.getAssociatedFormElement === 'function'\n  ) {\n    const form = await host.getAssociatedFormElement();\n\n    if (!form) {\n      return false;\n    }\n\n    return form.noValidate;\n  }\n\n  return false;\n}\n\nexport function createClassMutationObserver(\n  element: HTMLElement,\n  callback: () => void,\n  options?: {\n    includeChildren?: boolean;\n  }\n): ClassMutationObserver {\n  const observer = new MutationObserver(callback);\n  observer.observe(element, {\n    subtree: options?.includeChildren,\n    childList: options?.includeChildren,\n    attributes: true,\n    attributeFilter: ['class'],\n  });\n\n  return {\n    destroy() {\n      observer.disconnect();\n    },\n  };\n}\n\nexport type ValidationResultProperty =\n  | 'isInvalid'\n  | 'isInvalidByRequired'\n  | 'isValid'\n  | 'isInfo'\n  | 'isWarning';\nexport type ValidationResults = Record<ValidationResultProperty, boolean>;\n\nfunction containsClass(\n  hostElement: HTMLIxFormComponentElement<unknown>,\n  className: string,\n  includeChildren: boolean\n) {\n  return (\n    hostElement.classList.contains(`${className}`) ||\n    (includeChildren ? !!hostElement.querySelector(`.${className}`) : false)\n  );\n}\n\nexport function checkFieldClasses(\n  hostElement: HTMLIxFormComponentElement<unknown>,\n  includeChildren = false\n): ValidationResults {\n  return {\n    isInvalid: containsClass(hostElement, 'ix-invalid', includeChildren),\n    isInvalidByRequired: containsClass(\n      hostElement,\n      'ix-invalid--required',\n      includeChildren\n    ),\n    isValid: containsClass(hostElement, 'ix-valid', includeChildren),\n    isInfo: containsClass(hostElement, 'ix-info', includeChildren),\n    isWarning: containsClass(hostElement, 'ix-warning', includeChildren),\n  };\n}\n\nexport function HookValidationLifecycle(options?: {\n  includeChildren?: boolean;\n}) {\n  return (proto: IxComponent, methodName: string) => {\n    let checkIfRequiredFunction: (() => Promise<void>) | null;\n    let classMutationObserver: ClassMutationObserver | null;\n    const { componentWillLoad, disconnectedCallback, connectedCallback } =\n      proto;\n\n    proto.connectedCallback = function () {\n      const host = getElement(\n        this\n      ) as unknown as HTMLIxFormComponentElement<unknown>;\n\n      checkIfRequiredFunction = async () => {\n        const skipValidation = await shouldSuppressInternalValidation(host);\n        if (skipValidation) {\n          return;\n        }\n\n        if (host.hasValidValue && typeof host.hasValidValue === 'function') {\n          const hasValue = await host.hasValidValue();\n          const touched = await isTouched(host);\n\n          if (host.required) {\n            host.classList.toggle('ix-invalid--required', !hasValue && touched);\n          } else {\n            host.classList.remove('ix-invalid--required');\n          }\n        }\n\n        if (\n          host.getValidityState &&\n          typeof host.getValidityState === 'function'\n        ) {\n          const validityState = await host.getValidityState();\n\n          host.classList.toggle(\n            `ix-invalid--validity-patternMismatch`,\n            validityState.patternMismatch\n          );\n        }\n      };\n\n      host.addEventListener('checkedChange', checkIfRequiredFunction);\n      host.addEventListener('valueChange', checkIfRequiredFunction);\n      host.addEventListener('ixBlur', checkIfRequiredFunction);\n      setTimeout(checkIfRequiredFunction);\n      return connectedCallback?.call(this);\n    };\n\n    proto.componentWillLoad = function () {\n      const host = getElement(\n        this\n      ) as unknown as HTMLIxFormComponentElement<unknown>;\n      classMutationObserver = createClassMutationObserver(\n        host,\n        () => {\n          const result = checkFieldClasses(host, options?.includeChildren);\n          proto[methodName].call(this, result);\n        },\n        options\n      );\n      const result = checkFieldClasses(host, options?.includeChildren);\n      proto[methodName].call(this, result);\n      return componentWillLoad?.call(this);\n    };\n\n    proto.disconnectedCallback = function () {\n      const host = getElement(this);\n\n      if (host && classMutationObserver) {\n        classMutationObserver.destroy();\n        classMutationObserver = null;\n      }\n\n      if (host && checkIfRequiredFunction) {\n        host.removeEventListener('checkedChange', checkIfRequiredFunction);\n        host.removeEventListener('valueChange', checkIfRequiredFunction);\n        host.removeEventListener('ixBlur', checkIfRequiredFunction);\n        checkIfRequiredFunction = null;\n      }\n\n      return disconnectedCallback?.call(this);\n    };\n  };\n}\n"],"names":["CheckboxGroup","constructor","hostRef","direction","showTextAsTooltip","required","isInvalid","isInfo","isValid","isWarning","touched","groupRef","makeRef","observer","MutationObserver","this","checkForRequiredCheckbox","checkboxElements","Array","from","hostElement","querySelectorAll","some","checkbox","connectedCallback","observe","childList","subtree","attributes","attributeFilter","componentWillLoad","disconnectedCallback","disconnect","onClassFieldUpdate","_ref","isInvalidByRequired","isTouched","Promise","resolve","hasValidValue","checked","render","h","Host","key","ref","onIxBlur","label","helperText","invalidText","infoText","validText","warningText","controlRef","class","__decorate","HookValidationLifecycle","includeChildren","prototype","currentChangedCallback","current","currentPromise","res","setRefFunction","undefined","waitForCurrent","async","shouldSuppressInternalValidation","host","getAssociatedFormElement","form","noValidate","createClassMutationObserver","element","callback","options","destroy","containsClass","className","classList","contains","concat","querySelector","checkFieldClasses","arguments","length","proto","methodName","checkIfRequiredFunction","classMutationObserver","getElement","hasValue","toggle","remove","getValidityState","validityState","patternMismatch","addEventListener","setTimeout","call","result","removeEventListener"],"sourceRoot":""}