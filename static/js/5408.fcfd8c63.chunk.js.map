{"version":3,"file":"static/js/5408.fcfd8c63.chunk.js","mappings":"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","sources":["../node_modules/@siemens/ix/node_modules/.pnpm/@floating-ui+utils@0.2.9/node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs","../node_modules/@siemens/ix/node_modules/.pnpm/@floating-ui+core@1.6.7/node_modules/@floating-ui/core/dist/floating-ui.core.mjs","../node_modules/@siemens/ix/node_modules/.pnpm/@floating-ui+utils@0.2.9/node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs","../node_modules/@siemens/ix/node_modules/.pnpm/@floating-ui+dom@1.6.13/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs"],"sourcesContent":["/**\n * Custom positioning reference element.\n * @see https://floating-ui.com/docs/virtual-elements\n */\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSideAxis(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  const {\n    x,\n    y,\n    width,\n    height\n  } = rect;\n  return {\n    width,\n    height,\n    top: y,\n    left: x,\n    right: x + width,\n    bottom: y + height,\n    x,\n    y\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };\n","import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    x,\n    y,\n    width: rects.floating.width,\n    height: rects.floating.height\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const initialSideAxis = getSideAxis(initialPlacement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== 'none';\n      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$filter2;\n                const placement = (_overflowsData$filter2 = overflowsData.filter(d => {\n                  if (hasFallbackAxisSideDirection) {\n                    const currentSideAxis = getSideAxis(d.placement);\n                    return currentSideAxis === initialSideAxis ||\n                    // Create a bias to the `y` side axis due to horizontal\n                    // reading directions favoring greater width.\n                    currentSideAxis === 'y';\n                  }\n                  return true;\n                }).map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const maximumClippingHeight = height - overflow.top - overflow.bottom;\n      const maximumClippingWidth = width - overflow.left - overflow.right;\n      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isYAxis) {\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","function hasWindow() {\n  return typeof window !== 'undefined';\n}\nfunction getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  if (!hasWindow() || typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isTopLayer(element) {\n  return [':popover-open', ':modal'].some(selector => {\n    try {\n      return element.matches(selector);\n    } catch (e) {\n      return false;\n    }\n  });\n}\nfunction isContainingBlock(elementOrCss) {\n  const webkit = isWebKit();\n  const css = isElement(elementOrCss) ? getComputedStyle(elementOrCss) : elementOrCss;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  // https://drafts.csswg.org/css-transforms-2/#individual-transforms\n  return ['transform', 'translate', 'scale', 'rotate', 'perspective'].some(value => css[value] ? css[value] !== 'none' : false) || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'translate', 'scale', 'rotate', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else if (isTopLayer(currentNode)) {\n      return null;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.scrollX,\n    scrollTop: element.scrollY\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    const frameElement = getFrameElement(win);\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\nfunction getFrameElement(win) {\n  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getFrameElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isTopLayer, isWebKit };\n","import { rectToClientRect, detectOverflow as detectOverflow$1, offset as offset$1, autoPlacement as autoPlacement$1, shift as shift$1, flip as flip$1, size as size$1, hide as hide$1, arrow as arrow$1, inline as inline$1, limitShift as limitShift$1, computePosition as computePosition$1 } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getFrameElement, getNodeScroll, getDocumentElement, isTopLayer, getNodeName, isOverflowElement, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = getFrameElement(currentWin);\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = getFrameElement(currentWin);\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\n// If <html> has a CSS width greater than the viewport, then this will be\n// incorrect for RTL.\nfunction getWindowScrollBarX(element, rect) {\n  const leftScroll = getNodeScroll(element).scrollLeft;\n  if (!rect) {\n    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;\n  }\n  return rect.left + leftScroll;\n}\n\nfunction getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {\n  if (ignoreScrollbarX === void 0) {\n    ignoreScrollbarX = false;\n  }\n  const htmlRect = documentElement.getBoundingClientRect();\n  const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 :\n  // RTL <body> scrollbar.\n  getWindowScrollBarX(documentElement, htmlRect));\n  const y = htmlRect.top + scroll.scrollTop;\n  return {\n    x,\n    y\n  };\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y,\n      width: clippingAncestor.width,\n      height: clippingAncestor.height\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      // If the <body> scrollbar appears on the left (e.g. RTL systems). Use\n      // Firefox with layout.scrollbar.side = 3 in about:config to test this.\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);\n  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;\n  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction isStaticPositioned(element) {\n  return getComputedStyle(element).position === 'static';\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  let rawOffsetParent = element.offsetParent;\n\n  // Firefox returns the <html> element as the offsetParent if it's non-static,\n  // while Chrome and Safari return the <body> element. The <body> element must\n  // be used to perform the correct calculations even if the <html> element is\n  // non-static.\n  if (getDocumentElement(element) === rawOffsetParent) {\n    rawOffsetParent = rawOffsetParent.ownerDocument.body;\n  }\n  return rawOffsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const win = getWindow(element);\n  if (isTopLayer(element)) {\n    return win;\n  }\n  if (!isHTMLElement(element)) {\n    let svgOffsetParent = getParentNode(element);\n    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {\n      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n        return svgOffsetParent;\n      }\n      svgOffsetParent = getParentNode(svgOffsetParent);\n    }\n    return win;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n    return win;\n  }\n  return offsetParent || getContainingBlock(element) || win;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  const floatingDimensions = await getDimensionsFn(data.floating);\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: floatingDimensions.width,\n      height: floatingDimensions.height\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\nfunction rectsAreEqual(a, b) {\n  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\n}\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const elementRectForRootMargin = element.getBoundingClientRect();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = elementRectForRootMargin;\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\n          // to prevent an infinite loop of updates.\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 1000);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {\n        // It's possible that even though the ratio is reported as 1, the\n        // element is not actually fully within the IntersectionObserver's root\n        // area anymore. This can happen under performance constraints. This may\n        // be a bug in the browser's IntersectionObserver implementation. To\n        // work around this, we compare the element's bounding rect now with\n        // what it was at the time we created the IntersectionObserver. If they\n        // are not equal then the element moved, so we refresh.\n        refresh();\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nconst detectOverflow = detectOverflow$1;\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = offset$1;\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = size$1;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = inline$1;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = limitShift$1;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, platform, shift, size };\n"],"names":["sides","min","Math","max","round","floor","createCoords","v","x","y","oppositeSideMap","left","right","bottom","top","oppositeAlignmentMap","start","end","clamp","value","evaluate","param","getSide","placement","split","getAlignment","getOppositeAxis","axis","getAxisLength","getSideAxis","includes","getAlignmentAxis","getOppositeAlignmentPlacement","replace","alignment","getOppositePlacement","side","getPaddingObject","padding","_objectSpread","expandPaddingObject","rectToClientRect","rect","width","height","computeCoordsFromPlacement","_ref","rtl","reference","floating","sideAxis","alignmentAxis","alignLength","isVertical","commonX","commonY","commonAlign","coords","async","detectOverflow","state","options","_await$platform$isEle","platform","rects","elements","strategy","boundary","rootBoundary","elementContext","altBoundary","paddingObject","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","getSideOffsets","overflow","isAnySideFullyClipped","some","getBoundingRect","minX","map","minY","hasWindow","window","getNodeName","node","isNode","nodeName","toLowerCase","getWindow","_node$ownerDocument","ownerDocument","defaultView","document","documentElement","Node","Element","isHTMLElement","HTMLElement","isShadowRoot","ShadowRoot","isOverflowElement","overflowX","overflowY","display","getComputedStyle","test","isTableElement","isTopLayer","selector","matches","e","isContainingBlock","elementOrCss","webkit","isWebKit","css","containerType","backdropFilter","filter","willChange","contain","CSS","supports","isLastTraversableNode","getNodeScroll","scrollLeft","scrollTop","scrollX","scrollY","getParentNode","result","assignedSlot","parentNode","host","getNearestOverflowAncestor","body","getOverflowAncestors","list","traverseIframes","_node$ownerDocument2","scrollableAncestor","isBody","win","frameElement","getFrameElement","concat","visualViewport","parent","Object","getPrototypeOf","getCssDimensions","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","domElement","getBoundingClientRect","Number","isFinite","noOffsets","getVisualOffsets","offsetLeft","offsetTop","includeScale","isFixedStrategy","clientRect","scale","visualOffsets","isFixed","floatingOffsetParent","shouldAddVisualOffsets","offsetWin","currentWin","currentIFrame","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","getWindowScrollBarX","leftScroll","getHTMLOffset","scroll","ignoreScrollbarX","htmlRect","getClientRectFromClippingAncestor","clippingAncestor","html","clientWidth","clientHeight","visualViewportBased","getViewportRect","scrollWidth","scrollHeight","direction","getDocumentRect","getInnerBoundingClientRect","hasFixedPositionAncestor","stopNode","position","getRectRelativeToOffsetParent","isOffsetParentAnElement","offsets","offsetRect","htmlOffset","isStaticPositioned","getTrueOffsetParent","polyfill","rawOffsetParent","svgOffsetParent","currentNode","getContainingBlock","topLayer","clippingAncestors","cache","cachedResult","get","el","currentContainingBlockComputedStyle","elementIsFixed","computedStyle","currentNodeIsContaining","ancestor","set","getClippingElementAncestors","this","_c","firstClippingAncestor","clippingRect","reduce","accRect","getElementRects","data","getOffsetParentFn","getDimensionsFn","getDimensions","floatingDimensions","getClientRects","Array","from","isRTL","rectsAreEqual","a","b","autoUpdate","update","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","IntersectionObserver","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","onMove","timeoutId","io","root","cleanup","_io","clearTimeout","disconnect","refresh","skip","threshold","elementRectForRootMargin","rootMargin","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","observe","observeMove","frameId","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","_resizeObserver","prevRefRect","frameLoop","nextRefRect","_resizeObserver2","removeEventListener","offset","name","fn","_middlewareData$offse","_middlewareData$arrow","middlewareData","diffCoords","mainAxisMulti","crossAxisMulti","rawValue","mainAxis","crossAxis","convertValueToCoords","arrow","alignmentOffset","shift","_evaluate3","checkMainAxis","checkCrossAxis","limiter","detectOverflowOptions","_objectWithoutProperties","_excluded3","mainAxisCoord","crossAxisCoord","maxSide","limitedCoords","flip","_middlewareData$flip","initialPlacement","_evaluate","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","_excluded","initialSideAxis","isBasePlacement","oppositePlacement","getExpandedPlacements","hasFallbackAxisSideDirection","push","isStart","lr","rl","tb","bt","getSideList","getOppositeAxisPlacements","placements","overflows","overflowsData","length","mainAlignmentSide","getAlignmentSides","every","_middlewareData$flip2","_overflowsData$filter","nextIndex","index","nextPlacement","reset","resetPlacement","d","sort","_overflowsData$filter2","currentSideAxis","acc","hide","_evaluate2","_excluded2","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","arrowDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","maxPadding","min$1","center","shouldAddOffset","centerOffset","inline","nativeClientRects","clientRects","sortedRects","slice","groups","prevRect","i","getRectsByLine","fallback","resetRects","find","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","computePosition","Map","mergedOptions","platformWithCache","config","middleware","validMiddleware","Boolean","statefulPlacement","resetCount","nextX","nextY","computePosition$1"],"sourceRoot":""}