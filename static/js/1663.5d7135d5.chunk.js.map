{"version":3,"file":"static/js/1663.5d7135d5.chunk.js","mappings":"4HASO,MAAMA,EAA0BC,GACrC,IAAIC,iBAAiBD,E,gFCVvB,MC0BaE,EAAa,MAL1BC,WAAAA,CAAAC,I,gEAWU,KAAQC,UAAY,EAKpB,KAASC,WAAY,EAKrB,KAAaC,cAAW,CAuFjC,CAhFSC,QAAAA,GACN,OAAOC,MAAMC,KAAKC,KAAKC,YAAYC,iBAAiB,oB,CAGtDC,WAAAA,GACE,IAAIC,EAAQJ,KAAKH,WACjBO,EAAMC,SAAQ,CAACC,EAASC,KACtBD,EAAQZ,SAAWM,KAAKN,SACxBY,EAAQX,UAAYK,KAAKL,UACzBW,EAAQE,SAAWR,KAAKJ,gBAAkBW,EAErB,IAAjBH,EAAMK,OAKI,IAAVF,EACFD,EAAQI,SAAW,QACVH,IAAUH,EAAMK,OAAS,EAClCH,EAAQI,SAAW,OAEnBJ,EAAQI,SAAW,YATnBJ,EAAQI,SAAW,W,CAiBzBC,sBAAAA,CAAuBC,GACrB,MAAMC,EAAcD,EAAME,OAEpBV,EAAQJ,KAAKH,WACbkB,EAAaX,EAAMY,WAAWC,GAASA,IAASJ,IAClCb,KAAKkB,aAAaC,KAAKJ,GAE3BK,kBAIhBhB,EAAMC,SAAQ,CAACY,EAAMV,KACnBU,EAAKT,SAAWD,IAAUQ,I,CAI9BM,iBAAAA,GACErB,KAAKG,a,CAGPmB,gBAAAA,GACEtB,KAAKuB,UAAWnC,EAAAA,EAAAA,IAAwBoC,IACtC,IAAK,IAAIC,KAAYD,EACG,cAAlBC,EAASC,MACX1B,KAAKG,iBAKXH,KAAKuB,SAASI,QAAQ3B,KAAKC,YAAa,CAAE2B,WAAW,G,CAGvDC,oBAAAA,GACM7B,KAAKuB,UACPvB,KAAKuB,SAASO,Y,CAIlBC,kBAAAA,GACE/B,KAAKG,a,CAGP6B,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAAAC,IAAA,6CACHF,EAAAA,EAAAA,GAAA,OAAAE,IAAA,2CAAKC,MAAO,CAAEhC,OAAO,EAAMV,SAAUM,KAAKN,YACxCuC,EAAAA,EAAAA,GAAa,QAAAE,IAAA,8C,iDD5HE,q9B","sources":["../node_modules/@siemens/ix/dist/esm/src/components/utils/mutation-observer.ts","../node_modules/@siemens/ix/dist/esm/src/components/workflow-steps/workflow-steps.scss?tag=ix-workflow-steps&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/workflow-steps/workflow-steps.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport const createMutationObserver = (callback: MutationCallback) =>\n  new MutationObserver(callback);\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n@import 'common-variables';\n@import 'mixins/shadow-dom/component';\n\n:host {\n  @include ix-component;\n  display: block;\n  position: relative;\n  width: fit-content;\n  height: fit-content;\n  min-width: 2rem;\n\n  .steps {\n    display: flex;\n    height: 100%;\n\n    &.vertical {\n      flex-direction: column;\n    }\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Prop,\n} from '@stencil/core';\nimport { createMutationObserver } from '../utils/mutation-observer';\n\n@Component({\n  tag: 'ix-workflow-steps',\n  styleUrl: 'workflow-steps.scss',\n  shadow: true,\n})\nexport class WorkflowSteps {\n  @Element() hostElement!: HTMLIxWorkflowStepsElement;\n\n  /**\n   * Select orientation\n   */\n  @Prop() vertical: boolean = false;\n\n  /**\n   * Activate navigation click\n   */\n  @Prop() clickable: boolean = false;\n\n  /**\n   * Activate navigation click\n   */\n  @Prop() selectedIndex: number = 0;\n\n  /**\n   * On step selected event\n   */\n  @Event() stepSelected!: EventEmitter<number>;\n\n  private getSteps() {\n    return Array.from(this.hostElement.querySelectorAll('ix-workflow-step'));\n  }\n\n  updateSteps() {\n    let steps = this.getSteps();\n    steps.forEach((element, index) => {\n      element.vertical = this.vertical;\n      element.clickable = this.clickable;\n      element.selected = this.selectedIndex === index;\n\n      if (steps.length === 1) {\n        element.position = 'single';\n        return;\n      }\n\n      if (index === 0) {\n        element.position = 'first';\n      } else if (index === steps.length - 1) {\n        element.position = 'last';\n      } else {\n        element.position = 'undefined';\n      }\n    });\n  }\n\n  private observer?: MutationObserver;\n\n  @Listen('selectedChanged')\n  onStepSelectionChanged(event: CustomEvent<HTMLIxWorkflowStepElement>) {\n    const eventTarget = event.detail;\n\n    const steps = this.getSteps();\n    const clickIndex = steps.findIndex((step) => step === eventTarget);\n    const clientEvent = this.stepSelected.emit(clickIndex);\n\n    if (clientEvent.defaultPrevented) {\n      return;\n    }\n\n    steps.forEach((step, index) => {\n      step.selected = index === clickIndex;\n    });\n  }\n\n  componentWillLoad() {\n    this.updateSteps();\n  }\n\n  componentDidLoad() {\n    this.observer = createMutationObserver((mutations) => {\n      for (let mutation of mutations) {\n        if (mutation.type === 'childList') {\n          this.updateSteps();\n        }\n      }\n    });\n\n    this.observer.observe(this.hostElement, { childList: true });\n  }\n\n  disconnectedCallback() {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  }\n\n  componentDidRender() {\n    this.updateSteps();\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class={{ steps: true, vertical: this.vertical }}>\n          <slot></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"names":["createMutationObserver","callback","MutationObserver","WorkflowSteps","constructor","hostRef","vertical","clickable","selectedIndex","getSteps","Array","from","this","hostElement","querySelectorAll","updateSteps","steps","forEach","element","index","selected","length","position","onStepSelectionChanged","event","eventTarget","detail","clickIndex","findIndex","step","stepSelected","emit","defaultPrevented","componentWillLoad","componentDidLoad","observer","mutations","mutation","type","observe","childList","disconnectedCallback","disconnect","componentDidRender","render","h","Host","key","class"],"sourceRoot":""}