{"version":3,"file":"static/js/9385.1e082184.chunk.js","mappings":"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","sources":["../node_modules/@siemens/ix/dist/esm/src/components/dropdown/dropdown-controller.ts","../node_modules/@siemens/ix/dist/esm/src/components/utils/lazy-list/lazy.ts","../node_modules/@siemens/ix/dist/esm/src/components/tree/tree.css?tag=ix-tree&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/tree/tree.tsx","../node_modules/@siemens/ix/dist/esm/src/components/tree-item/default-tree-item.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { IxComponent } from '../utils/internal';\nexport type CloseBehavior = 'inside' | 'outside' | 'both' | boolean;\n\nexport interface DropdownInterface extends IxComponent {\n  closeBehavior: CloseBehavior;\n  discoverAllSubmenus: boolean;\n\n  getAssignedSubmenuIds(): string[];\n  getId(): string;\n\n  discoverSubmenu(): void;\n\n  isPresent(): boolean;\n\n  willPresent?(): boolean;\n  willDismiss?(): boolean;\n\n  present(): void;\n  dismiss(): void;\n}\n\nexport function hasDropdownItemWrapperImplemented(\n  item: unknown\n): item is DropdownItemWrapper {\n  return (\n    item !== null &&\n    (item as DropdownItemWrapper).getDropdownItemElement !== undefined &&\n    typeof (item as DropdownItemWrapper).getDropdownItemElement === 'function'\n  );\n}\n\nexport interface DropdownItemWrapper {\n  getDropdownItemElement(): Promise<HTMLIxDropdownItemElement>;\n}\n\ntype SubmenuIds = Record<string, string[]>;\n\nclass DropdownController {\n  private readonly dropdowns: Map<string, DropdownInterface> = new Map<\n    string,\n    DropdownInterface\n  >();\n  private submenuIds: SubmenuIds = {};\n\n  private isWindowListenerActive = false;\n\n  connected(dropdown: DropdownInterface) {\n    if (!this.isWindowListenerActive) {\n      this.addOverlayListeners();\n    }\n    this.dropdowns.set(dropdown.getId(), dropdown);\n\n    if (dropdown.discoverAllSubmenus) {\n      this.discoverSubmenus();\n    }\n  }\n\n  disconnected(dropdown: DropdownInterface) {\n    const id = dropdown.getId();\n    this.removeFromSubmenuIds(id);\n    this.dropdowns.delete(id);\n  }\n\n  removeFromSubmenuIds(id: string) {\n    this.dropdowns.forEach((dropdown) => {\n      const submenuIds = this.submenuIds[dropdown.getId()];\n      if (submenuIds) {\n        const index = submenuIds.indexOf(id);\n        if (index > -1) {\n          submenuIds.splice(index, 1);\n        }\n      }\n    });\n\n    delete this.submenuIds[id];\n  }\n\n  getDropdownById(id: string) {\n    return this.dropdowns.get(id);\n  }\n\n  discoverSubmenus() {\n    this.dropdowns.forEach((dropdown) => {\n      dropdown.discoverSubmenu();\n    });\n  }\n\n  present(dropdown: DropdownInterface) {\n    if (!dropdown.isPresent() && dropdown.willPresent?.()) {\n      this.submenuIds[dropdown.getId()] = dropdown.getAssignedSubmenuIds();\n      dropdown.present();\n    }\n  }\n\n  dismissChildren(uid: string) {\n    const childIds = this.submenuIds[uid] || [];\n    for (const id of childIds) {\n      const dropdown = this.dropdowns.get(id);\n      if (dropdown) {\n        this.dismiss(dropdown);\n      }\n    }\n  }\n\n  dismiss(dropdown: DropdownInterface) {\n    if (dropdown.isPresent() && dropdown.willDismiss?.()) {\n      this.dismissChildren(dropdown.getId());\n      dropdown.dismiss();\n      delete this.submenuIds[dropdown.getId()];\n    }\n  }\n\n  dismissAll(\n    ignoreBehaviorForIds: string[] = [],\n    ignoreRelatedDropdowns = false\n  ) {\n    this.dropdowns.forEach((dropdown) => {\n      const preventClosing =\n        dropdown.closeBehavior === 'inside' || dropdown.closeBehavior === false;\n\n      const shouldIgnore = ignoreBehaviorForIds.includes(dropdown.getId());\n      const path = this.buildComposedPath(dropdown.getId(), new Set<string>());\n\n      if (ignoreBehaviorForIds.length > 0 && ignoreRelatedDropdowns) {\n        let skipRelatedDropdown = false;\n\n        ignoreBehaviorForIds.forEach((id) => {\n          if (path.has(id)) {\n            skipRelatedDropdown = true;\n            return;\n          }\n        });\n\n        if (!skipRelatedDropdown) {\n          return;\n        }\n      }\n\n      if (!shouldIgnore && preventClosing) {\n        return;\n      }\n\n      this.dismiss(dropdown);\n    });\n  }\n\n  dismissOthers(uid: string) {\n    let path = this.buildComposedPath(uid, new Set<string>());\n    path.add(uid);\n\n    this.dropdowns.forEach((dropdown) => {\n      if (\n        dropdown.closeBehavior !== 'inside' &&\n        dropdown.closeBehavior !== false &&\n        !path.has(dropdown.getId())\n      ) {\n        this.dismiss(dropdown);\n      }\n    });\n  }\n\n  pathIncludesTrigger(eventTargets: EventTarget[]) {\n    for (let eventTarget of eventTargets) {\n      if (eventTarget instanceof HTMLElement) {\n        if (eventTarget.hasAttribute('data-ix-dropdown-trigger')) {\n          return eventTarget;\n        }\n      }\n    }\n\n    return;\n  }\n\n  private pathIncludesDropdown(eventTargets: EventTarget[]) {\n    return !!eventTargets.find(\n      (element: EventTarget) =>\n        (element as HTMLElement).tagName === 'IX-DROPDOWN'\n    );\n  }\n\n  private buildComposedPath(id: string, path: Set<string>): Set<string> {\n    if (this.submenuIds[id]) {\n      path.add(id);\n    }\n\n    for (const ruleKey of Object.keys(this.submenuIds)) {\n      if (this.submenuIds[ruleKey].includes(id)) {\n        this.buildComposedPath(ruleKey, path).forEach((key) => path.add(key));\n      }\n    }\n\n    return path;\n  }\n\n  private addOverlayListeners() {\n    this.isWindowListenerActive = true;\n\n    window.addEventListener('click', (event: MouseEvent) => {\n      const hasTrigger = this.pathIncludesTrigger(event.composedPath());\n      const hasDropdown = this.pathIncludesDropdown(event.composedPath());\n\n      if (!hasTrigger && !hasDropdown) {\n        this.dismissAll();\n      }\n    });\n\n    window.addEventListener('keydown', (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        this.dismissAll([...this.dropdowns.keys()]);\n      }\n    });\n  }\n}\n\nexport const dropdownController = new DropdownController();\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Manually forked from https://github.com/tbranyen/hyperlist to remove\n// features a direct document calls\n//\n// Hyperlist is licensed MIT. https://github.com/tbranyen/hyperlist\n\nexport type VirtualListConfig = {\n  applyPatch?: (\n    element: HTMLElement,\n    fragment: DocumentFragment | DocumentFragment[]\n  ) => void;\n  overrideScrollPosition?: () => void;\n  rowClassName?: string;\n  scrollContainer?: HTMLElement;\n  width: string;\n  height: string;\n  afterRender?: () => void;\n  scrollerTagName?: string;\n  scroller?: HTMLElement;\n  useFragment?: boolean;\n  generate?: (index: number) => HTMLElement;\n  total?: number;\n  itemHeight?: number;\n  horizontal?: boolean;\n};\n\nconst isNumber = (input: unknown) => !Number.isNaN(Number(input));\n\nconst addClass = (element: HTMLElement, className: string) => {\n  element.classList.add(className);\n};\n\nexport class VirtualList {\n  _config!: VirtualListConfig;\n  _lastRepaint: null;\n  _maxElementHeight: number;\n  _renderAnimationFrame!: number;\n  _averageHeight!: number;\n\n  static readonly defaultConfig: VirtualListConfig = {\n    width: '100%',\n    height: '100%',\n  };\n  _element: any;\n  _scroller: any;\n  _itemHeights!: number[];\n  _containerSize!: number | string;\n  _scrollPaddingBottom!: number;\n  _scrollPaddingTop!: number;\n  _scrollHeight: any;\n  _itemPositions: any;\n  _screenItemsLen!: number;\n  _lastFrom!: number;\n  _cachedItemsLen: any;\n\n  static create(\n    element: HTMLElement,\n    userProvidedConfig: VirtualListConfig = VirtualList.defaultConfig\n  ) {\n    return new VirtualList(element, userProvidedConfig);\n  }\n\n  static mergeStyle(element: HTMLElement, style: any) {\n    for (let i in style) {\n      if (element.style[i as any] !== style[i]) {\n        element.style[i as any] = style[i];\n      }\n    }\n  }\n\n  static getMaxBrowserHeight() {\n    // Create two elements, the wrapper is `1px` tall and is transparent and\n    // positioned at the top of the page. Inside that is an element that gets\n    // set to 1 billion pixels. Then reads the max height the browser can\n    // calculate.\n    const wrapper = document.createElement('div');\n    const fixture = document.createElement('div');\n\n    // As said above, these values get set to put the fixture elements into the\n    // right visual state.\n    VirtualList.mergeStyle(wrapper, {\n      position: 'absolute',\n      height: '1px',\n      opacity: 0,\n    });\n    VirtualList.mergeStyle(fixture, { height: '1e7px' });\n\n    // Add the fixture into the wrapper element.\n    wrapper.appendChild(fixture);\n\n    // Apply to the page, the values won't kick in unless this is attached.\n    document.body.appendChild(wrapper);\n\n    // Get the maximum element height in pixels.\n    const maxElementHeight = fixture.offsetHeight;\n\n    // Remove the element immediately after reading the value.\n    document.body.removeChild(wrapper);\n\n    return maxElementHeight;\n  }\n\n  constructor(element: HTMLElement, userProvidedConfig: VirtualListConfig) {\n    this._lastRepaint = null;\n    this._maxElementHeight = VirtualList.getMaxBrowserHeight();\n\n    this.refresh(element, userProvidedConfig);\n\n    const config = this._config;\n\n    // Create internal render loop.\n    const render = () => {\n      const scrollTop = this._getScrollPosition();\n      const lastRepaint = this._lastRepaint;\n\n      this._renderAnimationFrame = window.requestAnimationFrame(render);\n\n      if (scrollTop === lastRepaint) {\n        return;\n      }\n\n      const diff = lastRepaint ? scrollTop - lastRepaint : 0;\n      if (!lastRepaint || diff < 0 || diff > this._averageHeight) {\n        let rendered = this._renderChunk();\n\n        this._lastRepaint = scrollTop;\n\n        if (rendered !== false && typeof config.afterRender === 'function') {\n          config.afterRender();\n        }\n      }\n    };\n\n    render();\n  }\n\n  destroy() {\n    window.cancelAnimationFrame(this._renderAnimationFrame);\n  }\n\n  refresh(\n    element: HTMLElement,\n    userProvidedConfig: VirtualListConfig = VirtualList.defaultConfig\n  ) {\n    this._config = userProvidedConfig;\n\n    if (!element || element.nodeType !== 1) {\n      throw new Error('HyperList requires a valid DOM Node container');\n    }\n\n    this._element = element;\n\n    const config = this._config as any;\n\n    const scroller =\n      this._scroller ||\n      config.scroller ||\n      document.createElement(config.scrollerTagName || 'tr');\n\n    // Default configuration option `useFragment` to `true`.\n    if (typeof config.useFragment !== 'boolean') {\n      this._config.useFragment = true;\n    }\n\n    if (!config.generate) {\n      throw new Error('Missing required `generate` function');\n    }\n\n    if (!isNumber(config.total)) {\n      throw new Error('Invalid required `total` value, expected number');\n    }\n\n    if (!Array.isArray(config.itemHeight) && !isNumber(config.itemHeight)) {\n      throw new Error(\n        `\n        Invalid required \\`itemHeight\\` value, expected number or array\n      `.trim()\n      );\n    } else if (isNumber(config.itemHeight)) {\n      this._itemHeights = Array(config.total).fill(config.itemHeight);\n    } else {\n      this._itemHeights = [config.itemHeight as any];\n    }\n\n    // Width and height should be coerced to string representations. Either in\n    // `%` or `px`.\n    Object.keys(VirtualList.defaultConfig)\n      .filter((prop) => prop in config)\n      .forEach((prop) => {\n        const value = config[prop as any];\n        const isValueNumber = isNumber(value);\n\n        if (value && typeof value !== 'string' && typeof value !== 'number') {\n          let msg = `Invalid optional \\`${prop}\\`, expected string or number`;\n          throw new Error(msg);\n        } else if (isValueNumber) {\n          config[prop] = `${value}px`;\n        }\n      });\n\n    const isHorizontal = Boolean(config.horizontal);\n    const value = config[isHorizontal ? 'width' : 'height'];\n\n    if (value) {\n      const isValueNumber = isNumber(value);\n      const isValuePercent = isValueNumber ? false : value.slice(-1) === '%';\n      // Compute the containerHeight as number\n      const numberValue = isValueNumber\n        ? parseInt(value, 10)\n        : parseInt(value.replace(/px|%/, ''), 10);\n      const innerSize = window[isHorizontal ? 'innerWidth' : 'innerHeight'];\n\n      if (isValuePercent) {\n        this._containerSize = (innerSize * numberValue) / 100;\n      } else {\n        this._containerSize = isNumber(value) ? value : numberValue;\n      }\n    }\n\n    const scrollContainer = config.scrollContainer;\n    const scrollerHeight = config.itemHeight * config.total;\n    const maxElementHeight = this._maxElementHeight;\n\n    if (scrollerHeight > maxElementHeight) {\n      console.warn(\n        [\n          'HyperList: The maximum element height',\n          maxElementHeight + 'px has',\n          'been exceeded; please reduce your item height.',\n        ].join(' ')\n      );\n    }\n\n    // Decorate the container element with styles that will match\n    // the user supplied configuration.\n    const elementStyle = {\n      width: `${config.width}`,\n      height: scrollContainer ? `${scrollerHeight}px` : `${config.height}`,\n      overflow: scrollContainer ? 'none' : 'auto',\n      position: 'relative',\n    };\n\n    VirtualList.mergeStyle(element, elementStyle);\n\n    if (scrollContainer) {\n      VirtualList.mergeStyle(config.scrollContainer, { overflow: 'auto' });\n    }\n\n    const scrollerStyle = {\n      opacity: '0',\n      position: 'absolute',\n      [isHorizontal ? 'height' : 'width']: '1px',\n      [isHorizontal ? 'width' : 'height']: `${scrollerHeight}px`,\n    };\n\n    VirtualList.mergeStyle(scroller, scrollerStyle);\n\n    // Only append the scroller element once.\n    if (!this._scroller) {\n      element.appendChild(scroller);\n    }\n\n    const padding = this._computeScrollPadding();\n    this._scrollPaddingBottom = padding.bottom;\n    this._scrollPaddingTop = padding.top;\n\n    // Set the scroller instance.\n    this._scroller = scroller;\n    this._scrollHeight = this._computeScrollHeight();\n\n    // Reuse the item positions if refreshed, otherwise set to empty array.\n    this._itemPositions = this._itemPositions || Array(config.total).fill(0);\n\n    // Each index in the array should represent the position in the DOM.\n    this._computePositions(0);\n\n    // Render after refreshing. Force render if we're calling refresh manually.\n    this._renderChunk(this._lastRepaint !== null);\n\n    if (typeof config.afterRender === 'function') {\n      config.afterRender();\n    }\n  }\n\n  _getRow(i: number) {\n    const config = this._config as any;\n    let item = config.generate(i) as any;\n    let height = item.height;\n\n    if (height !== undefined && isNumber(height)) {\n      item = item.element;\n\n      // The height isn't the same as predicted, compute positions again\n      if (height !== this._itemHeights[i]) {\n        this._itemHeights[i] = height;\n        this._computePositions(i);\n        this._scrollHeight = this._computeScrollHeight();\n      }\n    } else {\n      height = this._itemHeights[i];\n    }\n\n    if (!item || item.nodeType !== 1) {\n      throw new Error(`Generator did not return a DOM Node for index: ${i}`);\n    }\n\n    addClass(item, config.rowClassName || 'vrow');\n\n    const top = this._itemPositions[i] + this._scrollPaddingTop;\n\n    VirtualList.mergeStyle(item, {\n      position: 'absolute',\n      [config.horizontal ? 'left' : 'top']: `${top}px`,\n    });\n\n    return item;\n  }\n\n  _getScrollPosition() {\n    const config = this._config;\n\n    if (typeof config.overrideScrollPosition === 'function') {\n      return config.overrideScrollPosition();\n    }\n\n    return this._element[config.horizontal ? 'scrollLeft' : 'scrollTop'];\n  }\n\n  _renderChunk(force: boolean = false) {\n    const config = this._config;\n    const element = this._element;\n    const scrollTop = this._getScrollPosition();\n    const total: number = config.total!;\n\n    let from = this._getFrom(scrollTop) - 1;\n\n    if (from < 0 || from - this._screenItemsLen < 0) {\n      from = 0;\n    }\n\n    if (!force && this._lastFrom === from) {\n      return false;\n    }\n\n    this._lastFrom = from;\n\n    let to = from + this._cachedItemsLen;\n\n    if (to > total || to + this._cachedItemsLen > total) {\n      to = total;\n    }\n\n    // Append all the new rows in a document fragment that we will later append\n    // to the parent node\n    const fragment: any = config.useFragment\n      ? document.createDocumentFragment()\n      : [\n          // Sometimes you'll pass fake elements to this tool and Fragments require\n          // real elements.\n        ];\n\n    // The element that forces the container to scroll.\n    const scroller = this._scroller;\n\n    // Keep the scroller in the list of children.\n    fragment[config.useFragment ? 'appendChild' : 'push'](scroller);\n\n    for (let i = from; i < to; i++) {\n      let row = this._getRow(i);\n\n      fragment[config.useFragment ? 'appendChild' : 'push'](row);\n    }\n\n    if (config.applyPatch) {\n      return config.applyPatch(element, fragment);\n    }\n\n    element.innerHTML = '';\n    element.appendChild(fragment);\n  }\n\n  _computePositions(from = 1) {\n    const config = this._config;\n    const total = config.total!;\n\n    if (from < 1) {\n      from = 1;\n    }\n\n    for (let i = from; i < total; i++) {\n      this._itemPositions[i] =\n        this._itemHeights[i - 1] + this._itemPositions[i - 1];\n    }\n  }\n\n  _computeScrollHeight() {\n    const config = this._config as any;\n    const isHorizontal = Boolean(config.horizontal);\n    const total = config.total;\n    const scrollHeight =\n      this._itemHeights.reduce((a, b) => a + b, 0) +\n      this._scrollPaddingBottom +\n      this._scrollPaddingTop;\n\n    VirtualList.mergeStyle(this._scroller, {\n      opacity: 0,\n      position: 'absolute',\n      top: '0px',\n      [isHorizontal ? 'height' : 'width']: '1px',\n      [isHorizontal ? 'width' : 'height']: `${scrollHeight}px`,\n    });\n\n    // Calculate the height median\n    const sortedItemHeights = this._itemHeights.slice(0).sort((a, b) => a - b);\n    const middle = Math.floor(total / 2);\n    const averageHeight =\n      total % 2 === 0\n        ? (sortedItemHeights[middle] + sortedItemHeights[middle - 1]) / 2\n        : sortedItemHeights[middle];\n\n    const clientProp = isHorizontal ? 'clientWidth' : 'clientHeight';\n    const element = config.scrollContainer\n      ? config.scrollContainer\n      : this._element;\n    const containerHeight = element[clientProp]\n      ? element[clientProp]\n      : this._containerSize;\n    this._screenItemsLen = Math.ceil(containerHeight / averageHeight);\n    this._containerSize = containerHeight;\n\n    // Cache 3 times the number of items that fit in the container viewport.\n    this._cachedItemsLen = Math.max(\n      this._cachedItemsLen || 0,\n      this._screenItemsLen * 3\n    );\n    this._averageHeight = averageHeight;\n\n    return scrollHeight;\n  }\n\n  _computeScrollPadding() {\n    const config = this._config;\n    const isHoriz = Boolean(config.horizontal);\n    const styles = window.getComputedStyle(this._element);\n\n    const padding = (location: string) => {\n      const cssValue = styles.getPropertyValue(`padding-${location}`);\n      return parseInt(cssValue, 10) || 0;\n    };\n\n    if (isHoriz) {\n      return {\n        bottom: padding('right'),\n        top: padding('left'),\n      };\n    } else {\n      return {\n        bottom: padding('bottom'),\n        top: padding('top'),\n      };\n    }\n  }\n\n  _getFrom(scrollTop: number) {\n    let i = 0;\n\n    while (this._itemPositions[i] < scrollTop) {\n      i++;\n    }\n\n    return i;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n:host {\n  display: block;\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Prop,\n  Watch,\n} from '@stencil/core';\nimport { VirtualList, VirtualListConfig } from './../utils/lazy-list';\nimport { renderDefaultItem } from '../tree-item/default-tree-item';\nimport {\n  TreeContext,\n  TreeItem,\n  TreeItemContext,\n  TreeItemVisual,\n  TreeModel,\n  UpdateCallback,\n} from './tree-model';\nimport { dropdownController } from '../dropdown/dropdown-controller';\n\n@Component({\n  tag: 'ix-tree',\n  styleUrl: 'tree.css',\n  shadow: true,\n})\nexport class Tree {\n  @Element() hostElement!: HTMLIxTreeElement;\n\n  /**\n   * Initial root element will not be rendered\n   */\n  @Prop() root!: string;\n\n  /**\n   * Tree model\n   */\n  @Prop() model: TreeModel<any> = {};\n\n  /**\n   * Render function of tree items\n   */\n  @Prop() renderItem?: <T = any>(\n    index: number,\n    data: T,\n    dataList: Array<T>,\n    context: TreeContext,\n    update: (callback: UpdateCallback) => void\n  ) => HTMLElement;\n\n  /**\n   * Selection and collapsed state management\n   */\n  @Prop({ mutable: true }) context: TreeContext = {};\n\n  /**\n   * Enable to toggle items by click on the item\n   * @since 3.0.0\n   */\n  @Prop() toggleOnItemClick?: boolean;\n\n  /**\n   * Context changed\n   */\n  @Event() contextChange!: EventEmitter<TreeContext>;\n\n  /**\n   * Node toggled event\n   */\n  @Event() nodeToggled!: EventEmitter<{ id: string; isExpanded: boolean }>;\n\n  /**\n   * Node clicked event\n   */\n  @Event() nodeClicked!: EventEmitter<string>;\n\n  /**\n   * Emits removed nodes\n   */\n  @Event() nodeRemoved!: EventEmitter<any>;\n\n  private hyperlist?: VirtualList;\n\n  private readonly updates = new Map<string, UpdateCallback>();\n  private observer!: MutationObserver;\n  private hasFirstRender = false;\n\n  private updatePadding(element: HTMLElement, item: TreeItemVisual<unknown>) {\n    element.style.paddingLeft = item.level + 'rem';\n  }\n\n  private getVirtualizerOptions(): VirtualListConfig {\n    const list = this.buildTreeList(this.model[this.root]);\n\n    return {\n      width: '100%',\n      height: '100%',\n      itemHeight: 32,\n      total: list.length,\n      generate: (index: number) => {\n        const item = list[index];\n\n        const renderedTreeItem = this.hostElement.querySelector(\n          `[data-tree-node-id=\"${item.id}\"]`\n        ) as HTMLIxTreeItemElement;\n\n        const context = this.getContext(item.id);\n\n        if (renderedTreeItem) {\n          renderedTreeItem.hasChildren = item.hasChildren;\n          renderedTreeItem.context = { ...context };\n\n          if (this.updates.has(item.id)) {\n            const doUpdate = this.updates.get(item.id);\n\n            if (doUpdate) {\n              doUpdate(item, { ...this.context });\n            }\n          }\n\n          this.updatePadding(renderedTreeItem, item);\n          return renderedTreeItem;\n        }\n\n        const update = (callback: UpdateCallback) => {\n          this.updates.set(item.id, callback);\n        };\n\n        let innerElement: HTMLElement | null = null;\n        if (this.renderItem) {\n          innerElement = this.renderItem(\n            index,\n            item,\n            list,\n            { ...this.context },\n            update\n          );\n        }\n\n        if (innerElement === null) {\n          innerElement = renderDefaultItem(item, context, update);\n        }\n\n        const el = innerElement;\n        el.setAttribute('data-tree-node-id', item.id);\n        el.style.paddingRight = '1rem';\n        this.updatePadding(el, item);\n\n        return el;\n      },\n    };\n  }\n\n  private setContext(id: string, context: TreeItemContext) {\n    this.context = {\n      ...this.context,\n      [id]: context,\n    };\n\n    this.contextChange.emit(this.context);\n  }\n\n  private getContext(id: string): TreeItemContext {\n    if (!this.context) {\n      return {\n        isExpanded: false,\n        isSelected: false,\n      };\n    }\n    if (!this.context[id]) {\n      this.context[id] = {\n        isExpanded: false,\n        isSelected: false,\n      };\n    }\n    return this.context[id];\n  }\n\n  private buildTreeList(\n    root: TreeItem<any>,\n    level: number = 0\n  ): TreeItemVisual<any>[] {\n    const itemList: TreeItemVisual<any>[] = [];\n\n    if (root?.hasChildren) {\n      const newLevel = level + 1;\n      root.children.forEach((id: string) => {\n        const item = this.model[id];\n        const context = this.getContext(id);\n        itemList.push({ ...item, level });\n        if (item.hasChildren && context.isExpanded) {\n          itemList.push(...this.buildTreeList(item, newLevel));\n        }\n      });\n    }\n\n    return itemList;\n  }\n\n  componentDidLoad() {\n    this.initList();\n\n    this.observer = new MutationObserver((records) => {\n      let removed: unknown[] = [];\n\n      records.forEach((record) => {\n        removed = [...removed, ...Array.from(record.removedNodes)];\n\n        record.addedNodes.forEach((an) => {\n          const index = removed.indexOf(an);\n          if (index >= 0) {\n            removed.splice(index, 1);\n          }\n        });\n      });\n\n      this.nodeRemoved.emit(removed);\n    });\n\n    this.observer.observe(this.hostElement, {\n      childList: true,\n    });\n  }\n\n  componentWillRender() {\n    this.hasFirstRender = true;\n\n    if (this.isListInitialized()) {\n      this.refreshList();\n    } else {\n      this.initList();\n    }\n  }\n\n  connectedCallback() {\n    if (this.hasFirstRender) {\n      this.initList();\n    }\n  }\n\n  disconnectedCallback() {\n    this.hyperlist?.destroy();\n    this.observer?.disconnect();\n  }\n\n  @Watch('model')\n  modelChange() {\n    if (this.hasFirstRender && !this.isListInitialized()) {\n      this.initList();\n    }\n  }\n\n  private isListInitialized() {\n    //@ts-ignore\n    const itemPositions = this.hyperlist?._itemPositions;\n\n    return (\n      itemPositions !== undefined &&\n      itemPositions.length &&\n      !itemPositions?.some(\n        (item: number) => item === undefined || Number.isNaN(item)\n      )\n    );\n  }\n\n  private refreshList() {\n    if (this.hyperlist) {\n      this.hyperlist.refresh(this.hostElement, this.getVirtualizerOptions());\n    }\n  }\n\n  private initList() {\n    if (!this.model) {\n      return;\n    }\n\n    this.hyperlist?.destroy();\n    const config = this.getVirtualizerOptions();\n    this.hyperlist = new VirtualList(this.hostElement, config);\n  }\n\n  @Listen('toggle')\n  onToggle(event: CustomEvent) {\n    const { target } = event;\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (!(target instanceof HTMLElement)) {\n      return;\n    }\n\n    const id = target.getAttribute('data-tree-node-id');\n    if (!id) {\n      return;\n    }\n\n    const item = this.model[id];\n    if (!item.hasChildren) {\n      return;\n    }\n\n    const context = this.getContext(id);\n    context.isExpanded = !context.isExpanded;\n    this.nodeToggled.emit({ id, isExpanded: context.isExpanded });\n    this.setContext(id, context);\n  }\n\n  onTreeItemClick(event: Event) {\n    const { target } = event;\n    if (!(target instanceof HTMLElement)) {\n      return;\n    }\n\n    const id = target.getAttribute('data-tree-node-id');\n    if (!id) {\n      return;\n    }\n\n    const item = this.model[id];\n    const path = event.composedPath();\n    const treeIndex = path.indexOf(this.hostElement);\n    const treePath = path.slice(0, treeIndex);\n    const hasTrigger = dropdownController.pathIncludesTrigger(treePath);\n\n    if (hasTrigger) {\n      return;\n    }\n\n    if (!event.defaultPrevented) {\n      Object.values(this.context).forEach((c) => (c.isSelected = false));\n      const context = this.getContext(id);\n      context.isSelected = true;\n      this.setContext(id, context);\n    }\n\n    if (this.toggleOnItemClick && item.hasChildren) {\n      const context = this.getContext(id);\n      context.isExpanded = !context.isExpanded;\n      this.nodeToggled.emit({\n        id: id,\n        isExpanded: context.isExpanded,\n      });\n      this.setContext(id, context);\n    }\n\n    this.nodeClicked.emit(id);\n  }\n\n  render() {\n    return (\n      <Host onClick={(event: Event) => this.onTreeItemClick(event)}>\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { TreeItem, TreeItemContext, UpdateCallback } from '../tree/tree-model';\n\nexport interface DefaultTreeItemData {\n  name: string;\n}\nexport type DefaultTreeItem = TreeItem<DefaultTreeItemData>;\n\nexport function renderDefaultItem(\n  item: DefaultTreeItem,\n  context: TreeItemContext,\n  update: (_: UpdateCallback) => void\n) {\n  const el = document.createElement('ix-tree-item');\n  el.hasChildren = item.hasChildren;\n  el.context = context;\n  el.text = item.data.name;\n\n  update((updateTreeItem) => {\n    el.text = updateTreeItem.data.name;\n  });\n  return el;\n}\n"],"names":["hasDropdownItemWrapperImplemented","item","undefined","getDropdownItemElement","dropdownController","constructor","dropdowns","Map","submenuIds","isWindowListenerActive","connected","dropdown","this","addOverlayListeners","set","getId","discoverAllSubmenus","discoverSubmenus","disconnected","id","removeFromSubmenuIds","delete","forEach","index","indexOf","splice","getDropdownById","get","discoverSubmenu","present","isPresent","_a","willPresent","call","getAssignedSubmenuIds","dismissChildren","uid","childIds","dismiss","willDismiss","dismissAll","ignoreBehaviorForIds","arguments","length","ignoreRelatedDropdowns","preventClosing","closeBehavior","shouldIgnore","includes","path","buildComposedPath","Set","skipRelatedDropdown","has","dismissOthers","add","pathIncludesTrigger","eventTargets","eventTarget","HTMLElement","hasAttribute","pathIncludesDropdown","find","element","tagName","ruleKey","Object","keys","key","window","addEventListener","event","hasTrigger","composedPath","hasDropdown","isNumber","input","Number","isNaN","VirtualList","create","userProvidedConfig","defaultConfig","mergeStyle","style","i","getMaxBrowserHeight","wrapper","document","createElement","fixture","position","height","opacity","appendChild","body","maxElementHeight","offsetHeight","removeChild","_lastRepaint","_maxElementHeight","refresh","config","_config","render","scrollTop","_getScrollPosition","lastRepaint","_renderAnimationFrame","requestAnimationFrame","diff","_averageHeight","rendered","_renderChunk","afterRender","destroy","cancelAnimationFrame","nodeType","Error","_element","scroller","_scroller","scrollerTagName","useFragment","generate","total","Array","isArray","itemHeight","trim","_itemHeights","fill","filter","prop","value","isValueNumber","msg","concat","isHorizontal","Boolean","horizontal","isValuePercent","slice","numberValue","parseInt","replace","innerSize","_containerSize","scrollContainer","scrollerHeight","console","warn","join","elementStyle","width","overflow","scrollerStyle","padding","_computeScrollPadding","_scrollPaddingBottom","bottom","_scrollPaddingTop","top","_scrollHeight","_computeScrollHeight","_itemPositions","_computePositions","_getRow","addClass","className","rowClassName","classList","overrideScrollPosition","force","from","_getFrom","_screenItemsLen","_lastFrom","to","_cachedItemsLen","fragment","createDocumentFragment","row","applyPatch","innerHTML","scrollHeight","reduce","a","b","sortedItemHeights","sort","middle","Math","floor","averageHeight","clientProp","containerHeight","ceil","max","isHoriz","styles","getComputedStyle","location","cssValue","getPropertyValue","Tree","hostRef","model","context","updates","hasFirstRender","updatePadding","paddingLeft","level","getVirtualizerOptions","list","buildTreeList","root","renderedTreeItem","hostElement","querySelector","getContext","hasChildren","assign","doUpdate","update","callback","innerElement","renderItem","el","text","data","name","updateTreeItem","renderDefaultItem","setAttribute","paddingRight","setContext","contextChange","emit","isExpanded","isSelected","itemList","newLevel","children","push","componentDidLoad","initList","observer","MutationObserver","records","removed","record","removedNodes","addedNodes","an","nodeRemoved","observe","childList","componentWillRender","isListInitialized","refreshList","connectedCallback","disconnectedCallback","hyperlist","_b","disconnect","modelChange","itemPositions","some","onToggle","target","preventDefault","stopPropagation","getAttribute","nodeToggled","onTreeItemClick","treeIndex","treePath","defaultPrevented","values","c","toggleOnItemClick","nodeClicked","h","Host","onClick"],"sourceRoot":""}