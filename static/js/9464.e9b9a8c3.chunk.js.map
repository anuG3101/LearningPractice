{"version":3,"file":"static/js/9464.e9b9a8c3.chunk.js","mappings":"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","sources":["../node_modules/@siemens/ix/dist/esm/src/components/utils/make-ref.ts","../node_modules/@siemens/ix/dist/esm/src/components/date-dropdown/date-dropdown.scss?tag=ix-date-dropdown&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/date-dropdown/date-dropdown.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport type MakeRef<T> = {\n  (ref: T | undefined | null): void;\n  current: T | null;\n  waitForCurrent(): Promise<T>;\n};\n\ntype Resolve<T> = (value: T) => void;\n\nexport function makeRef<T>(\n  currentChangedCallback?: (element: T) => void\n): MakeRef<T> {\n  let resolve: Resolve<T> | undefined = undefined;\n  let currentPromise = new Promise<T>((res) => (resolve = res));\n  let current: T | undefined = undefined;\n\n  const setRefFunction = (ref: T | undefined) => {\n    if (ref === undefined) {\n      return;\n    }\n    current = (setRefFunction as MakeRef<T>).current = ref;\n    currentChangedCallback?.(ref);\n    resolve?.(ref);\n  };\n\n  setRefFunction.current = current as T | null;\n\n  setRefFunction.waitForCurrent = async () => {\n    await currentPromise;\n    return current;\n  };\n\n  return setRefFunction as MakeRef<T>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n@import 'common-variables';\n@import 'mixins/shadow-dom/component';\n\n:host {\n  @include ix-component;\n  display: inline-block;\n  position: relative;\n\n  @media (max-width: 48em) {\n    .min-width {\n      width: min-content;\n    }\n  }\n\n  @media (min-width: 48em) {\n    .border-right {\n      border-right: var(--theme-x-weak-bdr-2);\n    }\n  }\n\n  ix-button {\n    width: 100%;\n  }\n\n  .max-height {\n    max-height: max-content;\n  }\n\n  .no-margin {\n    margin: 0;\n    padding: 0;\n  }\n\n  .pull-right {\n    float: right;\n    padding: 0 $default-space $medium-space $default-space;  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  Fragment,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\nimport { DateTime } from 'luxon';\nimport { type LiteralStringUnion } from '../utils/type-helper';\nimport { IxDatePickerComponent } from '../date-picker/date-picker-component';\nimport { makeRef } from '../utils/make-ref';\nimport { ButtonVariant } from '../button/button';\nimport { IxButtonComponent } from '../button/button-component';\nimport { iconHistory } from '@siemens/ix-icons/icons';\n\nexport type DateDropdownOption = {\n  id: string;\n  label: string;\n  from?: string;\n  to?: string;\n};\n\nexport type DateRangeChangeEvent = {\n  id: string;\n  from?: string;\n  to?: string;\n};\n\n@Component({\n  tag: 'ix-date-dropdown',\n  styleUrl: 'date-dropdown.scss',\n  shadow: true,\n})\nexport class DateDropdown\n  implements\n    Omit<IxDatePickerComponent, 'corners'>,\n    Omit<IxButtonComponent, 'type' | 'icon'>\n{\n  @Element() hostElement!: HTMLIxDateDropdownElement;\n\n  /**\n   * Disable the button that opens the dropdown containing the date picker.\n   */\n  @Prop() disabled = false;\n\n  /**\n   * Date format string.\n   * See @link https://moment.github.io/luxon/#/formatting?id=table-of-tokens for all available tokens.\n   */\n  @Prop() format = 'yyyy/LL/dd';\n\n  /**\n   * If true a range of dates can be selected.\n   */\n  @Prop() range = true;\n\n  /**\n   * Picker date. If the picker is in range mode this property is the start date.\n   * If set to `null` no default start date will be pre-selected.\n   *\n   * Format is based on `format`\n   */\n  @Prop() from = '';\n\n  /**\n   * Picker date. If the picker is in range mode this property is the end date.\n   * If the picker is not in range mode leave this value `null`\n   *\n   * Format is based on `format`\n   */\n  @Prop() to = '';\n\n  /**\n   * The earliest date that can be selected by the date picker.\n   * If not set there will be no restriction.\n   */\n  @Prop() minDate = '';\n\n  /**\n   * The latest date that can be selected by the date picker.\n   * If not set there will be no restriction.\n   */\n  @Prop() maxDate = '';\n\n  /**\n   * Used to set the initial select date range as well as the button name,\n   * if not set or no according date range label is found, nothing will be selected\n   */\n  @Prop() dateRangeId = 'custom';\n\n  /**\n   * Button variant\n   */\n  @Prop() variant: ButtonVariant = 'primary';\n\n  /**\n   * Outline button\n   */\n  @Prop() outline = false;\n\n  /**\n   * Button with no background or outline\n   */\n  @Prop() ghost = false;\n\n  /**\n   * Loading button\n   */\n  @Prop() loading: boolean = false;\n\n  /**\n   * Shows week numbers displayed on the left side of the date picker\n   *\n   * @since 3.0.0\n   */\n  @Prop() showWeekNumbers = false;\n\n  @Watch('dateRangeId')\n  @Watch('to')\n  @Watch('from')\n  onDateRangeIdChange() {\n    this.onRangeListSelect(this.dateRangeId);\n    this.updateCurrentDate();\n    this.setDateRangeSelection(this.dateRangeId);\n\n    if (!this.currentRangeValue) {\n      return;\n    }\n\n    this.onDateSelect({\n      from: this.currentRangeValue.from,\n      to: this.currentRangeValue.to,\n      id: this.currentRangeValue.id,\n    });\n  }\n\n  /**\n   * Controls whether the user is allowed to pick custom date ranges in the component.\n   * When set to 'true', the user can select a custom date range using the date picker.\n   * When set to 'false', only predefined time date ranges are available for selection.\n   */\n  @Prop() customRangeAllowed = true;\n\n  /**\n   * An array of predefined date range options for the date picker.\n   * Each option is an object with a label describing the range and a function\n   * that returns the start and end dates of the range as a DateRangeOption object.\n   *\n   * Example format:\n   *   {\n   *     id: 'some unique id',\n   *     label: 'Name of the range',\n   *     from: undefined, to: '2023/03/29'\n   *   },\n   *   // ... other predefined date range options ...\n   */\n  @Prop() dateRangeOptions: DateDropdownOption[] = [];\n\n  @Watch('dateRangeOptions')\n  onDateRangeOptionsChange() {\n    this.initialize();\n    this.onDateRangeIdChange();\n  }\n\n  /**\n   * Locale identifier (e.g. 'en' or 'de').\n   */\n  @Prop() locale?: string;\n\n  /**\n   * The index of which day to start the week on, based on the Locale#weekdays array.\n   * E.g. if the locale is en-us, weekStartIndex = 1 results in starting the week on monday.\n   */\n  @Prop() weekStartIndex = 0;\n\n  /**\n   * Text for custom dropdown item. Will be used for translation.\n   */\n  @Prop({ attribute: 'i18n-custom-item' }) i18nCustomItem = 'Custom...';\n\n  /**\n   * Text for the done button. Will be used for translation.\n   */\n  @Prop({ attribute: 'i18n-done' }) i18nDone = 'Done';\n\n  /**\n   * Text for the done button. Will be used for translation.\n   */\n  @Prop({ attribute: 'i18n-no-range' }) i18nNoRange = 'No range set';\n\n  /** @internal */\n  @Prop() today = DateTime.now().toISO();\n\n  /**\n   * EventEmitter for date range change events.\n   *\n   * This event is emitted when the date range changes within the component.\n   * The event payload contains information about the selected date range.\n   */\n  @Event()\n  private readonly dateRangeChange!: EventEmitter<DateRangeChangeEvent>;\n\n  @State() private selectedDateRangeId: LiteralStringUnion<'custom'> = '';\n  @State() private currentRangeValue?: {\n    from?: string;\n    to?: string;\n    id: string;\n  };\n  private readonly triggerRef = makeRef<HTMLElement>();\n\n  @Watch('disabled')\n  onDisabledChange() {\n    if (this.disabled) {\n      this.closeDropdown();\n    }\n  }\n\n  private datePickerTouched = false;\n\n  componentWillLoad() {\n    this.initialize();\n    this.setDateRangeSelection(this.dateRangeId);\n  }\n\n  /**\n   * Retrieves the currently selected date range from the component.\n   * This method returns the selected date range as a `DateChangeEvent` object.\n   */\n  @Method()\n  public async getDateRange(): Promise<DateRangeChangeEvent> {\n    return this.currentRangeValue || { id: '', from: '', to: '' };\n  }\n\n  private initialize() {\n    const isCustomRange =\n      this.dateRangeId === 'custom' ||\n      (!this.dateRangeId && !!this.from && !!this.to);\n\n    if (isCustomRange && this.customRangeAllowed) {\n      this.selectedDateRangeId = 'custom';\n      this.updateCurrentDate();\n\n      return;\n    }\n    const isValidConfiguration = !isCustomRange && !this.from;\n    if (!isValidConfiguration) {\n      console.warn(\n        '\"from\" and \"range-date-id\" is provided this is an invalid combination. Using \"custom\".'\n      );\n\n      this.selectedDateRangeId = 'custom';\n      this.updateCurrentDate();\n\n      return;\n    }\n  }\n\n  private updateCurrentDate() {\n    this.currentRangeValue = {\n      id: this.selectedDateRangeId,\n      from: this.from,\n      to: this.to,\n    };\n  }\n\n  private onDateSelect(\n    rangeValue: { from?: string; to?: string; id: string },\n    preserveDropdown = true\n  ) {\n    this.dateRangeChange.emit(rangeValue);\n\n    if (preserveDropdown) {\n      this.closeDropdown();\n    }\n\n    this.datePickerTouched = false;\n  }\n\n  private onRangeListSelect(id: string) {\n    if (this.setDateRangeSelection(id) && this.currentRangeValue) {\n      this.onDateSelect(this.currentRangeValue);\n    }\n  }\n\n  private setDateRangeSelection(id: string) {\n    this.selectedDateRangeId = id;\n    const option = this.dateRangeOptions.find((range) => range.id === id);\n\n    if (option) {\n      this.currentRangeValue = option;\n    }\n\n    return option;\n  }\n\n  private closeDropdown() {\n    const dropdown = this.hostElement.shadowRoot!.querySelector('ix-dropdown');\n\n    if (dropdown) {\n      dropdown.show = false;\n    }\n  }\n\n  private getButtonLabel() {\n    if (this.selectedDateRangeId === 'custom' && this.currentRangeValue?.from) {\n      let range = this.currentRangeValue.from;\n\n      if (this.currentRangeValue.to) {\n        range += ` - ${this.currentRangeValue.to}`;\n      }\n\n      return range;\n    }\n\n    if (!this.selectedDateRangeId) {\n      return this.i18nNoRange;\n    }\n\n    if (!this.dateRangeOptions || this.dateRangeOptions?.length === 0) {\n      return this.i18nNoRange;\n    }\n\n    const option = this.dateRangeOptions.find(\n      (option) => option.id === this.selectedDateRangeId\n    );\n\n    if (!option) {\n      console.error(\n        `Cannot find range option with id ${this.selectedDateRangeId}`\n      );\n      return this.i18nNoRange;\n    }\n\n    return option.label;\n  }\n\n  render() {\n    return (\n      <Host>\n        <ix-button\n          data-testid=\"date-dropdown-trigger\"\n          data-date-dropdown-trigger\n          variant={this.variant}\n          ghost={this.ghost}\n          outline={this.outline}\n          loading={this.loading}\n          icon={iconHistory}\n          ref={this.triggerRef}\n          disabled={this.disabled}\n        >\n          {this.getButtonLabel()}\n        </ix-button>\n        <ix-dropdown\n          data-testid=\"date-dropdown\"\n          data-date-dropdown\n          class=\"min-width max-height\"\n          trigger={this.triggerRef.waitForCurrent()}\n          closeBehavior=\"outside\"\n          placement=\"bottom-start\"\n          onShowChanged={({ detail: show }) => {\n            if (\n              !show &&\n              this.selectedDateRangeId === 'custom' &&\n              this.datePickerTouched &&\n              this.currentRangeValue\n            ) {\n              this.onDateSelect(this.currentRangeValue);\n            }\n          }}\n        >\n          <ix-layout-grid noMargin>\n            <ix-row>\n              {this.dateRangeOptions?.length > 1 && (\n                <ix-col\n                  class={{\n                    'no-margin': true,\n                    'border-right': this.selectedDateRangeId === 'custom',\n                  }}\n                >\n                  {this.dateRangeOptions.map((dateRangeOption) => (\n                    <ix-dropdown-item\n                      label={dateRangeOption.label}\n                      onClick={() => this.onRangeListSelect(dateRangeOption.id)}\n                      checked={this.selectedDateRangeId === dateRangeOption.id}\n                    ></ix-dropdown-item>\n                  ))}\n                  <div hidden={!this.customRangeAllowed}>\n                    <ix-dropdown-item\n                      label={this.i18nCustomItem}\n                      checked={this.selectedDateRangeId === 'custom'}\n                      onClick={() => this.onRangeListSelect('custom')}\n                    ></ix-dropdown-item>\n                  </div>\n                </ix-col>\n              )}\n              <ix-col class=\"no-margin\">\n                {this.selectedDateRangeId === 'custom' && (\n                  <Fragment>\n                    <ix-date-picker\n                      standaloneAppearance={false}\n                      locale={this.locale}\n                      onDateChange={(e) => {\n                        e.stopPropagation();\n                        this.currentRangeValue = {\n                          ...e.detail,\n                          id: 'custom',\n                        };\n                        this.datePickerTouched = true;\n                      }}\n                      onDateRangeChange={(e) => e.stopPropagation()}\n                      format={this.format}\n                      range={this.range}\n                      from={this.from || this.currentRangeValue?.from}\n                      to={this.to || this.currentRangeValue?.to}\n                      minDate={this.minDate}\n                      maxDate={this.maxDate}\n                      today={this.today}\n                      weekStartIndex={this.weekStartIndex}\n                      showWeekNumbers={this.showWeekNumbers}\n                    ></ix-date-picker>\n                    <div class=\"pull-right\">\n                      <ix-button\n                        onClick={() => {\n                          if (this.currentRangeValue) {\n                            this.onDateSelect(this.currentRangeValue);\n                          }\n                        }}\n                      >\n                        {this.i18nDone}\n                      </ix-button>\n                    </div>\n                  </Fragment>\n                )}\n              </ix-col>\n            </ix-row>\n          </ix-layout-grid>\n        </ix-dropdown>\n      </Host>\n    );\n  }\n}\n"],"names":["makeRef","currentChangedCallback","resolve","current","currentPromise","Promise","res","setRefFunction","ref","undefined","waitForCurrent","async","DateDropdown","constructor","hostRef","disabled","format","range","from","to","minDate","maxDate","dateRangeId","variant","outline","ghost","loading","showWeekNumbers","customRangeAllowed","dateRangeOptions","weekStartIndex","i18nCustomItem","i18nDone","i18nNoRange","today","DateTime","now","toISO","selectedDateRangeId","triggerRef","datePickerTouched","onDateRangeIdChange","this","onRangeListSelect","updateCurrentDate","setDateRangeSelection","currentRangeValue","onDateSelect","id","onDateRangeOptionsChange","initialize","onDisabledChange","closeDropdown","componentWillLoad","getDateRange","isCustomRange","console","warn","rangeValue","preserveDropdown","arguments","length","dateRangeChange","emit","option","find","dropdown","hostElement","shadowRoot","querySelector","show","getButtonLabel","_a","concat","_b","label","error","render","h","Host","key","icon","iconHistory","class","trigger","closeBehavior","placement","onShowChanged","_ref","detail","noMargin","map","dateRangeOption","onClick","checked","hidden","Fragment","standaloneAppearance","locale","onDateChange","e","stopPropagation","Object","assign","onDateRangeChange","_c"],"sourceRoot":""}