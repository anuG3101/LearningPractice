{"version":3,"file":"static/js/4431.2073c195.chunk.js","mappings":"yKAAA,MC+BaA,EAAW,MALxBC,WAAAA,CAAAC,I,8DAWU,KAAOC,QAAuB,UAK9B,KAAaC,cAAkB,OAK/B,KAAOC,SAAG,EAKV,KAAKC,OAAG,EAoBR,KAAQC,UAAG,EAKX,KAASC,UAAqB,eAE7B,KAAMC,QAAG,CAiEnB,CAvDSC,cAAAA,GACFC,KAAKC,gBAAkBD,KAAKE,kBAC9BF,KAAKE,gBAAgBC,QAAUH,KAAKC,e,CAIxCG,gBAAAA,GACEJ,KAAKD,gB,CAGPM,MAAAA,G,MACE,MAAMC,EAAmB,CACvBd,QAASQ,KAAKR,QACdE,QAASM,KAAKN,QACdC,MAAOK,KAAKL,MACZC,SAAUI,KAAKJ,SACfW,MAAO,CACL,sBAAuBP,KAAKN,UAGhC,OACEc,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAAAC,IAAA,6CACHF,EAAAA,EAAAA,GAAA,OAAAE,IAAA,2CAAKH,MAAO,CAAE,aAAa,EAAM,cAAeP,KAAKN,UAClDM,KAAKW,OACJH,EAAAA,EAAAA,GACM,YAAAI,OAAAC,OAAA,GAAAP,EACJ,CAAAQ,KAAMd,KAAKc,KACXC,QAAUC,GAAMhB,KAAKiB,YAAYC,KAAKF,KAErChB,KAAKW,QAGRH,EAAAA,EAAAA,GACM,iBAAAI,OAAAC,OAAA,GAAAP,EACJ,CAAAQ,KAAMd,KAAKc,KACXC,QAAUC,GAAMhB,KAAKiB,YAAYC,KAAKF,OAG1CR,EAAAA,EAAAA,GAAA,iBAAAI,OAAAC,OAAA,CAAAH,IAAA,4CACMJ,EAAgB,CACpBa,IAAMC,GAAOpB,KAAKC,eAAiBmB,EACnCb,MAAO,SACPO,KAAwB,QAAlBO,EAAArB,KAAKsB,iBAAa,IAAAD,EAAAA,EAAAE,EAAAA,OAI5Bf,EAAAA,EAAAA,GAAA,eAAAE,IAAA,2CACES,IAAMC,GAAOpB,KAAKE,gBAAkBkB,EACpC3B,cAAeO,KAAKP,gBAEpBe,EAAAA,EAAAA,GAAa,QAAAE,IAAA,8C,iDD3IA,g7C","sources":["../node_modules/@siemens/ix/dist/esm/src/components/split-button/split-button.scss?tag=ix-split-button&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/split-button/split-button.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n@import 'mixins/shadow-dom/component';\n@import 'legacy/components/button-group';\n\n:host {\n  @include ix-component;\n  display: inline-block;\n\n  .btn-group {\n    position: relative;\n    display: inline-flex;\n    vertical-align: middle;\n    width: 100%;\n\n    > ix-button:nth-child(1) {\n      width: calc(100% - 2rem);\n    }\n\n    > ix-button:nth-child(2) {\n      width: 2rem;\n    }\n  }\n\n  .middle-gap {\n    gap: 0.125rem;\n  }\n\n  .left-button-border {\n    border-top-width: 0.125rem;\n    border-right-width: 0;\n    border-left-width: 0.125rem;\n    border-bottom-width: 0.125rem;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n  State,\n} from '@stencil/core';\nimport { ButtonVariant } from '../button/button';\nimport { AlignedPlacement } from '../dropdown/placement';\nimport { iconContextMenu } from '@siemens/ix-icons/icons';\nimport { CloseBehavior } from '../dropdown/dropdown-controller';\n\nexport type SplitButtonVariant = ButtonVariant;\n\n@Component({\n  tag: 'ix-split-button',\n  styleUrl: 'split-button.scss',\n  shadow: true,\n})\nexport class SplitButton {\n  @Element() hostElement!: HTMLIxSplitButtonElement;\n\n  /**\n   * Color variant of button\n   */\n  @Prop() variant: SplitButtonVariant = 'primary';\n\n  /**\n   * Controls if the dropdown will be closed in response to a click event depending on the position of the event relative to the dropdown.\n   */\n  @Prop() closeBehavior: CloseBehavior = 'both';\n\n  /**\n   * Button outline variant\n   */\n  @Prop() outline = false;\n\n  /**\n   * Button invisible\n   */\n  @Prop() ghost = false;\n\n  /**\n   * Button label\n   */\n  @Prop() label?: string;\n\n  /**\n   * Button icon\n   */\n  @Prop() icon?: string;\n\n  /**\n   * Icon of the button on the right\n   */\n  @Prop() splitIcon?: string;\n\n  /**\n   * Disabled\n   */\n  @Prop() disabled = false;\n\n  /**\n   * Placement of the dropdown\n   */\n  @Prop() placement: AlignedPlacement = 'bottom-start';\n\n  @State() toggle = false;\n\n  /**\n   * Button clicked\n   */\n  @Event() buttonClick!: EventEmitter<MouseEvent>;\n\n  private triggerElement?: HTMLElement;\n  private dropdownElement?: HTMLIxDropdownElement;\n\n  private linkTriggerRef() {\n    if (this.triggerElement && this.dropdownElement) {\n      this.dropdownElement.trigger = this.triggerElement;\n    }\n  }\n\n  componentDidLoad() {\n    this.linkTriggerRef();\n  }\n\n  render() {\n    const buttonAttributes = {\n      variant: this.variant,\n      outline: this.outline,\n      ghost: this.ghost,\n      disabled: this.disabled,\n      class: {\n        'left-button-border': !this.outline,\n      },\n    };\n    return (\n      <Host>\n        <div class={{ 'btn-group': true, 'middle-gap': !this.outline }}>\n          {this.label ? (\n            <ix-button\n              {...buttonAttributes}\n              icon={this.icon}\n              onClick={(e) => this.buttonClick.emit(e)}\n            >\n              {this.label}\n            </ix-button>\n          ) : (\n            <ix-icon-button\n              {...buttonAttributes}\n              icon={this.icon}\n              onClick={(e) => this.buttonClick.emit(e)}\n            ></ix-icon-button>\n          )}\n          <ix-icon-button\n            {...buttonAttributes}\n            ref={(r) => (this.triggerElement = r)}\n            class={'anchor'}\n            icon={this.splitIcon ?? iconContextMenu}\n          ></ix-icon-button>\n        </div>\n\n        <ix-dropdown\n          ref={(r) => (this.dropdownElement = r)}\n          closeBehavior={this.closeBehavior}\n        >\n          <slot></slot>\n        </ix-dropdown>\n      </Host>\n    );\n  }\n}\n"],"names":["SplitButton","constructor","hostRef","variant","closeBehavior","outline","ghost","disabled","placement","toggle","linkTriggerRef","this","triggerElement","dropdownElement","trigger","componentDidLoad","render","buttonAttributes","class","h","Host","key","label","Object","assign","icon","onClick","e","buttonClick","emit","ref","r","_a","splitIcon","iconContextMenu"],"sourceRoot":""}