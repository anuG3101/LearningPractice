{"version":3,"file":"static/js/7288.ffd62fe7.chunk.js","mappings":"+JAAA,MCQaA,EAAU,MALvBC,WAAAA,CAAAC,I,eAWU,KAAAC,OAGF,CACJ,CAAEC,SAAU,IAAKC,QAAS,GAC1B,CAAED,SAAU,OAAQC,QAAS,IAGvB,KAAcC,eAMhB,GAEW,KAAAC,SAAW,IAAIC,kBAAiB,IAC/CC,KAAKC,iCAGU,KAAAC,eAAiB,IAAIC,gBAAe,KACnDH,KAAKC,iCA+FR,CA5FCG,iBAAAA,GACEJ,KAAKF,SAASO,QAAQL,KAAKM,YAAa,CACtCC,WAAW,EACXC,SAAS,EACTC,YAAY,EACZC,gBAAiB,CAAC,kBAEpBV,KAAKE,eAAeG,QAAQL,KAAKM,aAEjCN,KAAKC,8B,CAGPU,iBAAAA,GACEX,KAAKC,8B,CAGPW,oBAAAA,GACMZ,KAAKF,UACPE,KAAKF,SAASe,aAGZb,KAAKE,gBACPF,KAAKE,eAAeW,Y,CAKxBC,oBAAAA,GACEd,KAAKH,eAAiB,GACtBG,KAAKN,OAAOqB,SAASrB,IACnB,MAAMsB,EAAaC,OAAOC,WAAW,eAADC,OAAgBzB,EAAOC,SAAQ,MACnEK,KAAKH,eAAeuB,KAAK,CACvBJ,aACAtB,a,CAKE2B,WAAAA,CAAYC,GAClB,IAAKA,EACH,OAAO,EAGT,MAAMC,EAASC,SAASF,GACxB,OAAIG,MAAMF,GACD,EAGFA,C,CAGDtB,4BAAAA,GACND,KAAKc,uBAEL,IAAIY,EAAgB,EAGpB1B,KAAKH,eAAekB,SAASC,IACvBA,EAAWA,WAAWW,UACxBD,EAAgBV,EAAWtB,OAAOE,YAKtCgC,MAAMC,KACJ7B,KAAKM,YAAYwB,UACjBf,SAASgB,IACT,IAAIC,EAAUhC,KAAKqB,YAAYU,EAAME,aAAa,iBAClDD,EAAUE,KAAKC,IAAIH,EAASN,GAC5B,MAAMU,EAAaJ,EAAUN,EAE7BK,EAAMM,MAAMC,MAAQ,QAAHnB,OAAwB,KAAbiB,EAAiB,QAAAjB,OAC3C,EAAIiB,EACN,OAAAjB,OAlBkB,4BAkBC,O,CAUvBoB,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAAAC,IAAA,6CACHF,EAAAA,EAAAA,GAAK,OAAAE,IAAA,2CAAAC,MAAM,cACTH,EAAAA,EAAAA,GAAa,QAAAE,IAAA,8C,+GD7HD,iO","sources":["../node_modules/@siemens/ix/dist/esm/src/components/layout-auto/layout-auto.scss?tag=ix-layout-auto&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/layout-auto/layout-auto.tsx"],"sourcesContent":[":host {\n  display: block;\n  position: relative;\n  margin: 0 0.75rem;\n\n  --ix-layout-grid-gap: 1.5rem;\n\n  .container {\n    display: flex;\n    align-items: stretch;\n    flex-wrap: wrap;\n    gap: var(--ix-layout-grid-gap);\n  }\n\n  ::slotted(*) {\n    flex-grow: 0;\n    flex-shrink: 0;\n  }\n}\n","import { Component, Element, Host, Prop, Watch, h } from '@stencil/core';\nimport { IxComponent } from '../utils/internal';\n\n@Component({\n  tag: 'ix-layout-auto',\n  styleUrl: 'layout-auto.scss',\n  shadow: true,\n})\nexport class LayoutForm implements IxComponent {\n  @Element() hostElement!: HTMLIxLayoutAutoElement;\n\n  /**\n   * Defines the layout of the form.\n   */\n  @Prop() layout: {\n    minWidth: string;\n    columns: number;\n  }[] = [\n    { minWidth: '0', columns: 1 },\n    { minWidth: '48em', columns: 2 },\n  ];\n\n  private mediaQueryList: {\n    mediaQuery: MediaQueryList;\n    layout: {\n      minWidth: string;\n      columns: number;\n    };\n  }[] = [];\n\n  private readonly observer = new MutationObserver(() =>\n    this.calculateGridTemplateColumns()\n  );\n\n  private readonly resizeObserver = new ResizeObserver(() => {\n    this.calculateGridTemplateColumns();\n  });\n\n  connectedCallback(): void {\n    this.observer.observe(this.hostElement, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['data-colspan'],\n    });\n    this.resizeObserver.observe(this.hostElement);\n\n    this.calculateGridTemplateColumns();\n  }\n\n  componentWillLoad(): void | Promise<void> {\n    this.calculateGridTemplateColumns();\n  }\n\n  disconnectedCallback(): void {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n  }\n\n  @Watch('layout')\n  updateMediaQueryList() {\n    this.mediaQueryList = [];\n    this.layout.forEach((layout) => {\n      const mediaQuery = window.matchMedia(`(min-width: ${layout.minWidth})`);\n      this.mediaQueryList.push({\n        mediaQuery,\n        layout,\n      });\n    });\n  }\n\n  private parseNumber(number: string | null) {\n    if (!number) {\n      return 1;\n    }\n\n    const result = parseInt(number);\n    if (isNaN(result)) {\n      return 1;\n    }\n\n    return result;\n  }\n\n  private calculateGridTemplateColumns() {\n    this.updateMediaQueryList();\n\n    let layoutColumns = 1;\n    let columnSpacing = 'var(--ix-layout-grid-gap)';\n\n    this.mediaQueryList.forEach((mediaQuery) => {\n      if (mediaQuery.mediaQuery.matches) {\n        layoutColumns = mediaQuery.layout.columns;\n      }\n    });\n\n    let column = 0;\n    Array.from(\n      this.hostElement.children as HTMLCollectionOf<HTMLElement>\n    ).forEach((child) => {\n      let colspan = this.parseNumber(child.getAttribute('data-colspan'));\n      colspan = Math.min(colspan, layoutColumns);\n      const childRatio = colspan / layoutColumns;\n\n      child.style.width = `calc(${childRatio * 99.9}% - ${\n        1 - childRatio\n      } * ${columnSpacing})`;\n\n      if (column + colspan > layoutColumns) {\n        column = 0;\n      }\n\n      column = (column + colspan) % layoutColumns;\n    });\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class=\"container\">\n          <slot></slot>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"names":["LayoutForm","constructor","hostRef","layout","minWidth","columns","mediaQueryList","observer","MutationObserver","this","calculateGridTemplateColumns","resizeObserver","ResizeObserver","connectedCallback","observe","hostElement","childList","subtree","attributes","attributeFilter","componentWillLoad","disconnectedCallback","disconnect","updateMediaQueryList","forEach","mediaQuery","window","matchMedia","concat","push","parseNumber","number","result","parseInt","isNaN","layoutColumns","matches","Array","from","children","child","colspan","getAttribute","Math","min","childRatio","style","width","render","h","Host","key","class"],"sourceRoot":""}