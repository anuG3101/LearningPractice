{"version":3,"file":"static/js/5460.bc9c0e9b.chunk.js","mappings":"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","sources":["../node_modules/@siemens/ix/dist/esm/src/components/utils/mutation-observer.ts","../node_modules/@siemens/ix/dist/esm/src/components/input/input.fc.tsx","../node_modules/@siemens/ix/dist/esm/src/components/input/input.util.ts","../node_modules/@siemens/ix/dist/esm/src/components/input/input.animation.ts","../node_modules/@siemens/ix/dist/esm/src/components/input/number-input.tsx","../node_modules/@siemens/ix/dist/esm/src/components/input/number-input.scss?tag=ix-number-input&encapsulation=shadow","../node_modules/@siemens/ix/dist/esm/src/components/utils/condition-checks.ts","../node_modules/@siemens/ix/dist/esm/src/components/utils/a11y.ts","../node_modules/@siemens/ix/dist/esm/src/components/utils/make-ref.ts","../node_modules/@siemens/ix/dist/esm/src/components/utils/input/validation.ts","../node_modules/@siemens/ix/dist/esm/src/components/utils/rwd.util.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport const createMutationObserver = (callback: MutationCallback) =>\n  new MutationObserver(callback);\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { h, FunctionalComponent } from '@stencil/core';\nimport { MakeRef } from '../utils/make-ref';\nimport { A11yAttributes } from '../utils/a11y';\n\nexport function TextareaElement(\n  props: Readonly<{\n    resizeBehavior: 'both' | 'horizontal' | 'vertical' | 'none';\n    textareaHeight?: string;\n    textareaWidth?: string;\n    textareaRows?: number;\n    textareaCols?: number;\n    disabled: boolean;\n    readonly: boolean;\n    maxLength?: number;\n    minLength?: number;\n    isInvalid: boolean;\n    required: boolean;\n    value: string;\n    placeholder?: string;\n    textAreaRef: (el: HTMLTextAreaElement | undefined) => void;\n    valueChange: (value: string) => void;\n    updateFormInternalValue: (value: string) => void;\n    onBlur: () => void;\n    ariaAttributes?: A11yAttributes;\n  }>\n) {\n  return (\n    <textarea\n      readOnly={props.readonly}\n      disabled={props.disabled}\n      maxLength={props.maxLength}\n      minLength={props.minLength}\n      cols={props.textareaCols}\n      rows={props.textareaRows}\n      ref={props.textAreaRef}\n      class={{\n        'is-invalid': props.isInvalid,\n      }}\n      required={props.required}\n      value={props.value}\n      placeholder={props.placeholder}\n      onInput={(inputEvent) => {\n        const target = inputEvent.target as HTMLInputElement;\n        props.updateFormInternalValue(target.value);\n        props.valueChange(target.value);\n      }}\n      onBlur={() => props.onBlur()}\n      style={{\n        resize: props.resizeBehavior,\n        height: props.textareaHeight,\n        width: props.textareaWidth,\n      }}\n      {...props.ariaAttributes}\n    ></textarea>\n  );\n}\n\nexport function InputElement(\n  props: Readonly<{\n    id: string;\n    disabled: boolean;\n    readonly: boolean;\n    maxLength?: string | number;\n    minLength?: string | number;\n    max?: string | number;\n    min?: string | number;\n    step?: string | number;\n    pattern?: string;\n    type: string;\n    isInvalid: boolean;\n    required: boolean;\n    value: string | number;\n    placeholder?: string;\n    inputRef: (el: HTMLInputElement | undefined) => void;\n    onKeyPress: (event: KeyboardEvent) => void;\n    valueChange: (value: string) => void;\n    updateFormInternalValue: (value: string) => void;\n    onBlur: () => void;\n    ariaAttributes?: A11yAttributes;\n  }>\n) {\n  return (\n    <input\n      id={props.id}\n      autoComplete=\"off\"\n      readOnly={props.readonly}\n      disabled={props.disabled}\n      step={props.step}\n      min={props.min}\n      max={props.max}\n      maxLength={props.maxLength ? Number(props.maxLength) : undefined}\n      minLength={props.minLength ? Number(props.minLength) : undefined}\n      ref={props.inputRef}\n      pattern={props.pattern}\n      type={props.type}\n      class={{\n        'is-invalid': props.isInvalid,\n      }}\n      required={props.required}\n      value={props.value}\n      placeholder={props.placeholder}\n      onKeyPress={(event) => props.onKeyPress(event)}\n      onInput={(inputEvent) => {\n        const target = inputEvent.target as HTMLInputElement;\n        props.updateFormInternalValue(target.value);\n        props.valueChange(target.value);\n      }}\n      onBlur={() => props.onBlur()}\n      {...props.ariaAttributes}\n    ></input>\n  );\n}\n\nexport const SlotEnd: FunctionalComponent<{\n  slotEndRef: MakeRef<HTMLDivElement>;\n  onSlotChange?: (e: Event) => void;\n}> = (props, children) => {\n  return (\n    <div class=\"end-container\" ref={props.slotEndRef}>\n      <slot name=\"end\" onSlotchange={props.onSlotChange}></slot>\n      {children}\n    </div>\n  );\n};\n\nexport const SlotStart: FunctionalComponent<{\n  slotStartRef: MakeRef<HTMLDivElement>;\n  onSlotChange?: (e: Event) => void;\n}> = (props) => {\n  return (\n    <div class=\"start-container\" ref={props.slotStartRef}>\n      <slot name=\"start\" onSlotchange={props.onSlotChange}></slot>\n    </div>\n  );\n};\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { A11yAttributes, a11yBoolean } from '../utils/a11y';\nimport {\n  IxFormComponent,\n  IxInputFieldComponent,\n  ValidationResults,\n  shouldSuppressInternalValidation,\n} from '../utils/input';\nimport { createMutationObserver } from '../utils/mutation-observer';\nimport { convertToRemString } from '../utils/rwd.util';\nimport { generateUUID } from '../utils/uuid';\nimport { shakeInput } from './input.animation';\n\nexport function createIdIfNotExists(\n  element: IxFormComponent,\n  idPrefix: string = 'input'\n) {\n  return element.hasAttribute('id')\n    ? element.getAttribute('id')\n    : `${idPrefix}-${generateUUID()}`;\n}\n\nexport function mapValidationResult<T>(\n  ref: IxInputFieldComponent<T>,\n  result: ValidationResults\n) {\n  ref.isInvalid = result.isInvalid || result.isInvalidByRequired;\n  ref.isValid = result.isValid;\n  ref.isInfo = result.isInfo;\n  ref.isWarning = result.isWarning;\n}\n\nexport function checkAllowedKeys<T>(\n  comp: IxInputFieldComponent<T>,\n  event: KeyboardEvent\n) {\n  if (comp.allowedCharactersPattern) {\n    const regex = new RegExp(comp.allowedCharactersPattern);\n    if (!regex.test(event.key)) {\n      event.preventDefault();\n      shakeInput(comp.inputRef.current);\n    }\n  }\n}\n\nexport async function checkInternalValidity<T>(\n  comp: IxFormComponent<T>,\n  input: HTMLInputElement | HTMLTextAreaElement\n) {\n  const validityState = input.validity;\n\n  const eventResult = comp.validityStateChange.emit(validityState);\n\n  if (eventResult.defaultPrevented) {\n    return;\n  }\n\n  if (!comp.value) {\n    return;\n  }\n\n  const skipValidation = await shouldSuppressInternalValidation(comp);\n  if (skipValidation) {\n    return;\n  }\n\n  const { valid } = validityState;\n  comp.hostElement.classList.toggle('ix-invalid--validity-invalid', !valid);\n}\n\nexport function onInputBlur<T>(\n  comp: IxFormComponent<T>,\n  input?: HTMLInputElement | HTMLTextAreaElement | null\n) {\n  comp.ixBlur.emit();\n\n  if (!input) {\n    throw new Error('Input element is not available');\n  }\n\n  input.setAttribute('data-ix-touched', 'true');\n  checkInternalValidity(comp, input);\n}\n\nexport function applyPaddingEnd(\n  inputElement: HTMLElement | null,\n  width: number,\n  options: {\n    slotEnd: boolean;\n    additionalPaddingRight?: string;\n  }\n) {\n  if (!inputElement) {\n    return;\n  }\n\n  const remInPixels = 16;\n  const padding = convertToRemString(width + remInPixels / 2);\n\n  if (options.slotEnd) {\n    inputElement.style.paddingRight = `calc(${padding} + ${\n      options.additionalPaddingRight ?? '0rem'\n    })`;\n  } else {\n    inputElement.style.paddingLeft = padding;\n  }\n}\n\nexport function adjustPaddingForStartAndEnd(\n  startElement: HTMLElement | null,\n  endElement: HTMLElement | null,\n  inputElement: HTMLElement | null\n) {\n  requestAnimationFrame(() => {\n    requestAnimationFrame(() => {\n      if (startElement) {\n        const startBoundingRect = startElement.getBoundingClientRect();\n        if (startBoundingRect) {\n          applyPaddingEnd(inputElement, startBoundingRect.width, {\n            slotEnd: false,\n          });\n        }\n      }\n\n      if (endElement) {\n        const endBoundingRect = endElement.getBoundingClientRect();\n        if (endBoundingRect) {\n          applyPaddingEnd(inputElement, endBoundingRect.width, {\n            slotEnd: true,\n          });\n        }\n      }\n    });\n  });\n}\n\nexport function getAriaAttributesForInput(\n  component: IxInputFieldComponent\n): A11yAttributes {\n  const inputAria: A11yAttributes = {\n    'aria-invalid': `${a11yBoolean(component.isInvalid)}`,\n    'aria-required': `${a11yBoolean(component.required)}`,\n  };\n\n  if (component.isInvalid && component.invalidText) {\n    inputAria['aria-errormessage'] = component.invalidText;\n  }\n  return inputAria;\n}\n\nexport type DisposableChangesAndVisibilityObservers = () => void;\n\nexport const addDisposableChangesAndVisibilityObservers = (\n  element: HTMLElement,\n  callback: () => void\n): DisposableChangesAndVisibilityObservers => {\n  const intersectionObserver = observeElementUntilVisible(element, callback);\n  const mutationObserver = createMutationObserver(callback);\n\n  mutationObserver.observe(element, {\n    subtree: true,\n    attributes: true,\n  });\n\n  return () => {\n    intersectionObserver.disconnect();\n    mutationObserver.disconnect();\n  };\n};\n\nfunction observeElementUntilVisible(\n  hostElement: HTMLElement,\n  updateCallback: () => void\n): IntersectionObserver {\n  const intersectionObserver = new IntersectionObserver((entries) => {\n    entries.forEach((entry) => {\n      if (entry.isIntersecting) {\n        updateCallback();\n      }\n    });\n  });\n\n  intersectionObserver.observe(hostElement);\n  return intersectionObserver;\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport anime from 'animejs';\n\nexport function shakeInput(input: HTMLInputElement) {\n  const xMax = 5;\n  anime({\n    targets: input,\n    duration: 200,\n    easing: 'easeInOutSine',\n    loop: 2,\n    translateX: [\n      {\n        value: xMax * -1,\n      },\n      {\n        value: xMax,\n      },\n      {\n        value: xMax / -2,\n      },\n      {\n        value: xMax / 2,\n      },\n      {\n        value: 0,\n      },\n    ],\n  });\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { iconMinus, iconPlus } from '@siemens/ix-icons/icons';\nimport {\n  AttachInternals,\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n} from '@stencil/core';\nimport {\n  HookValidationLifecycle,\n  IxInputFieldComponent,\n  ValidationResults,\n} from '../utils/input';\nimport { makeRef } from '../utils/make-ref';\nimport { InputElement, SlotEnd, SlotStart } from './input.fc';\nimport {\n  addDisposableChangesAndVisibilityObservers,\n  adjustPaddingForStartAndEnd,\n  checkAllowedKeys,\n  checkInternalValidity,\n  DisposableChangesAndVisibilityObservers,\n  mapValidationResult,\n  onInputBlur,\n} from './input.util';\n\nlet numberInputIds = 0;\n\n/**\n * @form-ready\n * @slot start - Element will be displayed at the start of the input\n * @slot end - Element will be displayed at the end of the input\n */\n@Component({\n  tag: 'ix-number-input',\n  styleUrl: 'number-input.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class NumberInput implements IxInputFieldComponent<number> {\n  @Element() hostElement!: HTMLIxNumberInputElement;\n  @AttachInternals() formInternals!: ElementInternals;\n\n  /**\n   * name of the input element\n   */\n  @Prop({ reflect: true }) name?: string;\n\n  /**\n   * placeholder of the input element\n   */\n  @Prop({ reflect: true }) placeholder?: string;\n\n  /**\n   * The value of the input field\n   */\n  @Prop({ reflect: true, mutable: true }) value: number = 0;\n\n  /**\n   * Indicates if the field is required\n   */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /**\n   * Disables the input field\n   */\n  @Prop() disabled: boolean = false;\n\n  /**\n   * Indicates if the field is read-only\n   */\n  @Prop() readonly: boolean = false;\n\n  /**\n   * The helper text for the input field\n   */\n  @Prop() helperText?: string;\n\n  /**\n   * The info text for the input field\n   */\n  @Prop() infoText?: string;\n\n  /**\n   * Indicates if the text should be shown as a tooltip\n   */\n  @Prop() showTextAsTooltip?: boolean;\n\n  /**\n   * The valid text for the input field\n   */\n  @Prop() validText?: string;\n\n  /**\n   * The warning text for the input field\n   */\n  @Prop() warningText?: string;\n\n  /**\n   * The label for the input field\n   */\n  @Prop({ reflect: true }) label?: string;\n\n  /**\n   * The error text for the input field\n   */\n  @Prop() invalidText?: string;\n\n  /**\n   * The pattern for the input field\n   */\n  @Prop() pattern?: string;\n\n  /**\n   * The minimum value for the input field\n   */\n  @Prop() min?: string | number;\n\n  /**\n   * The maximum value for the input field\n   */\n  @Prop() max?: string | number;\n\n  /**\n   * The allowed characters pattern for the input field\n   */\n  @Prop() allowedCharactersPattern?: string;\n\n  /**\n   * Indicates if the stepper buttons should be shown\n   */\n  @Prop() showStepperButtons?: boolean;\n\n  /**\n   * Step value to increment or decrement the input value\n   *\n   * @since 3.0.0\n   */\n  @Prop() step?: string | number;\n\n  /**\n   * Event emitted when the value of the input field changes\n   */\n  @Event() valueChange!: EventEmitter<number>;\n\n  /**\n   * Event emitted when the validity state of the input field changes\n   */\n  @Event() validityStateChange!: EventEmitter<ValidityState>;\n\n  /**\n   * Event emitted when the input field loses focus\n   */\n  @Event() ixBlur!: EventEmitter<void>;\n\n  @State() isInvalid = false;\n  @State() isValid = false;\n  @State() isInfo = false;\n  @State() isWarning = false;\n  @State() isInvalidByRequired = false;\n\n  private readonly inputRef = makeRef<HTMLInputElement>();\n  private readonly slotEndRef = makeRef<HTMLDivElement>();\n  private readonly slotStartRef = makeRef<HTMLDivElement>();\n  private readonly numberInputId = `number-input-${numberInputIds++}`;\n  private touched = false;\n\n  private disposableChangesAndVisibilityObservers?: DisposableChangesAndVisibilityObservers;\n\n  @HookValidationLifecycle()\n  updateClassMappings(result: ValidationResults) {\n    mapValidationResult(this, result);\n  }\n\n  componentWillLoad() {\n    this.updateFormInternalValue(this.value);\n  }\n\n  connectedCallback() {\n    this.disposableChangesAndVisibilityObservers =\n      addDisposableChangesAndVisibilityObservers(\n        this.hostElement,\n        this.updatePaddings.bind(this)\n      );\n  }\n\n  disconnectedCallback() {\n    this.disposableChangesAndVisibilityObservers?.();\n  }\n\n  private updatePaddings() {\n    adjustPaddingForStartAndEnd(\n      this.slotStartRef.current,\n      this.slotEndRef.current,\n      this.inputRef.current\n    );\n  }\n\n  updateFormInternalValue(value: number) {\n    this.formInternals.setFormValue(value.toString());\n    this.value = value;\n  }\n\n  /** @internal */\n  @Method()\n  async getAssociatedFormElement(): Promise<HTMLFormElement | null> {\n    return this.formInternals.form;\n  }\n\n  /** @internal */\n  @Method()\n  async hasValidValue(): Promise<boolean> {\n    const nativeInput = await this.getNativeInputElement();\n    if (nativeInput.value === '') {\n      return Promise.resolve(false);\n    }\n\n    return Promise.resolve(\n      this.value !== null && this.value !== undefined && !isNaN(this.value)\n    );\n  }\n\n  /**\n   * Returns the native input element used under the hood\n   */\n  @Method()\n  getNativeInputElement(): Promise<HTMLInputElement> {\n    return this.inputRef.waitForCurrent();\n  }\n\n  /**\n   * Focuses the input field\n   */\n  @Method()\n  async focusInput(): Promise<void> {\n    return (await this.getNativeInputElement()).focus();\n  }\n\n  /**\n   * Returns true if the input field has been touched\n   * @internal\n   */\n  @Method()\n  isTouched(): Promise<boolean> {\n    return Promise.resolve(this.touched);\n  }\n\n  render() {\n    const showStepperButtons =\n      this.showStepperButtons && (this.disabled || this.readonly) === false;\n\n    return (\n      <Host\n        class={{\n          disabled: this.disabled,\n          readonly: this.readonly,\n        }}\n      >\n        <ix-field-wrapper\n          id={this.numberInputId}\n          required={this.required}\n          label={this.label}\n          helperText={this.helperText}\n          invalidText={this.invalidText}\n          infoText={this.infoText}\n          warningText={this.warningText}\n          validText={this.validText}\n          showTextAsTooltip={this.showTextAsTooltip}\n          isInvalid={this.isInvalid}\n          isValid={this.isValid}\n          isInfo={this.isInfo}\n          isWarning={this.isWarning}\n          controlRef={this.inputRef}\n        >\n          <div\n            class={{\n              'input-wrapper': true,\n              'show-stepper-buttons': !!this.showStepperButtons,\n            }}\n          >\n            <SlotStart\n              slotStartRef={this.slotStartRef}\n              onSlotChange={() => this.updatePaddings()}\n            ></SlotStart>\n\n            <InputElement\n              id={this.numberInputId}\n              readonly={this.readonly}\n              disabled={this.disabled}\n              step={this.step}\n              min={this.min}\n              max={this.max}\n              pattern={this.pattern}\n              type={'number'}\n              isInvalid={this.isInvalid}\n              required={this.required}\n              value={this.value}\n              placeholder={this.placeholder}\n              inputRef={this.inputRef}\n              onKeyPress={(event) => checkAllowedKeys(this, event)}\n              valueChange={(value) => this.valueChange.emit(Number(value))}\n              updateFormInternalValue={(value) =>\n                this.updateFormInternalValue(Number(value))\n              }\n              onBlur={() => {\n                onInputBlur(this, this.inputRef.current);\n                this.touched = true;\n              }}\n            ></InputElement>\n            <SlotEnd\n              slotEndRef={this.slotEndRef}\n              onSlotChange={() => this.updatePaddings()}\n            >\n              <div\n                class={{\n                  'number-stepper-container': true,\n                  'container-hidden': !showStepperButtons,\n                }}\n              >\n                <ix-icon-button\n                  ghost\n                  icon={iconMinus}\n                  size=\"16\"\n                  class=\"number-stepper-button step-minus\"\n                  aria-label=\"decrement number\"\n                  onClick={() => {\n                    if (!this.inputRef.current) {\n                      return;\n                    }\n                    this.inputRef.current.stepDown();\n                    checkInternalValidity(this, this.inputRef.current);\n                    this.updateFormInternalValue(\n                      Number(this.inputRef.current.value)\n                    );\n                    this.valueChange.emit(this.value);\n                  }}\n                ></ix-icon-button>\n                <ix-icon-button\n                  ghost\n                  icon={iconPlus}\n                  size=\"16\"\n                  class=\"number-stepper-button step-plus\"\n                  aria-label=\"increment number\"\n                  onClick={() => {\n                    if (!this.inputRef.current) {\n                      return;\n                    }\n                    this.inputRef.current.stepUp();\n                    checkInternalValidity(this, this.inputRef.current);\n                    this.updateFormInternalValue(\n                      Number(this.inputRef.current.value)\n                    );\n                    this.valueChange.emit(this.value);\n                  }}\n                ></ix-icon-button>\n              </div>\n            </SlotEnd>\n          </div>\n        </ix-field-wrapper>\n      </Host>\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n@import './input.mixins.scss';\n\n@include input-field;\n\n:host {\n  .input-wrapper.show-stepper-buttons {\n    input[type='number'] {\n      min-width: 6rem;\n    }\n  }\n\n  .number-stepper-container {\n    display: flex;\n    position: relative;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    margin-right: 0.25rem;\n\n    &.container-hidden {\n      display: none;\n    }\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport const isHttpUrl = (link: string) => {\n  if (!link) {\n    return false;\n  }\n\n  let url: URL;\n\n  try {\n    url = new URL(link);\n  } catch (e) {\n    return false;\n  }\n\n  return url.protocol === 'http:' || url.protocol === 'https:';\n};\n\nexport const isSvgDataUrl = (url: string) => {\n  if (!url) {\n    return false;\n  }\n\n  if (typeof url !== 'string') {\n    return false;\n  }\n\n  return url.startsWith('data:image/svg+xml');\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { isHttpUrl, isSvgDataUrl } from './condition-checks';\n\nexport const a11yBoolean = (value: boolean | undefined) =>\n  value ? 'true' : 'false';\n\nconst kebabCaseToUpperCaseSentence = (kebabCase: string) => {\n  const withoutFilledSuffix = kebabCase.replace('-filled', '');\n  const words = withoutFilledSuffix.split('-');\n  const sentence = words\n    .map((word) => {\n      const trimWord = word.trim();\n      const digitLessWord = trimWord.replace(/\\d+/g, '');\n\n      if (digitLessWord.length === 0) {\n        return trimWord;\n      }\n\n      return digitLessWord;\n    })\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n\n  return sentence;\n};\n\nexport const getFallbackLabelFromIconName = (iconName?: string) => {\n  if (!iconName) {\n    return 'Unknown';\n  }\n\n  if (isHttpUrl(iconName)) {\n    return 'Unknown';\n  }\n\n  if (isSvgDataUrl(iconName)) {\n    return 'Unknown';\n  }\n\n  const label = kebabCaseToUpperCaseSentence(iconName);\n\n  if (label.length === 0) {\n    return 'Unknown';\n  }\n\n  return label;\n};\n\nexport const a11yHostAttributes = (\n  hostElement: HTMLElement,\n  ignoreAttributes: A11yAttributeName[] = []\n): Record<A11yAttributeName, string> => {\n  const attributeObject: Record<string, string> = {};\n  a11yAttributes.forEach((attr) => {\n    if (hostElement.hasAttribute(attr)) {\n      const value = hostElement.getAttribute(attr);\n      if (value !== null && !ignoreAttributes.includes(attr)) {\n        attributeObject[attr] = hostElement.getAttribute(attr) ?? '';\n        hostElement.removeAttribute(attr);\n      }\n    }\n  });\n\n  return attributeObject;\n};\n\nexport type A11yAttributeName =\n  | 'role'\n  | 'aria-activedescendant'\n  | 'aria-atomic'\n  | 'aria-autocomplete'\n  | 'aria-braillelabel'\n  | 'aria-brailleroledescription'\n  | 'aria-busy'\n  | 'aria-checked'\n  | 'aria-colcount'\n  | 'aria-colindex'\n  | 'aria-colindextext'\n  | 'aria-colspan'\n  | 'aria-controls'\n  | 'aria-current'\n  | 'aria-describedby'\n  | 'aria-description'\n  | 'aria-details'\n  | 'aria-disabled'\n  | 'aria-errormessage'\n  | 'aria-expanded'\n  | 'aria-flowto'\n  | 'aria-haspopup'\n  | 'aria-hidden'\n  | 'aria-invalid'\n  | 'aria-keyshortcuts'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-level'\n  | 'aria-live'\n  | 'aria-multiline'\n  | 'aria-multiselectable'\n  | 'aria-orientation'\n  | 'aria-owns'\n  | 'aria-placeholder'\n  | 'aria-posinset'\n  | 'aria-pressed'\n  | 'aria-readonly'\n  | 'aria-relevant'\n  | 'aria-required'\n  | 'aria-roledescription'\n  | 'aria-rowcount'\n  | 'aria-rowindex'\n  | 'aria-rowindextext'\n  | 'aria-rowspan'\n  | 'aria-selected'\n  | 'aria-setsize'\n  | 'aria-sort'\n  | 'aria-valuemax'\n  | 'aria-valuemin'\n  | 'aria-valuenow'\n  | 'aria-valuetext';\n\nconst a11yAttributes: A11yAttributeName[] = [\n  'role',\n  'aria-activedescendant',\n  'aria-atomic',\n  'aria-autocomplete',\n  'aria-braillelabel',\n  'aria-brailleroledescription',\n  'aria-busy',\n  'aria-checked',\n  'aria-colcount',\n  'aria-colindex',\n  'aria-colindextext',\n  'aria-colspan',\n  'aria-controls',\n  'aria-current',\n  'aria-describedby',\n  'aria-description',\n  'aria-details',\n  'aria-disabled',\n  'aria-errormessage',\n  'aria-expanded',\n  'aria-flowto',\n  'aria-haspopup',\n  'aria-hidden',\n  'aria-invalid',\n  'aria-keyshortcuts',\n  'aria-label',\n  'aria-labelledby',\n  'aria-level',\n  'aria-live',\n  'aria-multiline',\n  'aria-multiselectable',\n  'aria-orientation',\n  'aria-owns',\n  'aria-placeholder',\n  'aria-posinset',\n  'aria-pressed',\n  'aria-readonly',\n  'aria-relevant',\n  'aria-required',\n  'aria-roledescription',\n  'aria-rowcount',\n  'aria-rowindex',\n  'aria-rowindextext',\n  'aria-rowspan',\n  'aria-selected',\n  'aria-setsize',\n  'aria-sort',\n  'aria-valuemax',\n  'aria-valuemin',\n  'aria-valuenow',\n  'aria-valuetext',\n];\n\ntype PartialRecord<K extends A11yAttributeName, T> = {\n  [P in K]?: T;\n};\nexport type A11yAttributes = PartialRecord<A11yAttributeName, string>;\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport type MakeRef<T> = {\n  (ref: T | undefined | null): void;\n  current: T | null;\n  waitForCurrent(): Promise<T>;\n};\n\ntype Resolve<T> = (value: T) => void;\n\nexport function makeRef<T>(\n  currentChangedCallback?: (element: T) => void\n): MakeRef<T> {\n  let resolve: Resolve<T> | undefined = undefined;\n  let currentPromise = new Promise<T>((res) => (resolve = res));\n  let current: T | undefined = undefined;\n\n  const setRefFunction = (ref: T | undefined) => {\n    if (ref === undefined) {\n      return;\n    }\n    current = (setRefFunction as MakeRef<T>).current = ref;\n    currentChangedCallback?.(ref);\n    resolve?.(ref);\n  };\n\n  setRefFunction.current = current as T | null;\n\n  setRefFunction.waitForCurrent = async () => {\n    await currentPromise;\n    return current;\n  };\n\n  return setRefFunction as MakeRef<T>;\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getElement } from '@stencil/core';\nimport { HTMLIxFormComponentElement, IxFormComponent } from '.';\nimport { IxComponent } from '../internal';\n\nexport type ClassMutationObserver = {\n  destroy: () => void;\n};\n\nexport async function isTouched<T>(host: IxFormComponent<T>) {\n  if (typeof host.isTouched === 'function') {\n    return host.isTouched();\n  }\n}\n\nexport async function shouldSuppressInternalValidation<T>(\n  host: IxFormComponent<T>\n) {\n  if (\n    host.getAssociatedFormElement &&\n    typeof host.getAssociatedFormElement === 'function'\n  ) {\n    const form = await host.getAssociatedFormElement();\n\n    if (!form) {\n      return false;\n    }\n\n    return form.noValidate;\n  }\n\n  return false;\n}\n\nexport function createClassMutationObserver(\n  element: HTMLElement,\n  callback: () => void,\n  options?: {\n    includeChildren?: boolean;\n  }\n): ClassMutationObserver {\n  const observer = new MutationObserver(callback);\n  observer.observe(element, {\n    subtree: options?.includeChildren,\n    childList: options?.includeChildren,\n    attributes: true,\n    attributeFilter: ['class'],\n  });\n\n  return {\n    destroy() {\n      observer.disconnect();\n    },\n  };\n}\n\nexport type ValidationResultProperty =\n  | 'isInvalid'\n  | 'isInvalidByRequired'\n  | 'isValid'\n  | 'isInfo'\n  | 'isWarning';\nexport type ValidationResults = Record<ValidationResultProperty, boolean>;\n\nfunction containsClass(\n  hostElement: HTMLIxFormComponentElement<unknown>,\n  className: string,\n  includeChildren: boolean\n) {\n  return (\n    hostElement.classList.contains(`${className}`) ||\n    (includeChildren ? !!hostElement.querySelector(`.${className}`) : false)\n  );\n}\n\nexport function checkFieldClasses(\n  hostElement: HTMLIxFormComponentElement<unknown>,\n  includeChildren = false\n): ValidationResults {\n  return {\n    isInvalid: containsClass(hostElement, 'ix-invalid', includeChildren),\n    isInvalidByRequired: containsClass(\n      hostElement,\n      'ix-invalid--required',\n      includeChildren\n    ),\n    isValid: containsClass(hostElement, 'ix-valid', includeChildren),\n    isInfo: containsClass(hostElement, 'ix-info', includeChildren),\n    isWarning: containsClass(hostElement, 'ix-warning', includeChildren),\n  };\n}\n\nexport function HookValidationLifecycle(options?: {\n  includeChildren?: boolean;\n}) {\n  return (proto: IxComponent, methodName: string) => {\n    let checkIfRequiredFunction: (() => Promise<void>) | null;\n    let classMutationObserver: ClassMutationObserver | null;\n    const { componentWillLoad, disconnectedCallback, connectedCallback } =\n      proto;\n\n    proto.connectedCallback = function () {\n      const host = getElement(\n        this\n      ) as unknown as HTMLIxFormComponentElement<unknown>;\n\n      checkIfRequiredFunction = async () => {\n        const skipValidation = await shouldSuppressInternalValidation(host);\n        if (skipValidation) {\n          return;\n        }\n\n        if (host.hasValidValue && typeof host.hasValidValue === 'function') {\n          const hasValue = await host.hasValidValue();\n          const touched = await isTouched(host);\n\n          if (host.required) {\n            host.classList.toggle('ix-invalid--required', !hasValue && touched);\n          } else {\n            host.classList.remove('ix-invalid--required');\n          }\n        }\n\n        if (\n          host.getValidityState &&\n          typeof host.getValidityState === 'function'\n        ) {\n          const validityState = await host.getValidityState();\n\n          host.classList.toggle(\n            `ix-invalid--validity-patternMismatch`,\n            validityState.patternMismatch\n          );\n        }\n      };\n\n      host.addEventListener('checkedChange', checkIfRequiredFunction);\n      host.addEventListener('valueChange', checkIfRequiredFunction);\n      host.addEventListener('ixBlur', checkIfRequiredFunction);\n      setTimeout(checkIfRequiredFunction);\n      return connectedCallback?.call(this);\n    };\n\n    proto.componentWillLoad = function () {\n      const host = getElement(\n        this\n      ) as unknown as HTMLIxFormComponentElement<unknown>;\n      classMutationObserver = createClassMutationObserver(\n        host,\n        () => {\n          const result = checkFieldClasses(host, options?.includeChildren);\n          proto[methodName].call(this, result);\n        },\n        options\n      );\n      const result = checkFieldClasses(host, options?.includeChildren);\n      proto[methodName].call(this, result);\n      return componentWillLoad?.call(this);\n    };\n\n    proto.disconnectedCallback = function () {\n      const host = getElement(this);\n\n      if (host && classMutationObserver) {\n        classMutationObserver.destroy();\n        classMutationObserver = null;\n      }\n\n      if (host && checkIfRequiredFunction) {\n        host.removeEventListener('checkedChange', checkIfRequiredFunction);\n        host.removeEventListener('valueChange', checkIfRequiredFunction);\n        host.removeEventListener('ixBlur', checkIfRequiredFunction);\n        checkIfRequiredFunction = null;\n      }\n\n      return disconnectedCallback?.call(this);\n    };\n  };\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport const convertToRemString = (value: number) => {\n  const valueRem = value / 16;\n  return `${valueRem}rem`;\n};\n\nexport const convertToAbbreviationString = (num: number) => {\n  if (isNaN(num) || num === null || num === undefined) {\n    return '';\n  }\n\n  let unit = '';\n\n  // Metric Units\n  const units = [\n    { unit: 'q', value: Math.pow(10, 15) },\n    { unit: 't', value: Math.pow(10, 12) },\n    { unit: 'B', value: Math.pow(10, 9) },\n    { unit: 'M', value: Math.pow(10, 6) },\n    { unit: 'K', value: Math.pow(10, 3) },\n  ];\n\n  units.some((pow) => {\n    let formattedNum = Math.abs(num);\n    if (formattedNum >= pow.value) {\n      formattedNum /= pow.value;\n      num = Math.round(formattedNum * 10) / 10;\n      unit = pow.unit;\n      return true;\n    }\n\n    return false;\n  });\n\n  return num + unit;\n};\n"],"names":["createMutationObserver","callback","MutationObserver","TextareaElement","props","h","Object","assign","readOnly","readonly","disabled","maxLength","minLength","cols","textareaCols","rows","textareaRows","ref","textAreaRef","class","isInvalid","required","value","placeholder","onInput","inputEvent","target","updateFormInternalValue","valueChange","onBlur","style","resize","resizeBehavior","height","textareaHeight","width","textareaWidth","ariaAttributes","InputElement","id","autoComplete","step","min","max","Number","undefined","inputRef","pattern","type","onKeyPress","event","SlotEnd","children","slotEndRef","name","onSlotchange","onSlotChange","SlotStart","slotStartRef","mapValidationResult","result","isInvalidByRequired","isValid","isInfo","isWarning","checkAllowedKeys","comp","allowedCharactersPattern","RegExp","test","key","preventDefault","input","current","anime","targets","duration","easing","loop","translateX","xMax","async","checkInternalValidity","validityState","validity","validityStateChange","emit","defaultPrevented","shouldSuppressInternalValidation","valid","hostElement","classList","toggle","onInputBlur","ixBlur","Error","setAttribute","applyPaddingEnd","inputElement","options","padding","convertToRemString","remInPixels","slotEnd","paddingRight","concat","_a","additionalPaddingRight","paddingLeft","adjustPaddingForStartAndEnd","startElement","endElement","requestAnimationFrame","startBoundingRect","getBoundingClientRect","endBoundingRect","getAriaAttributesForInput","component","inputAria","a11yBoolean","invalidText","addDisposableChangesAndVisibilityObservers","element","intersectionObserver","updateCallback","IntersectionObserver","entries","forEach","entry","isIntersecting","observe","observeElementUntilVisible","mutationObserver","subtree","attributes","disconnect","numberInputIds","NumberInput","constructor","hostRef","makeRef","numberInputId","touched","updateClassMappings","this","componentWillLoad","connectedCallback","disposableChangesAndVisibilityObservers","updatePaddings","bind","disconnectedCallback","call","formInternals","setFormValue","toString","getAssociatedFormElement","form","hasValidValue","getNativeInputElement","Promise","resolve","isNaN","waitForCurrent","focusInput","focus","isTouched","render","showStepperButtons","Host","label","helperText","infoText","warningText","validText","showTextAsTooltip","controlRef","ghost","icon","iconMinus","size","onClick","stepDown","iconPlus","stepUp","__decorate","HookValidationLifecycle","prototype","getFallbackLabelFromIconName","iconName","link","url","URL","e","protocol","isHttpUrl","startsWith","replace","split","map","word","trimWord","trim","digitLessWord","length","charAt","toUpperCase","slice","join","a11yHostAttributes","ignoreAttributes","arguments","attributeObject","a11yAttributes","attr","hasAttribute","getAttribute","includes","removeAttribute","currentChangedCallback","currentPromise","res","setRefFunction","host","noValidate","createClassMutationObserver","observer","includeChildren","childList","attributeFilter","destroy","containsClass","className","contains","querySelector","checkFieldClasses","proto","methodName","checkIfRequiredFunction","classMutationObserver","getElement","hasValue","remove","getValidityState","patternMismatch","addEventListener","setTimeout","removeEventListener"],"sourceRoot":""}